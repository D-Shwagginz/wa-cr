{"repository_name":"wa-cr","body":"![logo](https://raw.githubusercontent.com/D-Shwagginz/wa-cr/master/logo/wa-cr.png)\n\n[![Build](https://github.com/D-Shwagginz/wa-cr/actions/workflows/build.yml/badge.svg)](https://github.com/D-Shwagginz/wa-cr/actions/workflows/build.yml)\n[![Spec](https://github.com/D-Shwagginz/wa-cr/actions/workflows/spec.yml/badge.svg)](https://github.com/D-Shwagginz/wa-cr/actions/workflows/spec.yml)\n\n[![Static Badge](https://img.shields.io/badge/Check%20The-Docs-blue)](https://d-shwagginz.github.io/wa-cr/)\n\n<!--\nWhen adding a class:\n* Add comments to the class and all its methods and variables\n* Add to readme if needed\n* Add the class to the cheatsheet\n* Explain the class in the docs overview\n-->\n\n# Where's all the Crystal? | wa-cr\n\nA Crystal library used to parse .wad and .lmp files into usable Crystal code,\nwrite out to a .wad or .lmp file, and convert file types.\n\n## Installation\n\n1. Add `wa-cr` to your `shard.yml`:\n```yml\ndependencies:\n  wa-cr:\n    github: D-Shwagginz/wa-cr\n```\n\n2. Run `shards install`\n\n### Raylib Additions\n\nTo use the wa-cr's [Raylib](https://github.com/raysan5/raylib/releases)\nadditions, you must have [Raylib](https://github.com/raysan5/raylib/releases) installed:\n\n- Install raylib by following the raylib-cr [installation instructions](https://github.com/sol-vin/raylib-cr#installation).\n  - For Linux, follow step 1.\n  - For Windows, follow steps 1-4.\n\n## Usage\n\nwa-cr includes many methods that make jumping into and out of a .wad or .lmp file very easy.<br>\nFollowing is a brief overview of what wa-cr can do.<br>\nFor a complete overview see wa-cr's [docs](https://D-Shwagginz.github.io/wa-cr/index.html)\nand the [complete overview](https://D-Shwagginz.github.io/wa-cr/Documentation.html).\n\n### Wad Data\n\nReading in a .wad is easy by using `WAD.read(filepath or io)`\n```crystal\n# Reads in a wad and sets it to *my_wad*\nmy_wad = WAD.read(\"Path/To/Wad.WAD\")\n```\nYou can read in specific .lmp files too <sup> *.lmp* : an exported doom [Lump](https://doomwiki.org/wiki/Lump).</sup>\n```crystal\n# Reads in a sound lump file and sets it to *my_sound*\nmy_sound = WAD::Sound.parse(\"Path/To/Sound.lmp\")\n```\nYou can also add the data into the wad file with `WAD#add(name, type, file)`\n```crystal\nmy_wad.add(\"MySound\", \"Sound\", \"Path/To/Sound.lmp\")\n```\nAnd you can create entirely new wad files too with `WAD.new(type)`\n```crystal\nmy_new_wad = WAD.new(WAD::Type::Internal)\n\n# You can read data into that new WAD as well\nmy_new_wad.add(\"MySound\", \"Sound\", \"Path/To/Sound.lmp\")\n``` \n\n### Sound Converting\n\nConverting doom-formatted sound data to a .wav file is just as simple by using `Sound#to_wav(filepath or io)`\n```crystal\n# Writes *my_sound* to a .wav file\nmy_sound.to_wav(\"Path/To/WriteSound.wav\")\n```\n\n### Writing Additions\n\nYou can write out .wad and .lmp files from the parsed data as well by using `WAD#write(filepath or io)` and `ThingToWrite#write(filepath or io)`\n```crystal\n# Include the wa-cr write library\nrequire \"wa-cr/write\"\n\n# Write *my_wad* to *\"MyWad.wad\"*\nmy_wad.write(\"Path/To/MyWad.wad\")\n\n\n# Writes the *my_graphic* lump to a .lmp file\nmy_graphic.write(\"Path/To/MyLump.lmp\")\n```\n\n### Raylib Additions\n\nwa-cr takes advantage of [Raylib](https://github.com/raysan5/raylib/releases)\nand [raylib-cr](https://github.com/sol-vin/raylib-cr) with ways to convert [.pngs](https://en.wikipedia.org/wiki/PNG)\nor [Raylib Images](https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L251)\nto doom graphics and doom graphics to\n[Raylib Images](https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L251)\nor [Raylib Colors](https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L235C6-L235C6)\nand draw said images or colors to the screen\n```crystal\n# Include the wa-cr raylib library\nrequire \"wa-cr/raylib\"\n\npalette = my_wad.playpal.palettes[0]\n\nmy_graphic_image = my_graphic.to_tex(palette)\nmy_flat_image = my_flat.to_tex(palette)\n# You can also get textures from the texture maps\nmy_texture_image = my_wad.get_texture(\"texture_name_in_texturex\", palette)\n\n# Gets the pixel data in the graphic and the flat\nmy_graphic_pixel = my_graphic.get_pixel(20, 5, palette)\nmy_flat_pixel = my_flat.get_pixel(2, 10, palette)\n\n# Gets a png as a doom graphic\nmy_graphic_png = WAD::Graphic.from_png(\"Path/To/MyGraphic.png\", palette)\nmy_flat_png = WAD::Graphic.from_png(\"Path/To/MyFlat.png\", palette)\n\n# Png exports\nmy_wad.export_texture(\"MyTexture\", \"Path/To/MyTexture.png\", palette)\nmy_graphic.to_png(\"Path/To/MyGraphic.png\", palette)\nmy_flat.to_png(\"Path/To/MyFlat.png\", palette)\n```\n\n### Apps\n\nwa-cr provides useful apps that will help you with using `WAD` data.<br>\nTo access wa-cr's apps, just require `wa-cr/apps`\nHere is a full list of all modules inside `Apps`:\n\n- `Apps::MapViewer`\n- `Apps::WadViewer` - WIP\n\n## Limitations\n\n* Demos won't work properly because of how the doom engine's psuedo-random number generator works. If the wads are different at all, the demos won't function as intended\n\n## Contributing\n\n1. Fork it (<https://github.com/D-Shwagginz/wa-cr/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Devin Shwagginz](https://github.com/D-Shwagginz) - creator and maintainer\n- [Ian Rash](https://github.com/sol-vin) - Code Review and DevOPS\n","program":{"html_id":"wa-cr/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"wa-cr","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"wa-cr/Apps","path":"Apps.html","kind":"module","full_name":"Apps","name":"Apps","abstract":false,"locations":[{"filename":"src/apps.cr","line_number":4,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps.cr#L4"},{"filename":"src/apps/map-viewer.cr","line_number":7,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/map-viewer.cr#L7"},{"filename":"src/apps/map-viewer/map_viewer_grid.cr","line_number":3,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/map-viewer/map_viewer_grid.cr#L3"},{"filename":"src/apps/map-viewer/map_viewer_main.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/map-viewer/map_viewer_main.cr#L1"},{"filename":"src/apps/map-viewer/map_viewer_sector.cr","line_number":3,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/map-viewer/map_viewer_sector.cr#L3"},{"filename":"src/apps/map-viewer/map_viewer_thing.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/map-viewer/map_viewer_thing.cr#L1"},{"filename":"src/apps/wad-viewer.cr","line_number":8,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/wad-viewer.cr#L8"},{"filename":"src/apps/wad-viewer/wad-viewer_main.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/wad-viewer/wad-viewer_main.cr#L1"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"doc":"A module containing all apps that wa-cr provides","summary":"<p>A module containing all apps that wa-cr provides</p>","types":[{"html_id":"wa-cr/Apps/MapViewer","path":"Apps/MapViewer.html","kind":"module","full_name":"Apps::MapViewer","name":"MapViewer","abstract":false,"locations":[{"filename":"src/apps/map-viewer.cr","line_number":14,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/map-viewer.cr#L14"},{"filename":"src/apps/map-viewer/map_viewer_grid.cr","line_number":4,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/map-viewer/map_viewer_grid.cr#L4"},{"filename":"src/apps/map-viewer/map_viewer_main.cr","line_number":2,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/map-viewer/map_viewer_main.cr#L2"},{"filename":"src/apps/map-viewer/map_viewer_sector.cr","line_number":4,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/map-viewer/map_viewer_sector.cr#L4"},{"filename":"src/apps/map-viewer/map_viewer_thing.cr","line_number":2,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/map-viewer/map_viewer_thing.cr#L2"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"RESX","name":"RESX","value":"1000"},{"id":"RESY","name":"RESY","value":"1000"},{"id":"VERSION","name":"VERSION","value":"\"1.0.0\""}],"namespace":{"html_id":"wa-cr/Apps","kind":"module","full_name":"Apps","name":"Apps"},"doc":"An app used for viewing maps\n\nTo use, call `Apps::MapViewer.run(wad, map)`\n\nTo use in the command line, call `Apps::MapViewer.run_cli`\nand use `-w` and `-m`","summary":"<p>An app used for viewing maps</p>","class_methods":[{"html_id":"draw_grid(grid_size)-class-method","name":"draw_grid","doc":"Draws a grid with size *grid_size*","summary":"<p>Draws a grid with size <em>grid_size</em></p>","abstract":false,"args":[{"name":"grid_size","external_name":"grid_size","restriction":""}],"args_string":"(grid_size)","args_html":"(grid_size)","location":{"filename":"src/apps/map-viewer/map_viewer_grid.cr","line_number":6,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/map-viewer/map_viewer_grid.cr#L6"},"def":{"name":"draw_grid","args":[{"name":"grid_size","external_name":"grid_size","restriction":""}],"visibility":"Public","body":"RLGL.push_matrix\nRLGL.rotate_f(180, 0, 1, 0)\nRLGL.push_matrix\nRLGL.rotate_f(90, 1, 0, 0)\nRL.draw_grid(8000, grid_size)\nRLGL.pop_matrix\nRLGL.pop_matrix\n\nRLGL.push_matrix\nRLGL.rotate_f(-180, 0, 1, 0)\nRLGL.push_matrix\nRLGL.rotate_f(90, 1, 0, 0)\nRL.draw_grid(8000, grid_size)\nRLGL.pop_matrix\nRLGL.pop_matrix\n\nRLGL.push_matrix\nRLGL.rotate_f(90, 1, 0, 0)\nRL.draw_grid(8000, grid_size)\nRLGL.pop_matrix\n"},"external_var":false},{"html_id":"draw_texture_poly(texture:RL::Texture2D,points:Array(RL::Vector2),texcoords:Array(RL::Vector2),tint:RL::Color)-class-method","name":"draw_texture_poly","doc":"Draws a polygon","summary":"<p>Draws a polygon</p>","abstract":false,"args":[{"name":"texture","external_name":"texture","restriction":"RL::Texture2D"},{"name":"points","external_name":"points","restriction":"Array(RL::Vector2)"},{"name":"texcoords","external_name":"texcoords","restriction":"Array(RL::Vector2)"},{"name":"tint","external_name":"tint","restriction":"RL::Color"}],"args_string":"(texture : RL::Texture2D, points : Array(RL::Vector2), texcoords : Array(RL::Vector2), tint : RL::Color)","args_html":"(texture : RL::Texture2D, points : Array(RL::Vector2), texcoords : Array(RL::Vector2), tint : RL::Color)","location":{"filename":"src/apps/map-viewer/map_viewer_sector.cr","line_number":14,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/map-viewer/map_viewer_sector.cr#L14"},"def":{"name":"draw_texture_poly","args":[{"name":"texture","external_name":"texture","restriction":"RL::Texture2D"},{"name":"points","external_name":"points","restriction":"Array(RL::Vector2)"},{"name":"texcoords","external_name":"texcoords","restriction":"Array(RL::Vector2)"},{"name":"tint","external_name":"tint","restriction":"RL::Color"}],"visibility":"Public","body":"sum_x = 0\nsum_y = 0\npoints.each do |vector| sum_x = sum_x + vector.x end\npoints.each do |vector| sum_y = sum_y + vector.y end\ncenter = RL::Vector2.new(x: sum_x / points.size, y: sum_y / points.size)\n\npoints_count = points.size\n\nRLGL.set_texture(texture.id)\n\nRLGL.begin(RLGL::QUADS)\n\nRLGL.color_4ub(tint.r, tint.g, tint.b, tint.a)\n\n(points_count - 1).times do |i|\n  RLGL.texcoord_2f(0.5, 0.5)\n  RLGL.vertex_2f(center.x, center.y)\n\n  RLGL.texcoord_2f(texcoords[i].x, texcoords[i].y)\n  RLGL.vertex_2f(points[i].x, points[i].y)\n\n  RLGL.texcoord_2f(texcoords[i + 1].x, texcoords[i + 1].y)\n  RLGL.vertex_2f(points[i + 1].x, points[i + 1].y)\n\n  RLGL.texcoord_2f(texcoords[i + 1].x, texcoords[i + 1].y)\n  RLGL.vertex_2f(points[i + 1].x, points[i + 1].y)\nend\n\nRLGL.end\nRLGL.set_texture(0)\n"},"external_var":false},{"html_id":"run(input_file:String,input_map:String=\"\")-class-method","name":"run","doc":"Runs the map viewer given a wad path and a map name","summary":"<p>Runs the map viewer given a wad path and a map name</p>","abstract":false,"args":[{"name":"input_file","external_name":"input_file","restriction":"String"},{"name":"input_map","default_value":"\"\"","external_name":"input_map","restriction":"String"}],"args_string":"(input_file : String, input_map : String = \"\")","args_html":"(input_file : String, input_map : String = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/apps/map-viewer/map_viewer_main.cr","line_number":13,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/map-viewer/map_viewer_main.cr#L13"},"def":{"name":"run","args":[{"name":"input_file","external_name":"input_file","restriction":"String"},{"name":"input_map","default_value":"\"\"","external_name":"input_map","restriction":"String"}],"visibility":"Public","body":"if File.exists?(input_file)\nelse\n  raise(\"ERROR: '#{input_file}' IS NOT A VALID .wad FILE\")\nend\nwad = WAD.read(input_file)\nself.run(wad, input_map)\n"},"external_var":false},{"html_id":"run(wad:WAD,input_map:String=\"\")-class-method","name":"run","doc":"Runs the map viewer given a wad and a map name","summary":"<p>Runs the map viewer given a wad and a map name</p>","abstract":false,"args":[{"name":"wad","external_name":"wad","restriction":"WAD"},{"name":"input_map","default_value":"\"\"","external_name":"input_map","restriction":"String"}],"args_string":"(wad : WAD, input_map : String = \"\")","args_html":"(wad : <a href=\"../WAD.html\">WAD</a>, input_map : String = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/apps/map-viewer/map_viewer_main.cr","line_number":20,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/map-viewer/map_viewer_main.cr#L20"},"def":{"name":"run","args":[{"name":"wad","external_name":"wad","restriction":"WAD"},{"name":"input_map","default_value":"\"\"","external_name":"input_map","restriction":"String"}],"visibility":"Public","body":"if input_map == \"\"\n  puts(\"\\nNo map specified. Using first map in WAD\\n\\n\")\nend\n\npalette = wad.playpal.palettes[0]\n\nif input_map == \"\"\n  map = wad.maps.values[0]\nelsif !(map = wad.maps[input_map]?)\n  raise(\"ERROR: '#{input_map}' IS NOT A VALID MAP IN '#{wad}'\")\nend\n\nRL.init_window(RESX, RESY, \"Map Viewer\")\nRL.set_window_state(RL::ConfigFlags::WindowResizable)\nRL.set_target_fps(60)\n\ntextures = Hash(String, RL::Texture2D).new\n\nwad.sprites.each do |key, value|\n  image = value.to_image(palette)\n  textures[key] = RL.load_texture_from_image(image)\nend\n\nwad.flats.each do |key, value|\n  image = value.to_image(palette)\n  textures[key] = RL.load_texture_from_image(image)\nend\n\ncamera = RL::Camera2D.new\ncamera.zoom = 1.0\ncamera.target = RL::Vector2.new(x: map.vertexes[0].x_position, y: -map.vertexes[0].y_position)\ncamera.offset = RL::Vector2.new(x: RL.get_screen_width / 2, y: RL.get_screen_height / 2)\ncamera_speed_multiplier = 600\ncamera_zoom_speed = 0.6\ncamera_speed = 0\n\ngrid_size_exponent = 4\ngrid_size = 2 ** grid_size_exponent\n\nsectors : Array(Sector) = [] of Sector\n\nmap.sectors.each.with_index do |sector, index|\n  current_sector = Sector.new\n  current_sector.index = index\n\n  current_sector.sector = sector\n\n  map.linedefs.each do |linedef|\n    if linedef.front_sidedef != -1\n      front_sidedef = map.sidedefs[linedef.front_sidedef]\n      if front_sidedef.facing_sector_num == index\n        current_sector.points << RL::Vector2.new(x: map.vertexes[linedef.start_vertex].x_position, y: -map.vertexes[linedef.start_vertex].y_position)\n        current_sector.points << RL::Vector2.new(x: map.vertexes[linedef.end_vertex].x_position, y: -map.vertexes[linedef.end_vertex].y_position)\n\n        current_sector.texcoords << RL::Vector2.new(x: 0, y: 0)\n        current_sector.texcoords << RL::Vector2.new(x: 0, y: 0)\n      end\n    end\n\n    if linedef.back_sidedef != -1\n      back_sidedef = map.sidedefs[linedef.back_sidedef]\n      if back_sidedef.facing_sector_num == index\n        current_sector.points << RL::Vector2.new(x: map.vertexes[linedef.start_vertex].x_position, y: -map.vertexes[linedef.start_vertex].y_position)\n        current_sector.points << RL::Vector2.new(x: map.vertexes[linedef.end_vertex].x_position, y: -map.vertexes[linedef.end_vertex].y_position)\n\n        current_sector.texcoords << RL::Vector2.new(x: 0, y: 0)\n        current_sector.texcoords << RL::Vector2.new(x: 0, y: 0)\n      end\n    end\n  end\n\n  sectors << current_sector\nend\n\nthings : Array(Thing) = [] of Thing\n\nmap.things.each.with_index do |thing, index|\n  current_thing = Thing.new(thing, index)\n  current_thing.texture = textures[WAD::Map::THING_TYPES[thing.thing_type][1]]?\n  things << current_thing\nend\n\nwhile !RL.close_window?\n  if RL.key_down?(RL::KeyboardKey::Up)\n    camera.target = camera.target - RL::Vector2.new(x: 0, y: camera_speed * RL.get_frame_time)\n  end\n  if RL.key_down?(RL::KeyboardKey::Down)\n    camera.target = camera.target + RL::Vector2.new(x: 0, y: camera_speed * RL.get_frame_time)\n  end\n  if RL.key_down?(RL::KeyboardKey::Left)\n    camera.target = camera.target - RL::Vector2.new(x: camera_speed * RL.get_frame_time, y: 0)\n  end\n  if RL.key_down?(RL::KeyboardKey::Right)\n    camera.target = camera.target + RL::Vector2.new(x: camera_speed * RL.get_frame_time, y: 0)\n  end\n\n  if RL.key_pressed?(RL::KeyboardKey::LeftBracket)\n    grid_size_exponent = grid_size_exponent - 1\n    grid_size_exponent = grid_size_exponent.clamp(0, 10)\n    puts(\"Grid Size: #{grid_size_exponent}\")\n  end\n  if RL.key_pressed?(RL::KeyboardKey::RightBracket)\n    grid_size_exponent = grid_size_exponent + 1\n    grid_size_exponent = grid_size_exponent.clamp(0, 10)\n    puts(\"Grid Size: #{grid_size_exponent}\")\n  end\n  grid_size = 2 ** grid_size_exponent\n\n  if RL.key_down?(RL::KeyboardKey::Equal)\n    camera.zoom = camera.zoom + (camera_zoom_speed * RL.get_frame_time)\n  end\n  if RL.key_down?(RL::KeyboardKey::Minus)\n    camera.zoom = camera.zoom - (camera_zoom_speed * RL.get_frame_time)\n  end\n  camera.zoom = camera.zoom.clamp(0.05, nil)\n  camera_speed = (1 / camera.zoom) * camera_speed_multiplier\n\n\n\n  camera.offset = RL::Vector2.new(x: RL.get_screen_width / 2, y: RL.get_screen_height / 2)\n\n  things.each do |thing|\n    thing.mouse_over = RL.check_collision_point_circle?(RL.get_screen_to_world_2d(RL::Vector2.new(x: RL.get_mouse_x, y: RL.get_mouse_y), camera), RL::Vector2.new(x: map.things[thing.index].x_position, y: -map.things[thing.index].y_position), WAD::Map::THING_TYPES[map.things[thing.index].thing_type][2])\n    thing.update\n  end\n\n\n\n  RL.begin_drawing\n  RL.clear_background(RL::RAYWHITE)\n\n\n\n  RL.draw_text(\"Grid Size: #{grid_size_exponent}\", 10, 10, 50, RL::RED)\n\n  RL.draw_text(\"Zoom: #{camera.zoom}\", 10, 60, 50, RL::RED)\n\n  RL.draw_text(\"Cursor X: #{(RL.get_screen_to_world_2d(RL::Vector2.new(x: RL.get_mouse_x, y: RL.get_mouse_y), camera)).x}\", 10, 110, 50, RL::RED)\n  RL.draw_text(\"Cursor y: #{-(RL.get_screen_to_world_2d(RL::Vector2.new(x: RL.get_mouse_x, y: RL.get_mouse_y), camera)).y}\", 10, 160, 50, RL::RED)\n\n\n  RL.begin_mode_2d(camera)\n\n\n\n  Raygui.grid(RL::Rectangle.new(x: -100000, y: -100000, width: 100000 * 2, height: 100000 * 2), nil, grid_size, 1, nil)\n\n\n\n  map.linedefs.each do |linedef|\n    RL.draw_line(map.vertexes[linedef.start_vertex].x_position, -map.vertexes[linedef.start_vertex].y_position, map.vertexes[linedef.end_vertex].x_position, -map.vertexes[linedef.end_vertex].y_position, RL::BLACK)\n  end\n\n\n\n\n\n\n\n\n\n\n  things.each do |thing| thing.draw end\n\n\n\n  RL.end_mode_2d\n  RL.end_drawing\nend\n\ntextures.values.each do |texture|\n  RL.unload_texture(texture)\nend\n\nRL.close_window\n"},"external_var":false},{"html_id":"run_cli-class-method","name":"run_cli","doc":"Runs the map viewer with *wad* and *map* defined in the command line\n-w Path/To/Wad\n-m MapName (not required)\n-h (Shows the help)","summary":"<p>Runs the map viewer with <em>wad</em> and <em>map</em> defined in the command line -w Path/To/Wad -m MapName (not required) -h (Shows the help)</p>","abstract":false,"location":{"filename":"src/apps/map-viewer.cr","line_number":19,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/map-viewer.cr#L19"},"def":{"name":"run_cli","visibility":"Public","body":"wad_file : String = \"\"\nmap : String = \"\"\n\nOptionParser.parse do |parser|\n  parser.banner = \"Usage: shards run map-viewer -- -w Path/To/MyWad.wad -m E1M1\"\n\n  parser.on(\"-w WAD\", \"--wad=WAD\", \"Sets the .wad for map-viewer to use\") do |input_wad| wad_file = input_wad end\n\n  parser.on(\"-m MAP\", \"--map=MAP\", \"Sets the map for map-viewer to use\") do |input_map| map = input_map.upcase end\n\n  parser.on(\"-h\", \"--help\", \"Shows this help\") do\n    puts(parser)\n    exit\n  end\n\n  parser.invalid_option do |flag|\n    STDERR.puts(\"ERROR: #{flag} is not a valid option.\")\n    exit(1)\n  end\nend\n\nif wad_file == \"\"\n  raise(\"Map Viewer requires a .wad file input by using `map-viewer -w Path/To/Wad`\")\nend\n\nApps::MapViewer.run(wad_file, map)\n"},"external_var":false}]},{"html_id":"wa-cr/Apps/WadViewer","path":"Apps/WadViewer.html","kind":"module","full_name":"Apps::WadViewer","name":"WadViewer","abstract":false,"locations":[{"filename":"src/apps/wad-viewer.cr","line_number":15,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/wad-viewer.cr#L15"},{"filename":"src/apps/wad-viewer/wad-viewer_main.cr","line_number":2,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/wad-viewer/wad-viewer_main.cr#L2"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"DIRECTORIES_PANEL_ITEMS_HEIGHT","name":"DIRECTORIES_PANEL_ITEMS_HEIGHT","value":"20"},{"id":"DIRECTORIES_PANEL_ITEMS_SPACING","name":"DIRECTORIES_PANEL_ITEMS_SPACING","value":"0"},{"id":"DIRECTORIES_PANEL_STATUSBAR_TEXT_SIZE","name":"DIRECTORIES_PANEL_STATUSBAR_TEXT_SIZE","value":"25"},{"id":"DIRECTORIES_PANEL_TEXT_COLOR","name":"DIRECTORIES_PANEL_TEXT_COLOR","value":"Raylib.color_to_int(Raylib::Color.new(r: 66, g: 176, b: 245, a: 200))"},{"id":"DIRECTORIES_PANEL_TEXT_EDITED_COLOR","name":"DIRECTORIES_PANEL_TEXT_EDITED_COLOR","value":"Raylib.color_to_int(Raylib::Color.new(r: 11, g: 57, b: 156, a: 200))"},{"id":"DIRECTORIES_PANEL_TEXT_SELECTED_COLOR","name":"DIRECTORIES_PANEL_TEXT_SELECTED_COLOR","value":"Raylib.color_to_int(Raylib::Color.new(r: 237, g: 36, b: 36, a: 200))"},{"id":"DIRECTORIES_PANEL_TEXT_SIZE","name":"DIRECTORIES_PANEL_TEXT_SIZE","value":"14"},{"id":"LUMP_INFO_PANEL_TEXT_SIZE","name":"LUMP_INFO_PANEL_TEXT_SIZE","value":"10"},{"id":"RESX","name":"RESX","value":"800"},{"id":"RESY","name":"RESY","value":"600"},{"id":"VERSION","name":"VERSION","value":"\"1.0.0\""},{"id":"WAD_SAVE_PANEL_HEADER_TEXT_SIZE","name":"WAD_SAVE_PANEL_HEADER_TEXT_SIZE","value":"16"},{"id":"WAD_SAVE_PANEL_TEXT_COMPLETE_COLOR","name":"WAD_SAVE_PANEL_TEXT_COMPLETE_COLOR","value":"Raylib.color_to_int(Raylib::Color.new(r: 13, g: 255, b: 53, a: 200))"},{"id":"WAD_SAVE_PANEL_TEXT_DEFAULT_COLOR","name":"WAD_SAVE_PANEL_TEXT_DEFAULT_COLOR","value":"Raylib.color_to_int(Raylib::Color.new(r: 23, g: 81, b: 103, a: 200))"},{"id":"WAD_SAVE_PANEL_TEXT_FAILED_COLOR","name":"WAD_SAVE_PANEL_TEXT_FAILED_COLOR","value":"Raylib.color_to_int(Raylib::Color.new(r: 255, g: 34, b: 0, a: 200))"},{"id":"WAD_SAVE_PANEL_TEXT_NOFILENAME_COLOR","name":"WAD_SAVE_PANEL_TEXT_NOFILENAME_COLOR","value":"Raylib.color_to_int(Raylib::Color.new(r: 255, g: 0, b: 255, a: 200))"},{"id":"WAD_SAVE_PANEL_TEXT_SIZE","name":"WAD_SAVE_PANEL_TEXT_SIZE","value":"10"},{"id":"WAD_SAVE_PANEL_TEXT_WAITING_COLOR","name":"WAD_SAVE_PANEL_TEXT_WAITING_COLOR","value":"Raylib.color_to_int(Raylib::Color.new(r: 0, g: 195, b: 255, a: 200))"},{"id":"WAD_SAVE_PANEL_TEXT_WORKING_COLOR","name":"WAD_SAVE_PANEL_TEXT_WORKING_COLOR","value":"Raylib.color_to_int(Raylib::Color.new(r: 0, g: 255, b: 195, a: 200))"},{"id":"WINDOW_RESX","name":"WINDOW_RESX","value":"1920"},{"id":"WINDOW_RESY","name":"WINDOW_RESY","value":"1440"}],"namespace":{"html_id":"wa-cr/Apps","kind":"module","full_name":"Apps","name":"Apps"},"doc":"An app used for viewing wads\n\nTo use, call `Apps::WadViewer.run(wad)`\n\nTo use in the command line, call `Apps::WadViewer.run_cli`\nand use `-w`","summary":"<p>An app used for viewing wads</p>","class_methods":[{"html_id":"remove_nulls(string:String):String-class-method","name":"remove_nulls","doc":"Removes all null bytes from a string","summary":"<p>Removes all null bytes from a string</p>","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"String"}],"args_string":"(string : String) : String","args_html":"(string : String) : String","location":{"filename":"src/apps/wad-viewer/wad-viewer_main.cr","line_number":38,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/wad-viewer/wad-viewer_main.cr#L38"},"def":{"name":"remove_nulls","args":[{"name":"string","external_name":"string","restriction":"String"}],"return_type":"String","visibility":"Public","body":"new_string = String.build do |str|\n  string.chars.each do |char|\n    if char.ord.to_u8 != 0\n      str << char\n    end\n  end\nend\nreturn new_string\n"},"external_var":false},{"html_id":"run(input_file:String)-class-method","name":"run","doc":"Runs the wad viewer given a wad path","summary":"<p>Runs the wad viewer given a wad path</p>","abstract":false,"args":[{"name":"input_file","external_name":"input_file","restriction":"String"}],"args_string":"(input_file : String)","args_html":"(input_file : String)","location":{"filename":"src/apps/wad-viewer/wad-viewer_main.cr","line_number":48,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/wad-viewer/wad-viewer_main.cr#L48"},"def":{"name":"run","args":[{"name":"input_file","external_name":"input_file","restriction":"String"}],"visibility":"Public","body":"if File.exists?(input_file)\nelse\n  raise(\"ERROR: '#{input_file}' IS NOT A VALID .wad FILE\")\nend\nwad = WAD.read(input_file)\nself.run(wad)\n"},"external_var":false},{"html_id":"run(wad:WAD)-class-method","name":"run","doc":"Runs the wad viewer given a wad","summary":"<p>Runs the wad viewer given a wad</p>","abstract":false,"args":[{"name":"wad","external_name":"wad","restriction":"WAD"}],"args_string":"(wad : WAD)","args_html":"(wad : <a href=\"../WAD.html\">WAD</a>)","location":{"filename":"src/apps/wad-viewer/wad-viewer_main.cr","line_number":55,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/wad-viewer/wad-viewer_main.cr#L55"},"def":{"name":"run","args":[{"name":"wad","external_name":"wad","restriction":"WAD"}],"visibility":"Public","body":"RL.init_window(WINDOW_RESX, WINDOW_RESY, \"Wad Viewer\")\nRL.set_window_state(RL::ConfigFlags::WindowResizable)\nRL.set_target_fps(60)\nRL.set_window_min_size(320, 240)\n\ndefault_base_button_normal_color = RG.get_style(RG::Control::Button, RG::ControlProperty::BaseColorNormal)\ndefault_border_button_normal_color = RG.get_style(RG::Control::Button, RG::ControlProperty::BorderColorNormal)\ndefault_base_button_focused_color = RG.get_style(RG::Control::Button, RG::ControlProperty::BaseColorFocused)\ndefault_border_button_focused_color = RG.get_style(RG::Control::Button, RG::ControlProperty::BorderColorFocused)\n\ndraw_directories_panel = true\ndraw_tools_panel = true\ndraw_file_save_panel = false\ndraw_wad_info_panel = true\ndraw_lump_info_panel = true\ndraw_playpal_panel = false\ndraw_graphic_panel = false\ndraw_map_info_panel = false\n\ntarget = RL.load_render_texture(RESX, RESY)\nRL.set_texture_filter(target.texture, RL::TextureFilter::Bilinear)\n\n\n\ndirectories_panel_rec = RL::Rectangle.new(width: 160, height: target.texture.height)\ndirectories_panel_content_rec = RL::Rectangle.new\ndirectories_panel_scroll = RL::Vector2.new\ndirectories_panel_view_rec = RL::Rectangle.new\n\ntools_panel_rec = RL::Rectangle.new(x: directories_panel_rec.width + 5, y: 10, width: 220, height: 32)\ntools_panel_button_rec = RL::Rectangle.new(x: tools_panel_rec.x + 4, y: tools_panel_rec.y + 8, width: 20, height: 20)\n\nsave_panel_rec = RL::Rectangle.new(x: (RESX / 2) - (288 / 2), y: 60, width: 288, height: 58)\nwad_save_filename = \"\"\nwad_save_status_value = [\"complete\", \"failed\", \"no filename\", \"working\", \"waiting\"]\nwad_save_status = 4\n\nwad_info_panel_rec = RL::Rectangle.new(x: tools_panel_rec.x, y: (tools_panel_rec.y + tools_panel_rec.height) + 10, width: tools_panel_rec.width, height: 100)\n\nlump_info_panel_rec = RL::Rectangle.new(x: wad_info_panel_rec.x, y: (wad_info_panel_rec.y + wad_info_panel_rec.height) + 10, width: wad_info_panel_rec.width, height: 40)\n\nplaypal_panel_rec = RL::Rectangle.new(x: (tools_panel_rec.x + tools_panel_rec.width) + 10, y: tools_panel_rec.y, width: 346, height: 34 + (24 * (wad.playpal.palettes[0].colors.size // 13)))\nplaypal_selected_palette = 1\nplaypal_selected_index = 0\n\nfile_save_panel_rec = RL::Rectangle.new(x: (RESX / 2) - (288 / 2), y: 60, width: 288, height: 58)\n\ngraphic_panel_rec = RL::Rectangle.new(x: (tools_panel_rec.x + tools_panel_rec.width) + 10, y: tools_panel_rec.y, width: 346, height: 400)\ngraphic_panel_target_rec = RL::Rectangle.new(x: graphic_panel_rec.x + 5, y: graphic_panel_rec.y + 15, width: graphic_panel_rec.width - 10, height: graphic_panel_rec.height - 25)\ncurrent_texture = nil\ngraphic_viewer_target = nil\ngraphic_viewer_camera = RL::Camera2D.new\ngraphic_viewer_camera.zoom = 1.0_f32\n\n\n\nwad_saved = wad.clone\nwad_unsaved = wad.clone\n\n\ndirectories = [] of Tuple(WAD::Directory, Int32, Bool, Bool)\nselected_directory = WAD::Directory.new\n\nwad_saved.directories.each.with_index do |directory, index|\n  if (wad_saved.what_is?(directory.name)) == \"Map\"\n    directory.size = directory.size + wad_saved.maps[directory.name].things_directory.size\n    directory.size = directory.size + wad_saved.maps[directory.name].linedefs_directory.size\n    directory.size = directory.size + wad_saved.maps[directory.name].sidedefs_directory.size\n    directory.size = directory.size + wad_saved.maps[directory.name].vertexes_directory.size\n    directory.size = directory.size + wad_saved.maps[directory.name].segs_directory.size\n    directory.size = directory.size + wad_saved.maps[directory.name].ssectors_directory.size\n    directory.size = directory.size + wad_saved.maps[directory.name].nodes_directory.size\n    directory.size = directory.size + wad_saved.maps[directory.name].sectors_directory.size\n    directory.size = directory.size + wad_saved.maps[directory.name].reject_directory.size\n    directory.size = directory.size + wad_saved.maps[directory.name].blockmap_directory.size\n  end\n\n  directories << {directory, index, false, false}\nend\n\nwhile !RL.close_window?\n  scale = RL::Vector2.new(x: RL.get_screen_width / RESX, y: RL.get_screen_height / RESY)\n  if scale.x < scale.y\n    scale = scale.x\n  else\n    scale = scale.y\n  end\n\n  RL.set_mouse_offset((-(RL.get_screen_width - (RESX * scale))) * 0.5, (-(RL.get_screen_height - (RESY * scale))) * 0.5)\n  RL.set_mouse_scale(1 / scale, 1 / scale)\n\n  directories_panel_text_height = RG.get_style(RG::Control::ListView, RG::ListViewProperty::ItemsHeight)\n  directories_panel_text_spacing = RG.get_style(RG::Control::ListView, RG::ListViewProperty::ItemsSpacing)\n\n  draw_playpal_panel = (wad_unsaved.what_is?(selected_directory.name)) == \"Playpal\"\n  draw_map_info_panel = (wad_unsaved.what_is?(selected_directory.name)) == \"Map\"\n  draw_graphic_panel = ((\n    ((wad_unsaved.what_is?(selected_directory.name)) == \"Graphic\") ||\n    ((wad_unsaved.what_is?(selected_directory.name)) == \"Sprite\")\n  ) ||\n  ((wad_unsaved.what_is?(selected_directory.name)) == \"Flat\"))\n\n  if !draw_playpal_panel\n    playpal_selected_index = 0\n  end\n\n\n\n\n\n  if draw_graphic_panel\n    if current_texture.nil?\n      case wad_unsaved.what_is?(selected_directory.name)\n      when \"Graphic\"\n        image = wad_unsaved.graphics[selected_directory.name].to_image(wad_unsaved.playpal.palettes[playpal_selected_palette - 1])\n        current_texture = RL.load_texture_from_image(image)\n        RL.unload_image(image)\n      when \"Sprite\"\n        image = wad_unsaved.sprites[selected_directory.name].to_image(wad_unsaved.playpal.palettes[playpal_selected_palette - 1])\n        current_texture = RL.load_texture_from_image(image)\n        RL.unload_image(image)\n      when \"Flat\"\n        image = wad_unsaved.flats[selected_directory.name].to_image(wad_unsaved.playpal.palettes[playpal_selected_palette - 1])\n        current_texture = RL.load_texture_from_image(image)\n        RL.unload_image(image)\n      end\n    end\n\n    if graphic_viewer_target.nil? && current_texture\n      graphic_viewer_target = RL.load_render_texture(graphic_panel_target_rec.width, graphic_panel_target_rec.height)\n    end\n\n    if graphic_viewer_target && current_texture\n      RL.begin_texture_mode(graphic_viewer_target)\n      RL.clear_background(RL::BLANK)\n      RL.begin_mode_2d(graphic_viewer_camera)\n      RL.draw_texture(current_texture, 0, 0, RL::WHITE)\n      RL.end_mode_2d\n      RL.end_texture_mode\n    end\n  else\n    if current_texture\n      RL.unload_texture(current_texture)\n      current_texture = nil\n    end\n\n    if graphic_viewer_target\n      RL.unload_render_texture(graphic_viewer_target)\n      graphic_viewer_target = nil\n    end\n  end\n\n\n\n  RL.begin_texture_mode(target)\n  RL.clear_background(RL::RAYWHITE)\n\n\n\n\n  if draw_directories_panel\n    RG.set_style(RG::Control::ListView, RG::ListViewProperty::ItemsHeight, DIRECTORIES_PANEL_ITEMS_HEIGHT)\n    RG.set_style(RG::Control::ListView, RG::ListViewProperty::ItemsSpacing, DIRECTORIES_PANEL_ITEMS_SPACING)\n    RG.set_style(RG::Control::Default, RG::DefaultProperty::TextSize, DIRECTORIES_PANEL_STATUSBAR_TEXT_SIZE)\n    RG.set_style(RG::Control::StatusBar, RG::ControlProperty::TextAlignment, RG::TextAlignment::Center)\n\n    RG.scroll_panel(directories_panel_rec, \"Directories\", directories_panel_content_rec, pointerof(directories_panel_scroll), pointerof(directories_panel_view_rec))\n\n    RL.begin_scissor_mode(directories_panel_view_rec.x, directories_panel_view_rec.y, directories_panel_view_rec.width, directories_panel_view_rec.height)\n\n    RG.set_style(RG::Control::Default, RG::DefaultProperty::TextSize, DIRECTORIES_PANEL_TEXT_SIZE)\n    RG.set_style(RG::Control::TextBox, RG::ControlProperty::TextColorNormal, DIRECTORIES_PANEL_TEXT_COLOR)\n    RG.set_style(RG::Control::TextBox, RG::ControlProperty::TextColorPressed, DIRECTORIES_PANEL_TEXT_SELECTED_COLOR)\n    RG.set_style(RG::Control::TextBox, RG::ControlProperty::TextAlignment, RG::TextAlignment::Left)\n\n    directories_panel_content_rec.height = 0\n    directories.each do |directory, index, edit_mode, edited|\n      line_width = RL.measure_text(\"XXXXXXXXXX\", RG.get_style(RG::Control::Default, RG::DefaultProperty::TextSize))\n      line_width = line_width + (RL.measure_text(\"XXXXXXXXXX\", RG.get_style(RG::Control::Default, RG::DefaultProperty::TextSize)))\n\n      directory.name = directory.name.lchop('?')\n\n      slice = Slice.new(8, 0_u8)\n      directory.name.chars.each.with_index do |char, index|\n        slice[index] = char.ord.to_u8\n      end\n      dir_name_io = IO::Memory.new(slice)\n      dir_name_io.read(slice)\n      name = String.new(slice)\n\n      text_width = RL.measure_text(\"XXXXXXXXXX\", RG.get_style(RG::Control::Default, RG::DefaultProperty::TextSize))\n\n      if directory.name == selected_directory.name\n        RG.set_style(RG::Control::TextBox, RG::ControlProperty::TextColorNormal, DIRECTORIES_PANEL_TEXT_SELECTED_COLOR)\n      elsif edited\n        RG.set_style(RG::Control::TextBox, RG::ControlProperty::TextColorNormal, DIRECTORIES_PANEL_TEXT_EDITED_COLOR)\n      else\n        RG.set_style(RG::Control::TextBox, RG::ControlProperty::TextColorNormal, DIRECTORIES_PANEL_TEXT_COLOR)\n      end\n\n      if directory != selected_directory\n        edit_mode = false\n      end\n\n      if RG.text_box(RL::Rectangle.new(x: directories_panel_view_rec.x + directories_panel_scroll.x, y: ((directories_panel_view_rec.y + directories_panel_scroll.y) + (directories_panel_text_height * index)) + (directories_panel_text_spacing * index), width: text_width, height: directories_panel_text_height), name, 9, edit_mode)\n        edit_mode = !edit_mode\n        if current_texture\n          RL.unload_texture(current_texture)\n        end\n        current_texture = nil\n\n\n        graphic_viewer_target = nil\n        selected_directory = directory\n      end\n\n      RG.set_style(RG::Control::TextBox, RG::ControlProperty::TextColorNormal, DIRECTORIES_PANEL_TEXT_COLOR)\n\n      RG.text_box(RL::Rectangle.new(x: (directories_panel_view_rec.x + directories_panel_scroll.x) + text_width, y: ((directories_panel_view_rec.y + directories_panel_scroll.y) + (directories_panel_text_height * index)) + (directories_panel_text_spacing * index), width: 100, height: directories_panel_text_height), wad_unsaved.what_is?(directory.name), 100, false)\n\n      name = self.remove_nulls(name)\n      edited = wad_saved.directories[index].name != (WAD.string_sub_chars(name))\n\n      directory.name = \"?#{WAD.string_sub_chars(name)}\"\n      directories[index] = {directory, index, edit_mode, edited}\n\n      if wad_unsaved.directories[index].name != directory.name.lchop\n        changed_dir = WAD::Directory.new\n        changed_dir.file_pos = directory.file_pos\n        changed_dir.size = directory.size\n        changed_dir.name = directory.name.lchop\n        selected_directory = changed_dir\n        wad_unsaved.rename_lump(wad_unsaved.directories[index].name, directory.name.lchop)\n        wad_unsaved.directories[index] = changed_dir\n      end\n\n      if line_width > directories_panel_content_rec.width\n        directories_panel_content_rec.width = line_width\n      end\n      directories_panel_content_rec.height = directories_panel_content_rec.height + (directories_panel_text_height + directories_panel_text_spacing)\n    end\n\n    RL.end_scissor_mode\n  end\n\n  RG.set_style(RG::Control::Default, RG::DefaultProperty::TextSize, LUMP_INFO_PANEL_TEXT_SIZE)\n\n\n  if draw_wad_info_panel\n    RG.group_box(wad_info_panel_rec, \"WAD Info\")\n    RG.label(RL::Rectangle.new(x: wad_info_panel_rec.x + 5, y: wad_info_panel_rec.y + 15, width: 200, height: 0), \"Type: #{wad_unsaved.type}\")\n    RG.label(RL::Rectangle.new(x: wad_info_panel_rec.x + 110, y: wad_info_panel_rec.y + 15, width: 200, height: 0), \"Dir Pointer: #{wad_unsaved.directory_pointer}\")\n    RG.label(RL::Rectangle.new(x: wad_info_panel_rec.x + 5, y: wad_info_panel_rec.y + 30, width: 200, height: 0), \"Lumps: #{wad_unsaved.directories_count}\")\n    RG.label(RL::Rectangle.new(x: wad_info_panel_rec.x + 110, y: wad_info_panel_rec.y + 30, width: 200, height: 0), \"Maps: #{wad_unsaved.maps.size}\")\n    RG.label(RL::Rectangle.new(x: wad_info_panel_rec.x + 5, y: wad_info_panel_rec.y + 45, width: 200, height: 0), \"PcSounds: #{wad_unsaved.pcsounds.size}\")\n    RG.label(RL::Rectangle.new(x: wad_info_panel_rec.x + 110, y: wad_info_panel_rec.y + 45, width: 200, height: 0), \"Sounds: #{wad_unsaved.sounds.size}\")\n    RG.label(RL::Rectangle.new(x: wad_info_panel_rec.x + 5, y: wad_info_panel_rec.y + 60, width: 200, height: 0), \"Music: #{wad_unsaved.music.size}\")\n    RG.label(RL::Rectangle.new(x: wad_info_panel_rec.x + 110, y: wad_info_panel_rec.y + 60, width: 200, height: 0), \"TexMaps: #{wad_unsaved.texmaps.size}\")\n    RG.label(RL::Rectangle.new(x: wad_info_panel_rec.x + 5, y: wad_info_panel_rec.y + 75, width: 200, height: 0), \"Graphics: #{wad_unsaved.graphics.size}\")\n    RG.label(RL::Rectangle.new(x: wad_info_panel_rec.x + 110, y: wad_info_panel_rec.y + 75, width: 200, height: 0), \"Sprites: #{wad_unsaved.sprites.size}\")\n    RG.label(RL::Rectangle.new(x: wad_info_panel_rec.x + 5, y: wad_info_panel_rec.y + 90, width: 200, height: 0), \"Flats: #{wad_unsaved.flats.size}\")\n    RG.label(RL::Rectangle.new(x: wad_info_panel_rec.x + 110, y: wad_info_panel_rec.y + 90, width: 200, height: 0), \"Demos: #{wad_unsaved.demos.size}\")\n  end\n\n\n  if draw_lump_info_panel\n    RG.group_box(lump_info_panel_rec, \"Lump Info\")\n    RG.label(RL::Rectangle.new(x: lump_info_panel_rec.x + 5, y: lump_info_panel_rec.y + 15, width: 200, height: 0), \"Name: '#{selected_directory.name}'\")\n    RG.label(RL::Rectangle.new(x: lump_info_panel_rec.x + 110, y: lump_info_panel_rec.y + 15, width: 200, height: 0), \"Size: '#{selected_directory.size}'\")\n    RG.label(RL::Rectangle.new(x: lump_info_panel_rec.x + 5, y: lump_info_panel_rec.y + 30, width: 200, height: 0), \"Type: '#{wad_unsaved.what_is?(selected_directory.name)}'\")\n    RG.label(RL::Rectangle.new(x: lump_info_panel_rec.x + 110, y: lump_info_panel_rec.y + 30, width: 200, height: 0), \"File Pos: '#{selected_directory.file_pos}'\")\n  end\n\n\n  if draw_tools_panel\n    RG.group_box(tools_panel_rec, \"Tools\")\n\n    RG.set_tooltip(\"Save as\")\n    RG.enable_tooltip\n    if RG.button(RL::Rectangle.new(x: tools_panel_button_rec.x, y: tools_panel_button_rec.y, width: tools_panel_button_rec.width, height: tools_panel_button_rec.height), RG.icon_text(RG::IconName::FileSave, nil))\n      draw_file_save_panel = !draw_file_save_panel\n    end\n    RG.disable_tooltip\n\n    RG.set_tooltip(\"Save\")\n    RG.enable_tooltip\n    if RG.button(RL::Rectangle.new(x: (tools_panel_button_rec.x + tools_panel_button_rec.width) + 2, y: tools_panel_button_rec.y, width: tools_panel_button_rec.width, height: tools_panel_button_rec.height), RG.icon_text(RG::IconName::FileSaveClassic, nil))\n      if wad_save_filename.empty?\n        draw_file_save_panel = !draw_file_save_panel\n      else\n        wad_save_status = 3\n\n        wad_save_filename = wad_save_filename.lchop('?')\n        wad_save_filename = WAD.string_sub_chars(wad_save_filename)\n\n        if wad_save_filename.size > 0\n          begin\n            if wad_save_filename.size >= 255\n              wad_save_filename = wad_save_filename[0...-4]\n              wad_save_filename = wad_save_filename + \".wad\"\n            elsif (\n              (wad_save_filename.size < 4) ||\n              (wad_save_filename[-4..-1] != \"~wad\")\n            ) ||\n            (wad_save_filename == \"~wad\")\n              wad_save_filename = wad_save_filename + \".wad\"\n            else\n              wad_save_filename = wad_save_filename[0...-4] + \".wad\"\n            end\n\n            wad_saved = wad_unsaved.clone\n            wad_saved.write(\"./rsrc/#{wad_save_filename}\")\n          rescue\n            wad_save_status = 1\n          end\n        else\n          wad_save_status = 2\n        end\n\n        if (wad_save_status != 1) && (wad_save_status != 2)\n          wad_save_status = 0\n        end\n      end\n    end\n    RG.disable_tooltip\n  end\n\n\n  if draw_playpal_panel\n    RG.group_box(playpal_panel_rec, \"Playpal\")\n\n    RG.line(RL::Rectangle.new(x: playpal_panel_rec.x, y: playpal_panel_rec.y + 24, width: playpal_panel_rec.width, height: 4), nil)\n\n    if RG.button(RL::Rectangle.new(x: playpal_panel_rec.x + 5, y: playpal_panel_rec.y + 8, width: 14, height: 14), RG.icon_text(RG::IconName::ArrowLeft, nil))\n      playpal_selected_palette = playpal_selected_palette - 1\n      if playpal_selected_palette == 0\n        playpal_selected_palette = wad_unsaved.playpal.palettes.size\n      end\n      playpal_selected_palette = playpal_selected_palette.clamp(1, wad_unsaved.playpal.palettes.size)\n    end\n\n    if RG.button(RL::Rectangle.new(x: playpal_panel_rec.x + 26, y: playpal_panel_rec.y + 8, width: 14, height: 14), RG.icon_text(RG::IconName::ArrowRight, nil))\n      playpal_selected_palette = playpal_selected_palette + 1\n      if playpal_selected_palette == (wad_unsaved.playpal.palettes.size + 1)\n        playpal_selected_palette = 0\n      end\n      playpal_selected_palette = playpal_selected_palette.clamp(1, wad_unsaved.playpal.palettes.size)\n    end\n\n    RG.set_style(RG::Control::Default, RG::DefaultProperty::TextSize, 14)\n    RG.set_style(RG::Control::Default, RG::DefaultProperty::TextAlignmentVertical, RG::TextAlignmentVertical::Middle)\n\n    RG.label(RL::Rectangle.new(x: playpal_panel_rec.x + 42, y: playpal_panel_rec.y + 8, width: 100, height: 14), \"Pallete: #{playpal_selected_palette}/#{wad_unsaved.playpal.palettes.size}\")\n\n    RG.set_style(RG::Control::Default, RG::DefaultProperty::TextSize, 12)\n\n    RG.label(RL::Rectangle.new(x: playpal_panel_rec.x + 140, y: playpal_panel_rec.y + 8, width: 300, height: 14), ((\"Index: #{playpal_selected_index}   \" + \"R: #{wad_unsaved.playpal.palettes[playpal_selected_palette - 1].colors[playpal_selected_index].r}, \") + \"G: #{wad_unsaved.playpal.palettes[playpal_selected_palette - 1].colors[playpal_selected_index].g}, \") + \"B: #{wad_unsaved.playpal.palettes[playpal_selected_palette - 1].colors[playpal_selected_index].b}\")\n\n    wad_unsaved.playpal.palettes[playpal_selected_palette - 1].colors.each.with_index do |color, index|\n      if playpal_selected_index == index\n        RG.set_style(RG::Control::Button, RG::ControlProperty::BorderColorNormal, RL.color_to_int(RL::Color.new(r: 220, g: 220, b: 220, a: 255)))\n      else\n        RG.set_style(RG::Control::Button, RG::ControlProperty::BorderColorNormal, RL.color_to_int(RL::Color.new(r: 140, g: 140, b: 140, a: 255)))\n      end\n      RG.set_style(RG::Control::Button, RG::ControlProperty::BaseColorNormal, RL.color_to_int(RL::Color.new(r: color.r, g: color.g, b: color.b, a: 255)))\n      RG.set_style(RG::Control::Button, RG::ControlProperty::BaseColorFocused, RL.color_to_int(RL::Color.new(r: color.r, g: color.g, b: color.b, a: 255)))\n      RG.set_style(RG::Control::Button, RG::ControlProperty::BorderColorFocused, RL.color_to_int(RL::Color.new(r: 160, g: 160, b: 160, a: 255)))\n\n      if RG.button(RL::Rectangle.new(x: ((playpal_panel_rec.x + 5) + (index * 24)) - ((24 * (index // 14)) * 14), y: (playpal_panel_rec.y + 30) + (24 * (index // 14)), width: 24, height: 24), nil)\n        playpal_selected_index = index\n      end\n    end\n  end\n\n\n  if draw_graphic_panel\n    RG.group_box(graphic_panel_rec, \"Graphic Viewer\")\n    RG.grid(graphic_panel_target_rec, nil, 12, 1, nil)\n\n    if graphic_viewer_target\n      RL.draw_texture_pro(graphic_viewer_target.texture, RL::Rectangle.new(width: graphic_viewer_target.texture.width, height: -graphic_viewer_target.texture.height), graphic_panel_target_rec, RL::Vector2.new, 0, RL::WHITE)\n    end\n  end\n\n  RG.set_style(RG::Control::Button, RG::ControlProperty::BaseColorNormal, default_base_button_normal_color)\n  RG.set_style(RG::Control::Button, RG::ControlProperty::BorderColorNormal, default_border_button_normal_color)\n  RG.set_style(RG::Control::Button, RG::ControlProperty::BaseColorFocused, default_base_button_focused_color)\n  RG.set_style(RG::Control::Button, RG::ControlProperty::BorderColorFocused, default_border_button_focused_color)\n\n\n  if draw_map_info_panel\n  end\n\n  RG.set_style(RG::Control::Default, RG::DefaultProperty::TextSize, WAD_SAVE_PANEL_HEADER_TEXT_SIZE)\n\n\n  if draw_file_save_panel\n    wad_save_filename = wad_save_filename.lchop('?')\n    slice = Slice.new(255, 0_u8)\n    i = 0\n    wad_save_filename.chars.each do |char|\n      if char.ord.to_u8 == 0\n        next\n      end\n      slice[i] = char.ord.to_u8\n      i = i + 1\n    end\n    wad_filename_io = IO::Memory.new(slice)\n    wad_filename_io.read(slice)\n    wad_filename = String.new(slice)\n\n    if RG.window_box(save_panel_rec, \"Save WAD\")\n      draw_file_save_panel = false\n    end\n    RG.text_box(RL::Rectangle.new(x: save_panel_rec.x + 2, y: save_panel_rec.y + 36, width: 260, height: 20), wad_filename, 256, true)\n\n    wad_filename = self.remove_nulls(wad_filename)\n\n    wad_save_filename = \"?#{wad_filename}\"\n\n    RG.set_style(RG::Control::Default, RG::DefaultProperty::TextSize, WAD_SAVE_PANEL_TEXT_SIZE)\n\n    RG.label(RL::Rectangle.new(x: save_panel_rec.x + 2, y: save_panel_rec.y + 30, width: 200, height: 0), \"Filename:\")\n\n    RG.label(RL::Rectangle.new(x: (save_panel_rec.x + save_panel_rec.width) - 140, y: save_panel_rec.y + 30, width: 200, height: 0), \"Status: \")\n\n    case wad_save_status\n    when 0\n      RG.set_style(RG::Control::Label, RG::ControlProperty::TextColorNormal, WAD_SAVE_PANEL_TEXT_COMPLETE_COLOR)\n    when 1\n      RG.set_style(RG::Control::Label, RG::ControlProperty::TextColorNormal, WAD_SAVE_PANEL_TEXT_FAILED_COLOR)\n    when 2\n      RG.set_style(RG::Control::Label, RG::ControlProperty::TextColorNormal, WAD_SAVE_PANEL_TEXT_NOFILENAME_COLOR)\n    when 3\n      RG.set_style(RG::Control::Label, RG::ControlProperty::TextColorNormal, WAD_SAVE_PANEL_TEXT_WORKING_COLOR)\n    when 4\n      RG.set_style(RG::Control::Label, RG::ControlProperty::TextColorNormal, WAD_SAVE_PANEL_TEXT_WAITING_COLOR)\n    end\n\n    RG.label(RL::Rectangle.new(x: (save_panel_rec.x + save_panel_rec.width) - 100, y: save_panel_rec.y + 30, width: 200, height: 0), \"#{wad_save_status_value[wad_save_status]}\")\n\n    RG.set_style(RG::Control::Label, RG::ControlProperty::TextColorNormal, WAD_SAVE_PANEL_TEXT_DEFAULT_COLOR)\n\n    RG.set_tooltip(\"Save\")\n    RG.enable_tooltip\n    if RG.button(RL::Rectangle.new(x: (save_panel_rec.x + save_panel_rec.width) - 24, y: save_panel_rec.y + 30, width: 20, height: 20), RG.icon_text(RG::IconName::FileSave, nil))\n      wad_save_status = 3\n\n      wad_save_filename = wad_save_filename.lchop('?')\n      wad_save_filename = WAD.string_sub_chars(wad_save_filename)\n\n      if wad_save_filename.size > 0\n        begin\n          if wad_save_filename.size >= 255\n            wad_save_filename = wad_save_filename[0...-4]\n            wad_save_filename = wad_save_filename + \".wad\"\n          elsif (\n            (wad_save_filename.size < 4) ||\n            (wad_save_filename[-4..-1] != \"~wad\")\n          ) ||\n          (wad_save_filename == \"~wad\")\n            wad_save_filename = wad_save_filename + \".wad\"\n          else\n            wad_save_filename = wad_save_filename[0...-4] + \".wad\"\n          end\n\n          wad_saved = wad_unsaved.clone\n          wad_saved.write(\"./rsrc/#{wad_save_filename}\")\n        rescue\n          wad_save_status = 1\n        end\n      else\n        wad_save_status = 2\n      end\n\n      if (wad_save_status != 1) && (wad_save_status != 2)\n        wad_save_status = 0\n      end\n    end\n    RG.disable_tooltip\n  else\n    wad_save_status = 4\n  end\n\n\n\n  RL.end_texture_mode\n\n  RL.begin_drawing\n\n  RL.clear_background(RL::BLACK)\n\n  RL.draw_texture_pro(target.texture, RL::Rectangle.new(width: target.texture.width, height: -target.texture.height), RL::Rectangle.new(x: (RL.get_screen_width - (RESX * scale)) * 0.5, y: (RL.get_screen_height - (RESY * scale)) * 0.5, width: RESX * scale, height: RESY * scale), RL::Vector2.new, 0, RL::WHITE)\n\n  RL.end_drawing\nend\n\nRL.unload_render_texture(target)\n\nRL.close_window\n"},"external_var":false},{"html_id":"run_cli-class-method","name":"run_cli","doc":"Runs the wad viewer with *wad* defined in the command line\n-w Path/To/Wad\n-h (Shows the help)","summary":"<p>Runs the wad viewer with <em>wad</em> defined in the command line -w Path/To/Wad -h (Shows the help)</p>","abstract":false,"location":{"filename":"src/apps/wad-viewer.cr","line_number":19,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/apps/wad-viewer.cr#L19"},"def":{"name":"run_cli","visibility":"Public","body":"wad_file : String = \"\"\n\nOptionParser.parse do |parser|\n  parser.banner = \"Usage: shards run map-viewer -- -w Path/To/MyWad.wad\"\n\n  parser.on(\"-w WAD\", \"--wad=WAD\", \"Sets the .wad for map-viewer to use\") do |input_wad| wad_file = input_wad end\n\n  parser.on(\"-h\", \"--help\", \"Shows this help\") do\n    puts(parser)\n    exit\n  end\n\n  parser.invalid_option do |flag|\n    STDERR.puts(\"ERROR: #{flag} is not a valid option.\")\n    exit(1)\n  end\nend\n\nif wad_file == \"\"\n  raise(\"Wad Viewer requires a .wad file input by using `map-viewer -w Path/To/Wad`\")\nend\n\nApps::WadViewer.run(wad_file)\n"},"external_var":false}]}]},{"html_id":"wa-cr/Documentation","path":"Documentation.html","kind":"module","full_name":"Documentation","name":"Documentation","abstract":false,"locations":[{"filename":"src/wa-cr/docs.cr","line_number":3,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs.cr#L3"},{"filename":"src/wa-cr/docs/c_usage/usage_a_making_a_wad.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_a_making_a_wad.cr#L1"},{"filename":"src/wa-cr/docs/c_usage/usage_b_using_wad_data.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_b_using_wad_data.cr#L1"},{"filename":"src/wa-cr/docs/c_usage/usage_c_on_directories.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_c_on_directories.cr#L1"},{"filename":"src/wa-cr/docs/c_usage/usage_d_reading_lumps.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_d_reading_lumps.cr#L1"},{"filename":"src/wa-cr/docs/c_usage/usage_e_converting_file_types.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_e_converting_file_types.cr#L1"},{"filename":"src/wa-cr/docs/c_usage/usage_f_writing_files.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_f_writing_files.cr#L1"},{"filename":"src/wa-cr/docs/c_usage/usage_g_using_with_raylib.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_g_using_with_raylib.cr#L1"},{"filename":"src/wa-cr/docs/c_usage/usage_h_apps.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_h_apps.cr#L1"},{"filename":"src/wa-cr/docs/d_cheatsheet/cheatsheet_a_reading.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/d_cheatsheet/cheatsheet_a_reading.cr#L1"},{"filename":"src/wa-cr/docs/d_cheatsheet/cheatsheet_b_writingadditions.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/d_cheatsheet/cheatsheet_b_writingadditions.cr#L1"},{"filename":"src/wa-cr/docs/d_cheatsheet/cheatsheet_c_raylibadditions.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/d_cheatsheet/cheatsheet_c_raylibadditions.cr#L1"},{"filename":"src/wa-cr/docs/d_cheatsheet/cheatsheet_d_extras.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/d_cheatsheet/cheatsheet_d_extras.cr#L1"},{"filename":"src/wa-cr/docs/d_cheatsheet/cheatsheet_e_apps.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/d_cheatsheet/cheatsheet_e_apps.cr#L1"},{"filename":"src/wa-cr/docs/docs_a_introduction.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/docs_a_introduction.cr#L1"},{"filename":"src/wa-cr/docs/docs_b_installation.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/docs_b_installation.cr#L1"},{"filename":"src/wa-cr/docs/docs_c_usage.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/docs_c_usage.cr#L1"},{"filename":"src/wa-cr/docs/docs_d_cheatsheet.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/docs_d_cheatsheet.cr#L1"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"doc":"### This is an overview of how to install and use wa-cr to it's fullest<br>\nIt is recommended to read over this guide to fully understand how to use wa-cr","summary":"<h3><a id=\"this-is-an-overview-of-how-to-install-and-use-wa-cr-to-its-fullestbr-it-is-recommended-to-read-over-this-guide-to-fully-understand-how-to-use-wa-cr\" class=\"anchor\" href=\"#this-is-an-overview-of-how-to-install-and-use-wa-cr-to-its-fullestbr-it-is-recommended-to-read-over-this-guide-to-fully-understand-how-to-use-wa-cr\">  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a>This is an overview of how to install and use wa-cr to it's fullest<br> It is recommended to read over this guide to fully understand how to use wa-cr</h3>","types":[{"html_id":"wa-cr/Documentation/A_Introduction","path":"Documentation/A_Introduction.html","kind":"module","full_name":"Documentation::A_Introduction","name":"A_Introduction","abstract":false,"locations":[{"filename":"src/wa-cr/docs/docs_a_introduction.cr","line_number":64,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/docs_a_introduction.cr#L64"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/Documentation","kind":"module","full_name":"Documentation","name":"Documentation"},"doc":"# Where's all the Crystal? | wa-cr\n\nwa-cr, or \"Where's all the Crystal?,\" is a Crystal library used to read in and write\nout [.WAD](https://doomwiki.org/wiki/WAD) files and [Lump](https://doomwiki.org/wiki/Lump) data.<br>\nIt uses the `WritingAdditions` module to allow for writing lump and wad data.<br>\nIt also has the `RaylibAdditions` module which combines [Raylib](https://github.com/raysan5/raylib/tree/master)\nand [Raylib-cr](https://github.com/sol-vin/raylib-cr) to allow converting from a wad graphic, flat, or sprite to\na [Raylib Image](https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L251)\nor a [Raylib Color](https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L235C6-L235C6)\n\nReading in and writing out a wad is as easy:\n```\nrequire \"wa-cr\"\nrequire \"wa-cr/write\"\n\nmy_wad = WAD.read(\"Path/To/Wad\")\n\nmy_wad.write(\"Path/To/my_wad.WAD\")\n```\n\nReading in and writing out a lump is just as easy:\n\n```\nrequire \"wa-cr\"\nrequire \"wa-cr/write\"\n\nmy_sound_lump = WAD::Sounds.parse(\"Path/To/MySound.lmp\")\n\nmy_sound_lump.write(\"Path/To/my_sound.lmp\")\n```\n\nAnd you can read that lump back into a new `WAD` with `WAD#add(name, type, filename)`:\n\n```\nrequire \"wa-cr\"\n\n# When creating a new WAD, you have to set it's type (Internal or Patch)\nmy_new_wad = WAD.new(WAD::Type::Internal)\n\nmy_new_wad.add(\"MySound\", \"Sound\", \"Path/To/my_sound.lmp\")\n```\n\nTo use the Raylib additions, just require `wa-cr/raylib`:\n\n```\nrequire \"wa-cr\"\nrequire \"wa-cr/raylib\"\n\nmy_wad = WAD.read(\"Path/To/Wad\")\npalette = my_wad.playpal.palettes[0]\n\nmy_texture = my_wad.get_texture(\"MyTexture\", palette)\n\nmy_graphic = my_wad.graphics[\"MyGraphic\"]\nmy_flat = my_wad.flats[\"MyFlat\"]\n\nmy_raylib_graphic_image = my_graphic.to_image(palette)\nmy_raylib_graphic_pixel = my_graphic.get_pixel(0, 0)\n\nmy_raylib_flat_image = my_flat.to_image(palette)\nmy_raylib_flat_pixel = my_flat.get_pixel(0, 0)\n```","summary":"<h1><a id=\"wheres-all-the-crystal-wa-cr\" class=\"anchor\" href=\"#wheres-all-the-crystal-wa-cr\">  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a>Where's all the Crystal? | wa-cr</h1>"},{"html_id":"wa-cr/Documentation/B_Installation","path":"Documentation/B_Installation.html","kind":"module","full_name":"Documentation::B_Installation","name":"B_Installation","abstract":false,"locations":[{"filename":"src/wa-cr/docs/docs_b_installation.cr","line_number":26,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/docs_b_installation.cr#L26"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/Documentation","kind":"module","full_name":"Documentation","name":"Documentation"},"doc":"To install wa-cr, just add it to your `shard.yml` dependencies\n```yml\ndependencies:\n  wa-cr:\n    github: D-Shwagginz/wa-cr\n```\nAnd then run `shards install`\n\n### Raylib Additions\nTo use the Raylib additions, you'll have to install [Raylib](https://github.com/raysan5/raylib/releases)\n\n### Requiring\nTo use wa-cr:\n```\nrequire \"wa-cr\"\n```\nTo use wa-cr's writing additions:\n```\nrequire \"wa-cr/write\"\n```\nTo use wa-cr's [Raylib](https://github.com/raysan5/raylib/releases) additions:\n```\nrequire \"wa-cr/raylib\"\n```","summary":"<p>To install wa-cr, just add it to your <code>shard.yml</code> dependencies <code>yml dependencies:   wa-cr:     github: D-Shwagginz/wa-cr </code> And then run <code>shards install</code></p>"},{"html_id":"wa-cr/Documentation/C_Usage","path":"Documentation/C_Usage.html","kind":"module","full_name":"Documentation::C_Usage","name":"C_Usage","abstract":false,"locations":[{"filename":"src/wa-cr/docs/c_usage/usage_a_making_a_wad.cr","line_number":2,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_a_making_a_wad.cr#L2"},{"filename":"src/wa-cr/docs/c_usage/usage_b_using_wad_data.cr","line_number":2,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_b_using_wad_data.cr#L2"},{"filename":"src/wa-cr/docs/c_usage/usage_c_on_directories.cr","line_number":2,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_c_on_directories.cr#L2"},{"filename":"src/wa-cr/docs/c_usage/usage_d_reading_lumps.cr","line_number":2,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_d_reading_lumps.cr#L2"},{"filename":"src/wa-cr/docs/c_usage/usage_e_converting_file_types.cr","line_number":2,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_e_converting_file_types.cr#L2"},{"filename":"src/wa-cr/docs/c_usage/usage_f_writing_files.cr","line_number":2,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_f_writing_files.cr#L2"},{"filename":"src/wa-cr/docs/c_usage/usage_g_using_with_raylib.cr","line_number":2,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_g_using_with_raylib.cr#L2"},{"filename":"src/wa-cr/docs/c_usage/usage_h_apps.cr","line_number":2,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_h_apps.cr#L2"},{"filename":"src/wa-cr/docs/docs_c_usage.cr","line_number":14,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/docs_c_usage.cr#L14"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/Documentation","kind":"module","full_name":"Documentation","name":"Documentation"},"doc":"wa-cr and its additions provides lots of\nmethods to read in, parse, and write out lump and wad data.<br>\nThis is a general usage guide to help get you started with using wa-cr.<br>\nNOTE: This guide assumes that wa-cr is required\n\n```\nrequire \"wa-cr\"\n```\n\nDon't forget to visit the [Doom Wiki](https://doomwiki.org/wiki/Doom_Wiki)\nfor better explanations of what every part of a wad is. This guide explains\nwa-cr, not [Doom](https://doomwiki.org/wiki/Doom) and it's [Wad](https://doomwiki.org/wiki/WAD) format","summary":"<p>wa-cr and its additions provides lots of methods to read in, parse, and write out lump and wad data.<br> This is a general usage guide to help get you started with using wa-cr.<br> NOTE: This guide assumes that wa-cr is required</p>","types":[{"html_id":"wa-cr/Documentation/C_Usage/A_MakingAWad","path":"Documentation/C_Usage/A_MakingAWad.html","kind":"module","full_name":"Documentation::C_Usage::A_MakingAWad","name":"A_MakingAWad","abstract":false,"locations":[{"filename":"src/wa-cr/docs/c_usage/usage_a_making_a_wad.cr","line_number":31,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_a_making_a_wad.cr#L31"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/Documentation/C_Usage","kind":"module","full_name":"Documentation::C_Usage","name":"C_Usage"},"doc":"You can make a `WAD` by either creating a new one or reading a .wad file in.<br>\nNote that when creating a new `WAD`, you'll need to put its `WAD::Type` in:\n\n```\nmy_new_internal_wad = WAD.new(WAD::Type::Internal)\nmy_new_patch_wad = WAD.new(WAD::Type::Patch)\n```\n\nNote the overloads of `WAD.read(file : String | Path | IO)`.<br>\nMany methods have similar overloads to allow interacting\nwith a file without having to open the file yourself:\n\n```\nFile.open(\"Path/To/Wad\") do |file|\n  my_read_io_wad = WAD.read(file)\nend\n\n# Overloads\nmy_read_string_wad = WAD.read(\"Path/To/Wad\")\nmy_read_path_wad = WAD.read(Path[\"Path/To/Wad\"])\n```\n\n`WAD` also has `WAD.read?(file : String | Path | IO)`\nand `WAD.read!(file : String | Path | IO)`\n\n`WAD.read?` is the same as `WAD.read` but returns Nil if parsing the WAD throws any errors\n\n`WAD.read!` is the same as `WAD.read` but returns any lump parsing errors","summary":"<p>You can make a <code><a href=\"../../WAD.html\">WAD</a></code> by either creating a new one or reading a .wad file in.<br> Note that when creating a new <code><a href=\"../../WAD.html\">WAD</a></code>, you'll need to put its <code><a href=\"../../WAD/Type.html\">WAD::Type</a></code> in:</p>"},{"html_id":"wa-cr/Documentation/C_Usage/B_UsingWadData","path":"Documentation/C_Usage/B_UsingWadData.html","kind":"module","full_name":"Documentation::C_Usage::B_UsingWadData","name":"B_UsingWadData","abstract":false,"locations":[{"filename":"src/wa-cr/docs/c_usage/usage_b_using_wad_data.cr","line_number":68,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_b_using_wad_data.cr#L68"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/Documentation/C_Usage","kind":"module","full_name":"Documentation::C_Usage","name":"C_Usage"},"doc":"Getting data from a `WAD` is fairly simple.<br>\nEverything in a `WAD` is stored in either a hash or\njust as the object it is storing:\n\n```\nmy_wad.sounds  # => A hash of all sounds in the WAD\nmy_wad.playpal # => A variable assigned to the playpal in the WAD\n```\n\nHere is a list of every variable in the `WAD` class\nwith a link to its full explanation on the doom wiki\n\n`WAD#type : WAD::Type` - The type of the `WAD` - [Wiki](https://doomwiki.org/wiki/WAD#:~:text=4-,identification,-The%20ASCII%20characters)<br>\n`WAD#directories_count : UInt32` - The amount of lumps in the `WAD` - [Wiki](https://doomwiki.org/wiki/WAD#:~:text=4-,numlumps,-An%20integer%20specifying)<br>\n`WAD#directory_pointer : UInt32` - The location of the start of the directories in bytes - [Wiki](https://doomwiki.org/wiki/WAD#:~:text=4-,infotableofs,-An%20integer%20holding)<br>\n`WAD#maps : Hash(String, Map)` - A hash that maps a name to a `WAD::Map` - [Wiki](https://doomwiki.org/wiki/WAD#:~:text=location%20is%20crucial.-,Map%20data%20lumps,-%5Bedit%5D)<br>\n`WAD#pcsounds : Hash(String, PcSound)` - A hash that maps a name to a `WAD::PcSound` - [Wiki](https://doomwiki.org/wiki/PC_speaker_sound_effects)<br>\n`WAD#sounds : Hash(String, Sound)` - A hash that maps a name to a `WAD::Sound` - [Wiki](https://doomwiki.org/wiki/Sound)<br>\n`WAD#music : Hash(String, Music)` - A hash that maps a name to a `WAD::Music` - [Wiki](https://doomwiki.org/wiki/MUS)<br>\n`WAD#genmidi : WAD::Genmidi` - The genmidi of the `WAD` - [Wiki](https://doomwiki.org/wiki/GENMIDI)<br>\n`WAD#dmxgus : WAD::Dmxgus` - The dmxgus of the `WAD` - [Wiki](https://doomwiki.org/wiki/DMXGUS)<br>\n`WAD#playpal : WAD::Playpal` - The playpal of the `WAD` - [Wiki](https://doomwiki.org/wiki/PLAYPAL)<br>\n`WAD#colormap : WAD::Colormap` - The colormap of the `WAD` - [Wiki](https://doomwiki.org/wiki/COLORMAP)<br>\n`WAD#endoom : WAD::EnDoom` - The EnDoom of the `WAD` - [Wiki](https://doomwiki.org/wiki/ENDOOM)<br>\n`WAD#texmaps : Hash(String, TextureX)` - A hash that maps a name to a `WAD::TextureX` - [Wiki](https://doomwiki.org/wiki/TEXTURE1_and_TEXTURE2)<br>\n`WAD#pnames : WAD::Pnames` - The pnames of the `WAD` - [Wiki](https://doomwiki.org/wiki/PNAMES)<br>\n`WAD#graphics : Hash(String, Graphic)` - A hash that maps a name to a `WAD::Graphic` - [Wiki](https://doomwiki.org/wiki/Graphics)<br>\n`WAD#sprites : Hash(String, Graphic)` - A hash that maps a name to a `WAD::Graphic` - [Wiki](https://doomwiki.org/wiki/Sprite)<br>\n`WAD#flats : Hash(String, Flat)` - A hash that maps a name to a `WAD::Flat` - [Wiki](https://doomwiki.org/wiki/Flat)<br>\n`WAD#demos : Hash(String, Demo)` - A hash that maps a name to a `WAD::Demo` - [Wiki](https://doomwiki.org/wiki/Demo)<br>\n`WAD#directories : Array(Directory)` - An array of all the `WAD::Directory`'s in the `WAD` - [Wiki](https://doomwiki.org/wiki/WAD#:~:text=serving%20as%20IWADs.-,Directory,-%5Bedit%5D)\n\nNOTE: `WAD#texmaps` maps a name to a `WAD::TextureX`, not a \"`WAD::TexMap`\".\n\nThe reason for this class name is because a texture map's file name will always\nhave the format \"TextureX\" where X is a number, which the class' name reflects.<br>\nIt also helps to prevent confusion when talking about a texture map, since\nthe data inside a texture map/TextureX are called texture maps - [Wiki](https://doomwiki.org/wiki/TEXTURE1_and_TEXTURE2#:~:text=equal%20to%20integers.-,Map%20textures%20structure%2C%20binary%20data,-%5Bedit%5D)\n\nHere are a few examples of how to access `WAD`'s data:\n\n```\nmy_wad = WAD.read(\"Path/To/Wad\") # => Reads in the wad\n\nmy_sound = my_wad.sounds[\"MySound\"] # => Returns the sound \"MySound\" out of *my_wad*\n\nmy_map = my_wad.maps[\"MyMap\"]                 # => Returns the map \"MyMap\" out of *my_wad*\nmy_linedef = my_map.linedefs[0]               # => Returns the first linedef out of *my_map*\nmy_linedef_sector_tag = my_linedef.sector_tag # => Returns the sector tag of the linedef\n```\n\nYou can alter `WAD::Graphic` and `WAD::Flat` pixel data with `.set_pixel(x, y, value)`:\n\nNOTE: *value* does not refer to an rgb value, but to an index in the colors of a `WAD::Playpal::Palette`\n\n```\nmy_wad = WAD.read(\"Path/To/Wad\") # => Reads in the wad\n\nmy_graphic = my_wad.graphics[\"MyGraphic\"] # => Sets *my_graphic* to be a graphic in *my_wad*\n\nmy_flat = my_wad.flats[\"MyFlat\"] # => Sets *my_flat* to be a flat in *my_wad*\n\nmy_graphic.set_pixel(2, 5, 125) # => Sets the pixel at x=2 y=5 of *my_graphic* to be 125\n\nmy_flat.set_pixel(10, 9, 245) # => Sets the pixel at x=10 y=9 of *my_flat* to be 245","summary":"<p>Getting data from a <code><a href=\"../../WAD.html\">WAD</a></code> is fairly simple.<br> Everything in a <code><a href=\"../../WAD.html\">WAD</a></code> is stored in either a hash or just as the object it is storing:</p>"},{"html_id":"wa-cr/Documentation/C_Usage/C_OnDirectories","path":"Documentation/C_Usage/C_OnDirectories.html","kind":"module","full_name":"Documentation::C_Usage::C_OnDirectories","name":"C_OnDirectories","abstract":false,"locations":[{"filename":"src/wa-cr/docs/c_usage/usage_c_on_directories.cr","line_number":85,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_c_on_directories.cr#L85"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/Documentation/C_Usage","kind":"module","full_name":"Documentation::C_Usage","name":"C_Usage"},"doc":"A `WAD::Directory` is a struct that holds information about a [Lump](https://doomwiki.org/wiki/Lump)<br>\nIt acts as a librarian who tells you the location, name, and size of a book in the library<br>\nTo dive deeper into directories and a wad's layout,\nit is recommended you read the doom wiki's entry on [Wads](https://doomwiki.org/wiki/WAD)\n\nNOTE: Directories relating to a map, e.g. things, linedefs, etc, are\nstored in the `WAD::Map` class itself\n\n```\nmy_map = my_wad.maps[\"MyMap\"]                     # => Returns the map \"MyMap\" out of *my_wad*\nmy_things_directory = my_map.things_directory     # => Returns the directory of the things lump for the map \"MyMap\"\nmy_linedefs_directory = my_map.linedefs_directory # => Returns the linedefs directory of the linedefs lump for the map \"MyMap\"\n```\n\n### Renaming directories\n\nWhen changing the name of a directory, you will also need to change the\nlump name it refers to. To do this, use `WAD#rename_lump(lump_name, new_name)`.<br>\nThe lump and directory MUST have the same name.\n\nNOTE: If two or more lumps have the same name, errors could occur\n\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\n\nmy_changed_directory = my_wad.directories[0].clone\n\nmy_changed_directory.name = \"NewName\"\n\nmy_wad.rename_lump(\n  my_wad.directories[0].name,\n  my_changed_directory.name\n)\n\nmy_wad.directories[0] = my_changed_directory\n```\n\n### Making New Directories\n\nWhen manually adding anything to a `WAD`, e.g. a graphic, sound, map, etc,\nyou need to call the `WAD#new_dir(name)` method to add a new directory\nto the `WAD`.\n\nNOTE: When adding something to a map, e.g. a thing, linedef, sidedef, etc,\nyou don't have to worry about making a new directory\n\nThe *name* input of `WAD#new_dir(name)` needs to be the EXACT SAME as\nthe name of the variable/lump it is refering to:\n\n```\nmy_new_wad = WAD.new(WAD::Type::Internal)\n\nmy_new_wad.sounds[\"MyNewSound\"] = WAD::Sound.new\n\n# This WON'T refer to the new sound\nmy_new_wad.new_dir(\"MySound\")\n\n# This WILL refer to the new sound\nmy_new_wad.new_dir(\"MyNewSound\")\n```\n\nIf you don't use `WAD#new_dir(name)`, the lump won't be written out when\nwriting the `WAD`:\n\n```\nrequire \"wa-cr/write\"\n\nmy_new_wad = WAD.new(WAD::Type::Internal)\n\nmy_new_wad.graphics[\"MyNewGraphic\"] = WAD::Graphic.new\n\n# The WAD it writes will be empty\nmy_new_wad.write(\"Path/To/MyWad.WAD\")\n\n# Creates a new directory with the same name as the graphic\nmy_new_wad.new_dir(\"MyNewGraphic\")\n\n# The WAD it writes will contain one graphic\nmy_new_wad.write(\"Path/To/MyWad.WAD\")\n```\n\nNOTE: When using `WAD#add(name, type, file)`, the directory is added automatically","summary":"<p>A <code><a href=\"../../WAD/Directory.html\">WAD::Directory</a></code> is a struct that holds information about a <a href=\"https://doomwiki.org/wiki/Lump\">Lump</a><br> It acts as a librarian who tells you the location, name, and size of a book in the library<br> To dive deeper into directories and a wad's layout, it is recommended you read the doom wiki's entry on <a href=\"https://doomwiki.org/wiki/WAD\">Wads</a></p>"},{"html_id":"wa-cr/Documentation/C_Usage/D_ReadingLumps","path":"Documentation/C_Usage/D_ReadingLumps.html","kind":"module","full_name":"Documentation::C_Usage::D_ReadingLumps","name":"D_ReadingLumps","abstract":false,"locations":[{"filename":"src/wa-cr/docs/c_usage/usage_d_reading_lumps.cr","line_number":34,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_d_reading_lumps.cr#L34"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/Documentation/C_Usage","kind":"module","full_name":"Documentation::C_Usage","name":"C_Usage"},"doc":"A [Wad](https://doomwiki.org/wiki/WAD) is a file that contains [Lumps](https://doomwiki.org/wiki/Lump).<br>\nA [Lump](https://doomwiki.org/wiki/Lump) is a chunk of data.\nIt can be a [Graphic](https://doomwiki.org/wiki/Graphics),\na [Sound](https://doomwiki.org/wiki/Sound),\n[Map data](https://doomwiki.org/wiki/WAD#:~:text=location%20is%20crucial.-,Map%20data%20lumps,-%5Bedit%5D),\netc.<br>\n\nWhile you can read [Wads](https://doomwiki.org/wiki/WAD)\nin, you can also directly read [Lumps](https://doomwiki.org/wiki/Lump) in:\n\nNOTE: \"LMP or lmp is the file extension for lump files\" - [Wiki](https://doomwiki.org/wiki/LMP)\n\n```\nmy_graphic_lump = WAD::Graphic.parse(\"Path/To/MyGraphic.lmp\") # => Returns the parsed graphic\nmy_sound_lump = WAD::Sound.parse(\"Path/To/MySound.lmp\")       # => Returns the parsed sound\n```\n\nYou can also read lumps directly into a `WAD` with `WAD#add(name, type, file)`:\n\nNOTE: Types you can add are (\"PcSound\", \"Sound\", \"Music\", \"TextureX\", \"Graphic\", \"Flat\", \"Demo\")\n\n```\nmy_new_wad = WAD.new(WAD::Type::Internal) # => Creates a new WAD with type internal\n\n# Adds a graphic to *my_new_wad* with the name \"MyGraphic\"\nmy_new_wad.add(\"MyGraphic\", \"Graphic\", \"Path/To/MyGraphic.lmp\"))\n\n# Adds a sound to *my_new_wad* with the name \"MySound\"\nmy_new_wad.add(\"MySound\", \"Sound\", \"Path/To/MySound.lmp\")\n```\n","summary":"<p>A <a href=\"https://doomwiki.org/wiki/WAD\">Wad</a> is a file that contains <a href=\"https://doomwiki.org/wiki/Lump\">Lumps</a>.<br> A <a href=\"https://doomwiki.org/wiki/Lump\">Lump</a> is a chunk of data.</p>"},{"html_id":"wa-cr/Documentation/C_Usage/E_ConvertingFileTypes","path":"Documentation/C_Usage/E_ConvertingFileTypes.html","kind":"module","full_name":"Documentation::C_Usage::E_ConvertingFileTypes","name":"E_ConvertingFileTypes","abstract":false,"locations":[{"filename":"src/wa-cr/docs/c_usage/usage_e_converting_file_types.cr","line_number":166,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_e_converting_file_types.cr#L166"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/Documentation/C_Usage","kind":"module","full_name":"Documentation::C_Usage","name":"C_Usage"},"doc":"### `WAD::Sound` to .wav\n\nTo convert a `WAD::Sound` to a [WAV](https://en.wikipedia.org/wiki/WAV),\nuse `WAD::Sound#to_wav(file : String | Path | IO)`:\n\n```\nmy_sound.to_wav(\"Path/To/MySound.wav\")\n```\n\n### .wav to `WAD::Sound`\n\nTo convert a [WAV](https://en.wikipedia.org/wiki/WAV) to a `WAD::Sound`,\nuse `WAD::Sound.from_wav(file : String | Path | IO)`:\n\n```\nmy_wav_sound = WAD::Sound.from_wav(\"Path/To/Sound.wav\")\n```\n\n## The following convertion methods use `RaylibAdditions`\n\n### `WAD` texture to .png\n\nTo convert a `WAD` texture to a [PNG](https://en.wikipedia.org/wiki/PNG),\nyou'll need to require `wa-cr/raylib` and use the `RaylibAdditions`\nmethod `RaylibAdditions::WAD#export_texture(texture_name, filename, palette)`:\n\n```\nrequire \"wa-cr/raylib\"\n\nmy_wad = WAD.read(\"Path/To/Wad\")\npalette = my_wad.playpal.palettes[0]\n\nmy_wad.export_texture(\"MyTexture\", \"Path/To/MyTexture.png\", palette)\n```\n\n### `WAD::Graphic` to .png\n\nTo convert a `WAD::Graphic` to a [PNG](https://en.wikipedia.org/wiki/PNG),\nyou'll need to require `wa-cr/raylib` and use the `RaylibAdditions`\nmethod `RaylibAdditions::Graphic#to_png(filename, palette)`:\n\n```\nrequire \"wa-cr/raylib\"\n\nmy_wad = WAD.read(\"Path/To/Wad\")\npalette = my_wad.playpal.palettes[0]\n\nmy_graphic = my_wad.graphics[\"MyGraphic\"]\n\nmy_graphic.to_png(\"Path/To/MyGraphic.png\", palette)\n```\n\n### .png to `WAD::Graphic`\n\nTo convert a [PNG](https://en.wikipedia.org/wiki/PNG)\nto a `WAD::Graphic`, you'll need to require `wa-cr/raylib`\nand use the `RaylibAdditions` method `RaylibAdditions::GraphicClassMethods.from_png(filename, palette, offset)`:\n\n```\nrequire \"wa-cr/raylib\"\n\nmy_wad = WAD.read(\"Path/To/Wad\")\n\npalette = my_wad.playpal.palettes[0]\n\nmy_graphic = WAD::Graphic.from_png(\"Path/To/MyGraphic.png\", palette)\n\n# You can set the offset/origin of the image as well.\n# For most sprites, the origin will be the bottom center.\n# The default offset is `WAD::Graphic::Offsets::TopLeft`\nmy_sprite = WAD::Graphic.from_png(\"Path/To/MySprite.png\", palette, WAD::Graphic::Offsets::BottomCenter)\n\nmy_wad.graphics[\"MyGraphic\"] = my_graphic\nmy_wad.new_dir(\"MyGraphic\")\n\nmy_wad.sprites[\"MySprite\"] = my_sprite\nmy_wad.new_dir(\"MySprite\")\n```\n\n### `Raylib::Image` to `WAD::Graphic`\n\nTo convert a `Raylib::Image` to a `WAD::Graphic`, you'll need to require `wa-cr/raylib`\nand use the `RaylibAdditions` method `RaylibAdditions::GraphicClassMethods.from_image(image, palette, offset)`:\n\n```\nrequire \"wa-cr/raylib\"\n\nmy_wad = WAD.read(\"Path/To/Wad\")\n\npalette = my_wad.playpal.palettes[0]\n\nmy_image = Raylib.gen_image_color(180, 20, Raylib::WHITE)\n\nmy_graphic = WAD::Graphic.from_image(my_image, palette)\n\n# You can set the offset/origin of the image as well.\n# For most sprites, the origin will be the bottom center.\n# The default offset is `WAD::Graphic::Offsets::TopLeft`\nmy_sprite = WAD::Graphic.from_image(my_image, palette, WAD::Graphic::Offsets::BottomCenter)\n\nmy_wad.graphics[\"MyGraphic\"] = my_graphic\nmy_wad.new_dir(\"MyGraphic\")\n\nmy_wad.sprites[\"MySprite\"] = my_sprite\nmy_wad.new_dir(\"MySprite\")\n```\n\n### `WAD::Flat` to .png\n\nTo convert a `WAD::Flat` to a [PNG](https://en.wikipedia.org/wiki/PNG),\nyou'll need to require `wa-cr/raylib` and use the `RaylibAdditions`\nmethod `RaylibAdditions::Flat#to_png(filename, palette)`:\n\n```\nrequire \"wa-cr/raylib\"\n\nmy_wad = WAD.read(\"Path/To/Wad\")\npalette = my_wad.playpal.palettes[0]\n\nmy_flat = my_wad.flats[\"MyFlat\"]\n\nmy_flat.to_png(\"Path/To/MyFlat.png\", palette)\n```\n\n### .png to `WAD::Flat`\n\nTo convert an opaque 64x64 [PNG](https://en.wikipedia.org/wiki/PNG)\nto a `WAD::Flat`, you'll need to require `wa-cr/raylib`\nand use the `RaylibAdditions` mthod `RaylibAdditions::FlatClassMethods.from_png(filename, palette)`:\n\n```\nrequire \"wa-cr/raylib\"\n\nmy_wad = WAD.read(\"Path/To/Wad\")\n\npalette = my_wad.playpal.palettes[0]\n\nmy_flat = WAD::Flat.from_png(\"Path/To/MyFlat.png\", palette)\n\nmy_wad.flats[\"MyFlat\"] = my_flat\nmy_wad.new_dir(\"MyFlat\")\n```\n\n### `Raylib::Image` to `WAD::Flat`\n\nTo convert an opaque 64x64 `Raylib::Image` to a\n`WAD::Flat`, you'll need to require `wa-cr/raylib`\nand use the `RaylibAdditions` mthod `RaylibAdditions::FlatClassMethods.from_image(image, palette)`:\n\n```\nrequire \"wa-cr/raylib\"\n\nmy_wad = WAD.read(\"Path/To/Wad\")\n\npalette = my_wad.playpal.palettes[0]\n\nmy_image = Raylib.gen_image_color(100, 40, Raylib::BLUE)\n\nmy_flat = WAD::Flat.from_image(my_image, palette)\n\nmy_wad.flats[\"MyFlat\"] = my_flat\nmy_wad.new_dir(\"MyFlat\")\n```","summary":"<h3><a id=\"wadsound-to-.wav\" class=\"anchor\" href=\"#wadsound-to-.wav\">  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a><code><a href=\"../../WAD/Sound.html\">WAD::Sound</a></code> to .wav</h3>"},{"html_id":"wa-cr/Documentation/C_Usage/F_WritingFiles","path":"Documentation/C_Usage/F_WritingFiles.html","kind":"module","full_name":"Documentation::C_Usage::F_WritingFiles","name":"F_WritingFiles","abstract":false,"locations":[{"filename":"src/wa-cr/docs/c_usage/usage_f_writing_files.cr","line_number":81,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_f_writing_files.cr#L81"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/Documentation/C_Usage","kind":"module","full_name":"Documentation::C_Usage","name":"C_Usage"},"doc":"The wa-cr `WritingAdditions` allow easy writing of [WAD](https://doomwiki.org/wiki/WAD)\nand [Lump](https://doomwiki.org/wiki/Lump) files.<br>\nTo use the `WritingAdditions`, just require `wa-cr/write`:\n\n```\nrequire \"wa-cr/write\"\n```\n\nWith the `WritingAdditions` required, you can now write files\nby using `.write(file : String | Path | IO)`:\n\nNOTE: Writing a `WAD` creates new directories specific to that `WAD`,\nmeaning that while the `WAD::Directory#size` and the `WAD::Directory#file_pos`\nare assigned automatically, you still have to make sure you [Make a New Directory](https://D-Shwagginz.github.io/wa-cr/Documentation/C_Usage/C_OnDirectories.html#making-new-directories)\nwhen creating something new in the wad, or else that new something won't get written out.\n\n```\nrequire \"wa-cr/write\"\n\nmy_string_wad.write(\"Path/To/MyWad.WAD\")     # => The size of the written file in bytes\nmy_path_wad.write(Path[\"Path/To/MyWad.WAD\"]) # => The size of the written file in bytes\n\nFile.open(\"Path/To/MyWad.WAD\", \"w+\") do |file|\n  my_io_wad.write(file) # => The size of the written file in bytes\nend\n```\n\n### Note on WAD Lump Names\n\nWhen writing a `WAD`, a lump's name can be any length and contain any characters when read into or created in a `WAD`.<br>\nHowever, when writing out a `WAD`, all lump names will have all instances\nof any ms-dos [Incompatible Characters](https://en.wikipedia.org/wiki/8.3_filename#Directory_table:~:text=This%20excludes%20the%20following%20ASCII%20characters%3A)\nreplaced with \"~\" and the length of the name will be truncated to be no longer than 8 characters:\n\n```\nrequire \"wa-cr/write\"\n\nmy_new_wad = WAD.new(WAD::Type::Internal)\n\nmy_new_wad.add(\"My+New.Sound\", \"Sound\", \"Path/To/MySound.lmp\")\nmy_new_wad.write(\"Path/To/MyWad.WAD\")\n\nmy_read_wad = WAD.read(\"Path/To/MyWad.WAD\")\n\nmy_read_wad.sounds.keys # => [\"My~New~S\"]\n```\n\n### Writing lumps\n\n`WAD` and all of its sub-classes have a `.write` method:\n\n```\nrequire \"wa-cr/write\"\n\nmy_sound.write(\"Path/To/MySound.lmp\")\nmy_graphic.write(\"Path/To/MyGraphic.lmp\")\n```\n\nNote that in order to write `WAD::Map` data, because the data is stored in arrays,\nyou use a class method and input the file and the array to write:\n\n```\nrequire \"wa-cr/write\"\n\nmy_things = [WAD::Map.thing.new, WAD::Map.thing.new]     # => Creates an array of two map things\nWAD::Map::Thing.write(\"Path/To/MyThings.lmp\", my_things) # => Returns the directory of the written file\n\nmy_linedefs = [WAD::Map.linedef.new, WAD::Map.linedef.new]     # => Creates an array of two map linedefs\nWAD::Map::Linedef.write(\"Path/To/MyLinedefs.lmp\", my_linedefs) # => Returns the directory of the written file\n```\n\nWhen writing any map data, the `.write` method will always return the directory of the written file,\nnot the size of it. This is because the name of the data will always be the same,\n\"THINGS\" for a things lump, \"LINEDEFS\" for a linedefs lump, etc.\n\nTo get the size of the directory, refer to `WAD::Directory`'s `WAD::Directory#size` variable\nNOTE: The `WAD::Directory#file_pos` of the written map data's\ndirectory will always equal 0 when it is written to a .lmp file","summary":"<p>The wa-cr <code><a href=\"../../WritingAdditions.html\">WritingAdditions</a></code> allow easy writing of <a href=\"https://doomwiki.org/wiki/WAD\">WAD</a> and <a href=\"https://doomwiki.org/wiki/Lump\">Lump</a> files.<br> To use the <code><a href=\"../../WritingAdditions.html\">WritingAdditions</a></code>, just require <code>wa-cr/write</code>:</p>"},{"html_id":"wa-cr/Documentation/C_Usage/G_UsingWithRaylib","path":"Documentation/C_Usage/G_UsingWithRaylib.html","kind":"module","full_name":"Documentation::C_Usage::G_UsingWithRaylib","name":"G_UsingWithRaylib","abstract":false,"locations":[{"filename":"src/wa-cr/docs/c_usage/usage_g_using_with_raylib.cr","line_number":134,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_g_using_with_raylib.cr#L134"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/Documentation/C_Usage","kind":"module","full_name":"Documentation::C_Usage","name":"C_Usage"},"doc":"wa-cr's `RaylibAdditions` allow converting `WAD::Graphic`s and `WAD::Flat`s\nto [Raylib Images](https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L251)\nor [Raylib Colors](https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L235C6-L235C6)\nwhich can then be drawn to the screen.<br>\nFor more information on Raylib, visit it's [Github](https://github.com/raysan5/raylib/releases)<br>\nAnd visit the raylib-cr [Github](https://github.com/sol-vin/raylib-cr)\nfor information on the Raylib Crystal C-Bindings\n\nNOTE: Some file conversion methods that `RaylibAdditions` contains are not\nmentioned here, but in [E_ConvertingFileTypes](https://D-Shwagginz.github.io/wa-cr/Documentation/C_Usage/E_ConvertingFileTypes.html#the-following-convertion-methods-use-raylib-additions)\n\nTo use the `RaylibAdditions`, just require `wa-cr/raylib`:\n\n```\nrequire \"wa-cr/raylib\"\n```\n\nTo convert a `WAD::Graphic` or a `WAD::Flat` to a `Raylib::Image`\nyou call `.to_image(palette)` on the graphic or flat.\nYou'll need to select the `WAD::Playpal::Palette` you want to use\nfor the image:\n\nNOTE: Each pixel of a graphic or a flat points to an array element in a playpal palette.\nFor more information on Doom's picture format and the playpal, visit the wiki entries on the\n[Picture Format](https://doomwiki.org/wiki/Picture_format) and the\n[Playpal](https://doomwiki.org/wiki/PLAYPAL)\n\n```\nrequire \"wa-cr/raylib\"\n\nmy_wad = WAD.read(\"Path/To/MyWad.WAD\")\n\nmy_graphic = WAD::Graphic.parse(\"Path/To/MyGraphic.lmp\")\n\nmy_flat = WAD::Flat.parse(\"Path/To/MyFlat.lmp\")\n\n# The default Doom Playpal has a total of 14 palettes (0-13)\npalette = my_wad.playpal.palettes[0]\n\nmy_graphic_image = my_graphic.to_image(palette) # => Returns a Raylib::Image\n\nmy_flat_image = my_flat.to_image(palette) # => Returns a Raylib::Image\n```\n\nYou can also get textures out of the texture maps by using `RaylibAdditions::WAD#get_texture(name, palette):\n\n```\nrequire \"wa-cr/raylib\"\n\nmy_wad = WAD.read(\"Path/To/MyWad.WAD\")\n\npalette = my\n\nmy_texture_image = my_wad.get_texture(\"STARTAN3\", palette) # => Returns a Raylib::Image\n```\n\nTo get some pixel data, call `.get_pixel(x, y, palette):\n\n```\nrequire \"wa-cr/raylib\"\n\nmy_graphic_pixel = my_graphic.get_pixel(3, 8, palette) # => Returns a Raylib::Color\n\nmy_flat_pixel = my_flat.get_pixel(62, 20, palette) # => Returns a Raylib::Color\n```\n\nWith this image and pixel data, you can use [Raylib](https://github.com/raysan5/raylib/releases)\nand [raylib-cr](https://github.com/sol-vin/raylib-cr) to draw it to the screen.<br>\nHere is a simple example of how to draw `my_texture_image`, `my_graphic_image`, and `my_flat_image`:\n\nNOTE: When requiring `wa-cr/raylib`, you don't need to also require `raylib-cr` since\n`wa-cr/raylib` requires `raylib-cr` anyways\n\n```\nrequire \"wa-cr/raylib\"\n\nRaylib.init_window(800, 450, \"Image Viewer\")\nRaylib.set_target_fps(60)\n\nmy_wad = WAD.read(\"Path/To/MyWad.WAD\")\n\nmy_graphic = WAD::Graphic.parse(\"Path/To/MyGraphic.lmp\")\nmy_flat = WAD::Flat.parse(\"Path/To/MyFlat.lmp\")\n\npalette = my_wad.playpal.palettes[0]\n\nmy_texture_image = my_wad.get_texture(\"STARTAN3\", palette)\nmy_graphic_image = my_graphic.to_image(palette)\nmy_flat_image = my_flat.to_image(palette)\n\n# You can't draw images to the screen,\n# so you need to load them into a textures.\n\n# Note that Raylib::Texture2D's can't be set\n# as variables until the window has been initialized.\nmy_texture_texture = Raylib.load_texture_from_image(my_texture_image)\n\nmy_graphic_texture = Raylib.load_texture_from_image(my_graphic_image)\n\nmy_flat_texture = Raylib.load_texture_from_image(my_flat_image)\n\nuntil Raylib.close_window?\n  Raylib.begin_drawing\n  Raylib.clear_background(Raylib::RAYWHITE)\n\n  Raylib.draw_texture(my_texture_texture, 0, 0, Raylib::WHITE)\n\n  # Sets the texture's x to be the screen's width minus the\n  # width of the texture to have it be in the top right.\n  # Textures are drawn from the top left.\n  Raylib.draw_texture(\n    my_graphic_texture,\n    (Raylib.get_screen_width - my_graphic_texture.width),\n    0,\n    Raylib::WHITE\n  )\n\n  # Sets the texture's y to be the screen's height minus the\n  # height of the texture to have it be in the bottom left.\n  Raylib.draw_texture(\n    my_flat_texture,\n    0,\n    (Raylib.get_screen_height - my_flat_texture.height),\n    Raylib::WHITE\n  )\n\n  Raylib.end_drawing\nend\n\nRaylib.close_window\n```","summary":"<p>wa-cr's <code><a href=\"../../RaylibAdditions.html\">RaylibAdditions</a></code> allow converting <code><a href=\"../../WAD/Graphic.html\">WAD::Graphic</a></code>s and <code><a href=\"../../WAD/Flat.html\">WAD::Flat</a></code>s to <a href=\"https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L251\">Raylib Images</a> or <a href=\"https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L235C6-L235C6\">Raylib Colors</a> which can then be drawn to the screen.<br> For more information on Raylib, visit it's <a href=\"https://github.com/raysan5/raylib/releases\">Github</a><br> And visit the raylib-cr <a href=\"https://github.com/sol-vin/raylib-cr\">Github</a> for information on the Raylib Crystal C-Bindings</p>"},{"html_id":"wa-cr/Documentation/C_Usage/H_Apps","path":"Documentation/C_Usage/H_Apps.html","kind":"module","full_name":"Documentation::C_Usage::H_Apps","name":"H_Apps","abstract":false,"locations":[{"filename":"src/wa-cr/docs/c_usage/usage_h_apps.cr","line_number":42,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/c_usage/usage_h_apps.cr#L42"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/Documentation/C_Usage","kind":"module","full_name":"Documentation::C_Usage","name":"C_Usage"},"doc":"wa-cr provides some apps to help with using and viewing `WAD` data.\n\nTo use any of the following apps, you must require \"wa-cr/apps\"\n\n```\nrequire \"wa-cr/apps\"\n```\n\nHere is a quick reference list of all wa-cr apps:\n\n  - [MapViewer](https://D-Shwagginz.github.io/wa-cr/Documentation/C_Usage/H_Apps.html#map-viewer)\n\n### Map Viewer\n\nTo use run the Map Viewer, use `Apps::MapViewer.run(wad, map)`:\n\nNOTE: *map* is not required. By default it will use the first map in the `WAD`\n\n```\nrequire \"wa-cr/apps\"\n\nmy_wad = WAD.read(\"Path/To/Wad\")\n\nApps::MapViewer.run(my_wad, \"MyMap\")\n```\n\nThe Map Viewer also provides a cli function `Apps::MapViewer.run_cli`:\n\n```\nrequire \"wa-cr/apps\"\n\nApps::MapViewer.run_cli\n```\n\nTo run this program, the command line would look something like this:\n\n```\nshards run -- -w Path/To/Wad -m MapName\n```","summary":"<p>wa-cr provides some apps to help with using and viewing <code><a href=\"../../WAD.html\">WAD</a></code> data.</p>"}]},{"html_id":"wa-cr/Documentation/D_Cheatsheet","path":"Documentation/D_Cheatsheet.html","kind":"module","full_name":"Documentation::D_Cheatsheet","name":"D_Cheatsheet","abstract":false,"locations":[{"filename":"src/wa-cr/docs/d_cheatsheet/cheatsheet_a_reading.cr","line_number":2,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/d_cheatsheet/cheatsheet_a_reading.cr#L2"},{"filename":"src/wa-cr/docs/d_cheatsheet/cheatsheet_b_writingadditions.cr","line_number":2,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/d_cheatsheet/cheatsheet_b_writingadditions.cr#L2"},{"filename":"src/wa-cr/docs/d_cheatsheet/cheatsheet_c_raylibadditions.cr","line_number":2,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/d_cheatsheet/cheatsheet_c_raylibadditions.cr#L2"},{"filename":"src/wa-cr/docs/d_cheatsheet/cheatsheet_d_extras.cr","line_number":2,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/d_cheatsheet/cheatsheet_d_extras.cr#L2"},{"filename":"src/wa-cr/docs/d_cheatsheet/cheatsheet_e_apps.cr","line_number":2,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/d_cheatsheet/cheatsheet_e_apps.cr#L2"},{"filename":"src/wa-cr/docs/docs_d_cheatsheet.cr","line_number":3,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/docs_d_cheatsheet.cr#L3"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/Documentation","kind":"module","full_name":"Documentation","name":"Documentation"},"doc":"### A cheatsheet that has links to useful methods and variables","summary":"<h3><a id=\"a-cheatsheet-that-has-links-to-useful-methods-and-variables\" class=\"anchor\" href=\"#a-cheatsheet-that-has-links-to-useful-methods-and-variables\">  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a>A cheatsheet that has links to useful methods and variables</h3>","types":[{"html_id":"wa-cr/Documentation/D_Cheatsheet/A_Reading","path":"Documentation/D_Cheatsheet/A_Reading.html","kind":"module","full_name":"Documentation::D_Cheatsheet::A_Reading","name":"A_Reading","abstract":false,"locations":[{"filename":"src/wa-cr/docs/d_cheatsheet/cheatsheet_a_reading.cr","line_number":119,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/d_cheatsheet/cheatsheet_a_reading.cr#L119"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/Documentation/D_Cheatsheet","kind":"module","full_name":"Documentation::D_Cheatsheet","name":"D_Cheatsheet"},"doc":"- Reading\n  - `WAD` - Stores all of the information relating to a WAD\n    - `WAD.new(type)` - Creates a new `WAD` with `WAD.type`\n    - `WAD.read(wad_file)` - Reads in file in WAD format\n    - `WAD.read?(wad_file)` - Reads in file in WAD format but returns Nil if parsing WAD throws errors\n    - `WAD.read!(wad_file)` - Reads in file in WAD format but raises any lump parsing errors\n    - `WAD#add(name, type, filename)` - Reads in *filename* as format *type*<br>\n      and puts it into the `WAD` with *name*\n    - `WAD#what_is?(name) - Returns a string for what *name* is in the `WAD`\n    - `WAD#rename_lump(lump_name, new_name) - Renames a lump in the `WAD` and returns true if succeeded\n    - `WAD#type` - The type of a `WAD`\n    - `WAD#maps` - The maps in the `WAD`\n    - `WAD#pcsounds` - The pc sounds in the `WAD`\n    - `WAD#sounds` - The sounds in the `WAD`\n    - `WAD#music` - The music in the `WAD`\n    - `WAD#genmidi` - The genmidi of the `WAD`\n    - `WAD#dmxgus` - The dmxgus of the `WAD`\n    - `WAD#playpal` - The playpal of the `WAD`\n    - `WAD#colormap` - The colormap of the `WAD`\n    - `WAD#endoom` - The EnDoom of the `WAD`\n    - `WAD#texmaps` - The texture maps of the `WAD`\n    - `WAD#pnames` - The Pnames of the `WAD`\n    - `WAD#graphics` - The graphics in the `WAD`\n    - `WAD#sprites` - The sprites in the `WAD`\n    - `WAD#flats` - The flats in the `WAD`\n    - `WAD#demos` - The demos in the `WAD`\n    - `WAD#directories` - The directories in the `WAD`\n\n  - `WAD::Directory` - Stores the information about a lump\n    - `WAD::Directory.read(io, file_offset)` - Reads the io in directory format\n\n  - `WAD::Map` - Stores all of the information relating to a map\n    - `WAD::Map.is_map?(name)` - Check if *name* is of map name format\n    - `WAD::Map#things` - All things in the map\n    - `WAD::Map#linedefs` - All linedefs in the map\n    - `WAD::Map#sidedefs` - All sidedefs in the map\n    - `WAD::Map#vertexes` - All vertexes in the map\n    - `WAD::Map#segs` - All segs in the map\n    - `WAD::Map#ssectors` - All ssectors in the map\n    - `WAD::Map#nodes` - All nodes in the map\n    - `WAD::Map#sectors` - All sectors in the map\n    - `WAD::Map#reject` - The reject table of the map\n    - `WAD::Map#blockmap` - The blockmap of the map\n      - `WAD::Map::Thing` - A thing\n      - `WAD::Map::Linedef` - A linedef\n      - `WAD::Map::Sidedef` - A sidedef\n      - `WAD::Map::Vertex` - A vertex\n      - `WAD::Map::Seg` - A seg\n      - `WAD::Map::Ssector` - A sub sector\n      - `WAD::Map::Node` - A node\n      - `WAD::Map::Sector` - A sector\n      - `WAD::Map::Reject` - The reject table\n      - `WAD::Map::Blockmap` - The blockmap\n\n  - `WAD::PcSound` - Stores the information of a pc sound\n    - `WAD::PcSound.parse(io)` - Reads in the io in pcsound format\n    - `WAD::PcSound.is_pcsound?(name)` - Checks if *name* is of pcsound name format\n\n  - `WAD::Sound` - Stores the information of a sound\n    - `WAD::Sound.parse(io)` - Reads in the io in sound format\n    - `WAD::Sound.is_sound?(name)` - Checks if *name* is of sound name format\n    - `WAD::Sound.from_wav(io) ` Converts a .wav to a `WAD::Sound`\n    - `WAD::Sound#to_wav(io)` - Outputs the sound to *io* in .wav format\n\n  - `WAD::Music` - Stores the information of a music\n    - `WAD::Music.parse(io)` - Reads in the io in music format\n    - `WAD::Musicis_music?(name)` Checks if *name* is of music name format\n\n  - `WAD::Genmidi` - Stores the information of the genmidi\n    - `WAD::Genmidi.parse(io)` - Reads in the io in genmidi format\n    - `WAD::Genmidi.is_genmidi?(name)` Checks if *name* is of genmidi name format\n\n  - `WAD::Dmxgus` - Stores the information of the dmxgus\n    - `WAD::Dmxgus.parse(io)` - Reads in the io in dmxgus format\n    - `WAD::Dmxgus.is_dmxgus?(name)` - Checks if *name* is of dmxgus name format\n\n  - `WAD::Playpal` - Stores the information of the playpal\n    - `WAD::Playpal.parse(io)` -  Reads in the io in playpal format\n    - `WAD::Playpal.is_playpal?(name)` - Checks if *name* is of playpal name format\n    - `WAD::Playpal#palettes` - The color palettes in the playpal\n\n  - `WAD::Colormap` - Stores the information of the colormap\n    - `WAD::Colormap.parse(io)` - Reads in the io in colormap format\n    - `WAD::Colormap.is_colormap?(name)` - Checks if *name* is of colormap name format\n\n  - `WAD::EnDoom` - Stores the information of the endoom\n    - `WAD::EnDoom.parse(io)` - Reads in the io in endoom format\n    - `WAD::EnDoom.is_endoom?(name)` - Checks if *name* is of endoom name format\n\n  - `WAD::TextureX` - Stores the information of a texture map\n    - `WAD::TextureX.parse(io)` - Reads in the io in texture map format\n    - `WAD::TextureX.is_texturex?(name)` - Checks if *name* is of texture map name format\n\n  - `WAD::Pnames` - Stores the information of the pnames\n    - `WAD::Pnames.parse(io)` - Reads in the io in pnames format\n    - `WAD::Pnames.is_pnames?(name)` - Checks if *name* is of pnames name format\n\n  - `WAD::Graphic` - Stores the information of a graphic\n    - `WAD::Graphic.parse(io, file_offset, file_size)` - Reads in the io in graphic format.<br>\n      Returns `nil` if *io* is not a valid graphic.\n    - `WAD::Graphic.is_sprite_mark_start?(name)` - Checks if *name* is a sprite start marker\n    - `WAD::Graphic.is_sprite_mark_end?(name)` - Checks if *name* is a sprite end marker\n    - `WAD::Graphic#set_pixel(x, y, value)` - Sets the pixel at (x, y) to be *value*\n    - `WAD::Graphic#[](x, y)` - Returns the  *x*, *y* pixel index in the palette for the graphic\n\n  - `WAD::Flat` - Stores the information of a flat\n    - `WAD::Flat.parse(io)` - Reads in the io in flat format.<br>\n    - `WAD::Flat.is_flat_mark_start?(name)` - Checks if *name* is a flat start marker\n    - `WAD::Flat.is_flat_mark_end?(name)` - Checks if *name* is a flat end marker\n    - `WAD::Flat#set_pixel(x, y, value)` - Sets the pixel at (x, y) to be *value*\n    - `WAD::Flat#[](x, y)` - Returns the  *x*, *y* pixel index in the palette for the graphic\n\n  - `WAD::Demo` - Stores the information of a demo\n    - `WAD::Demo.parse(io)` - Reads in the io in demo format\n    - `WAD::Demo.is_demo?(io)` - Checks if the io is of demo format\n","summary":"<ul>\n<li>Reading   - <code><a href=\"../../WAD.html\">WAD</a></code> - Stores all of the information relating to a WAD     - <code><a href=\"../../WAD.html#new%28type%3AType%3DType%3A%3ABroken%29-class-method\">WAD.new(type)</a></code> - Creates a new <code><a href=\"../../WAD.html\">WAD</a></code> with <code><a href=\"../../WAD.html#type%3AType-instance-method\">WAD.type</a></code>     - <code><a href=\"../../WAD.html#read%28filename%3APath%7CString%29%3AWAD-class-method\">WAD.read(wad_file)</a></code> - Reads in file in WAD format     - <code><a href=\"../../WAD.html#read%3F%28file%3AIO%29%3AWAD%7CNil-class-method\">WAD.read?(wad_file)</a></code> - Reads in file in WAD format but returns Nil if parsing WAD throws errors     - <code><a href=\"../../WAD.html#read%21%28file%3AIO%29%3AWAD-class-method\">WAD.read!(wad_file)</a></code> - Reads in file in WAD format but raises any lump parsing errors     - <code><a href=\"../../WAD.html#add%28name%3AString%2Ctype%3AAddTypes%2Cfile%3APath%7CString%29-instance-method\">WAD#add(name, type, filename)</a></code> - Reads in <em>filename</em> as format <em>type</em><br>       and puts it into the <code><a href=\"../../WAD.html\">WAD</a></code> with <em>name</em>     - <code><a href=\"../../WAD.html#what_is%3F%28name%3AString%29%3AString-instance-method\">WAD#what_is?(name)</a> - Returns a string for what *name* is in the </code>WAD<code>    -</code>WAD#rename_lump(lump_name, new_name) - Renames a lump in the <code><a href=\"../../WAD.html\">WAD</a></code> and returns true if succeeded     - <code><a href=\"../../WAD.html#type%3AType-instance-method\">WAD#type</a></code> - The type of a <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../WAD.html#maps%3AHash%28String%2CMap%29-instance-method\">WAD#maps</a></code> - The maps in the <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../WAD.html#pcsounds%3AHash%28String%2CPcSound%29-instance-method\">WAD#pcsounds</a></code> - The pc sounds in the <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../WAD.html#sounds%3AHash%28String%2CSound%29-instance-method\">WAD#sounds</a></code> - The sounds in the <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../WAD.html#music%3AHash%28String%2CMusic%29-instance-method\">WAD#music</a></code> - The music in the <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../WAD.html#genmidi%3AGenmidi-instance-method\">WAD#genmidi</a></code> - The genmidi of the <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../WAD.html#dmxgus%3ADmxgus-instance-method\">WAD#dmxgus</a></code> - The dmxgus of the <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../WAD.html#playpal%3APlaypal-instance-method\">WAD#playpal</a></code> - The playpal of the <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../WAD.html#colormap%3AColormap-instance-method\">WAD#colormap</a></code> - The colormap of the <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../WAD.html#endoom%3AEnDoom-instance-method\">WAD#endoom</a></code> - The EnDoom of the <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../WAD.html#texmaps%3AHash%28String%2CTextureX%29-instance-method\">WAD#texmaps</a></code> - The texture maps of the <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../WAD.html#pnames%3APnames-instance-method\">WAD#pnames</a></code> - The Pnames of the <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../WAD.html#graphics%3AHash%28String%2CGraphic%29-instance-method\">WAD#graphics</a></code> - The graphics in the <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../WAD.html#sprites%3AHash%28String%2CGraphic%29-instance-method\">WAD#sprites</a></code> - The sprites in the <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../WAD.html#flats%3AHash%28String%2CFlat%29-instance-method\">WAD#flats</a></code> - The flats in the <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../WAD.html#demos%3AHash%28String%2CDemo%29-instance-method\">WAD#demos</a></code> - The demos in the <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../WAD.html#directories%3AArray%28Directory%29-instance-method\">WAD#directories</a></code> - The directories in the <code><a href=\"../../WAD.html\">WAD</a></code></li>\n</ul>"},{"html_id":"wa-cr/Documentation/D_Cheatsheet/B_WritingAdditions","path":"Documentation/D_Cheatsheet/B_WritingAdditions.html","kind":"module","full_name":"Documentation::D_Cheatsheet::B_WritingAdditions","name":"B_WritingAdditions","abstract":false,"locations":[{"filename":"src/wa-cr/docs/d_cheatsheet/cheatsheet_b_writingadditions.cr","line_number":30,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/d_cheatsheet/cheatsheet_b_writingadditions.cr#L30"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/Documentation/D_Cheatsheet","kind":"module","full_name":"Documentation::D_Cheatsheet","name":"D_Cheatsheet"},"doc":"- Writing: `WritingAdditions` - The module housing all of the write methods\n  - `WritingAdditions.file_write(object, file)` - Writes the object to a file. Condenses file writing down to one line\n  - `WritingAdditions::WAD#write(io)` - Writes a `WAD` to *io* and returns the size of data written\n  - `WritingAdditions::Map#write(io)` - Writes a `WAD::Map` to *io* and returns all the directories for the data written\n    - `WritingAdditions::Map::Things.write(io, things)` - Writes an array of *things* to *io* and returns the directory for the data written\n    - `WritingAdditions::Map::Linedefs.write(io, linedefs)` - Writes an array of *linedefs* to *io* and returns the directory for the data written\n    - `WritingAdditions::Map::Sidedefs.write(io, sidedefs)` - Writes an array of *sidedefs* to *io* and returns the directory for the data written\n    - `WritingAdditions::Map::Vertexes.write(io, vertexes)` - Writes an array of *vertexes* to *io* and returns the directory for the data written\n    - `WritingAdditions::Map::Segs.write(io, segs)` - Writes an array of *segs* to *io* and returns the directory for the data written\n    - `WritingAdditions::Map::Ssectors.write(io, ssectors)` - Writes an array of *ssectors* to *io* and returns the directory for the data written\n    - `WritingAdditions::Map::Nodes.write(io, nodes)` - Writes an array of *nodes* to *io* and returns the directory for the data written\n    - `WritingAdditions::Map::Sectors.write(io, sectors)` - Writes an array of *sectors* to *io* and returns the directory for the data written\n    - `WritingAdditions::Map::Reject#write(io)` - Writes a reject to *io* and returns the directory for the data written\n    - `WritingAdditions::Map::Blockmap#write(io)` - Writes a blockmap to *io* and returns the directory for the data written\n  - `WritingAdditions::PcSound#write(io)` - Writes a `WAD::PcSound` to *io* and returns the size of data written\n  - `WritingAdditions::Sound#write(io)` - Writes a `WAD::Sound` to *io* and returns the size of data written\n  - `WritingAdditions::Music#write(io)` - Writes a `WAD::Music` to *io* and returns the size of data written\n  - `WritingAdditions::Genmidi#write(io)` - Writes a `WAD::Genmidi` to *io* and returns the size of data written\n  - `WritingAdditions::Dmxgus#write(io)` - Writes a `WAD::Dmxgus` to *io* and returns the size of data written\n  - `WritingAdditions::Playpal#write(io)` - Writes a `WAD::Playpal` to *io* and returns the size of data written\n  - `WritingAdditions::Colormap#write(io)` - Writes a `WAD::Colormap` to *io* and returns the size of data written\n  - `WritingAdditions::EnDoom#write(io)` - Writes a `WAD::EnDoom` to *io* and returns the size of data written\n  - `WritingAdditions::TextureX#write(io)` - Writes a `WAD::TextureX` to *io* and returns the size of data written\n  - `WritingAdditions::Pnames#write(io)` - Writes a `WAD::Pnames` to *io* and returns the size of data written\n  - `WritingAdditions::Graphic#write(io)` - Writes a `WAD::Graphic` to *io* and returns the size of data written\n  - `WritingAdditions::Flat#write(io)` - Writes a `WAD::Flat` to *io* and returns the size of data written\n  - `WritingAdditions::Demo#write(io)` - Writes a `WAD::Demo` to *io* and returns the size of data written","summary":"<ul>\n<li>Writing: <code><a href=\"../../WritingAdditions.html\">WritingAdditions</a></code> - The module housing all of the write methods   - <code>WritingAdditions.file_write(object, file)</code> - Writes the object to a file.</li>\n</ul>"},{"html_id":"wa-cr/Documentation/D_Cheatsheet/C_RaylibAdditions","path":"Documentation/D_Cheatsheet/C_RaylibAdditions.html","kind":"module","full_name":"Documentation::D_Cheatsheet::C_RaylibAdditions","name":"C_RaylibAdditions","abstract":false,"locations":[{"filename":"src/wa-cr/docs/d_cheatsheet/cheatsheet_c_raylibadditions.cr","line_number":20,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/d_cheatsheet/cheatsheet_c_raylibadditions.cr#L20"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/Documentation/D_Cheatsheet","kind":"module","full_name":"Documentation::D_Cheatsheet","name":"D_Cheatsheet"},"doc":"- Raylib: `RaylibAdditions` - The module housing all of the raylib methods\n  - `RaylibAdditions::WAD#get_texture(name, palette)` - Gets a texture from a `WAD`'s\n    texture map and creates a `Raylib::Image` by using the palette\n  - `RaylibAdditions::WAD#export_texture(name, filename, palette)` - Exports a texture from the `WAD`'s\n    texture map as a png by using the palette\n  - `RaylibAdditions::GraphicClassMethods.from_png(filename, palette, offset)` - Imports a png as a `WAD::Graphic` given the palette and the offset\n  - `RaylibAdditions::GraphicClassMethods.from_image(image, palette, offset)` - Converts a `Raylib::Image` to a `WAD::Graphic` given the palette and the offset\n  - `RaylibAdditions::Graphic#to_image(palette)` - Converts a graphic to a `Raylib::Image` by using the palette\n  - `RaylibAdditions::Graphic#get_pixel(x, y, palette)` - Gets a *Raylib::Color* at the graphic pixel *x*, *y*\n  - `RaylibAdditions::Graphic#to_png(filename, palette)` - Exports the graphic to a png given the filename and palette\n  - `RaylibAdditions::FlatClassMethods.from_png(filename, palette)` - Imports an opaque 64x64 png as a `WAD::Flat` given the palette\n  - `RaylibAdditions::FlatClassMethods.from_image(image, palette)` - Converts an opaque 64x64 `Raylib::Image` to a `WAD::Flat` given the palette\n  - `RaylibAdditions::Flat#to_image(palette)` - Converts a flat to a `Raylib::Image` by using the palette\n  - `RaylibAdditions::Flat#get_pixel(x, y, palette)` - Gets a *Raylib::Color* at the flat pixel *x*, *y*\n  - `RaylibAdditions::Flat#to_png(filename, palette)` - Exports the flat to a png given the filename and palette\n- [Raylib](https://github.com/raysan5/raylib) - The Raylib github\n- [Raylib-cr](https://github.com/sol-vin/raylib-cr) - The Crystal C-Bindings for Raylib","summary":"<ul>\n<li>Raylib: <code><a href=\"../../RaylibAdditions.html\">RaylibAdditions</a></code> - The module housing all of the raylib methods   - <code><a href=\"../../RaylibAdditions/WAD.html#get_texture%28name%3AString%2Cpalette%3A%3A%3AWAD%3A%3APlaypal%3A%3APalette%29%3ARaylib%3A%3AImage-instance-method\">RaylibAdditions::WAD#get_texture(name, palette)</a></code> - Gets a texture from a <code><a href=\"../../WAD.html\">WAD</a></code>'s     texture map and creates a <code>Raylib::Image</code> by using the palette   - <code><a href=\"../../RaylibAdditions/WAD.html#export_texture%28texture_name%3AString%2Cfilename%3AString%7CPath%2Cpalette%3A%3A%3AWAD%3A%3APlaypal%3A%3APalette%29-instance-method\">RaylibAdditions::WAD#export_texture(name, filename, palette)</a></code> - Exports a texture from the <code><a href=\"../../WAD.html\">WAD</a></code>'s     texture map as a png by using the palette   - <code><a href=\"../../RaylibAdditions/GraphicClassMethods.html#from_png%28filename%3AString%7CPath%2Cpalette%3A%3A%3AWAD%3A%3APlaypal%3A%3APalette%2Coffset%3A%3A%3AWAD%3A%3AGraphic%3A%3AOffsets%3D%3A%3AWAD%3A%3AGraphic%3A%3AOffsets%3A%3ATopLeft%29%3A%3A%3AWAD%3A%3AGraphic-instance-method\">RaylibAdditions::GraphicClassMethods.from_png(filename, palette, offset)</a></code> - Imports a png as a <code><a href=\"../../WAD/Graphic.html\">WAD::Graphic</a></code> given the palette and the offset   - <code><a href=\"../../RaylibAdditions/GraphicClassMethods.html#from_image%28image%3ARaylib%3A%3AImage%2Cpalette%3A%3A%3AWAD%3A%3APlaypal%3A%3APalette%2Coffset%3A%3A%3AWAD%3A%3AGraphic%3A%3AOffsets%3D%3A%3AWAD%3A%3AGraphic%3A%3AOffsets%3A%3ATopLeft%29%3A%3A%3AWAD%3A%3AGraphic-instance-method\">RaylibAdditions::GraphicClassMethods.from_image(image, palette, offset)</a></code> - Converts a <code>Raylib::Image</code> to a <code><a href=\"../../WAD/Graphic.html\">WAD::Graphic</a></code> given the palette and the offset   - <code><a href=\"../../RaylibAdditions/Graphic.html#to_image%28palette%3A%3A%3AWAD%3A%3APlaypal%3A%3APalette%29%3ARaylib%3A%3AImage-instance-method\">RaylibAdditions::Graphic#to_image(palette)</a></code> - Converts a graphic to a <code>Raylib::Image</code> by using the palette   - <code><a href=\"../../RaylibAdditions/Graphic.html#get_pixel%28x%3AInt%2Cy%3AInt%2Cpalette%3A%3A%3AWAD%3A%3APlaypal%3A%3APalette%29%3ARaylib%3A%3AColor-instance-method\">RaylibAdditions::Graphic#get_pixel(x, y, palette)</a></code> - Gets a <em>Raylib::Color</em> at the graphic pixel <em>x</em>, <em>y</em>   - <code><a href=\"../../RaylibAdditions/Graphic.html#to_png%28filename%3AString%7CPath%2Cpalette%3A%3A%3AWAD%3A%3APlaypal%3A%3APalette%29-instance-method\">RaylibAdditions::Graphic#to_png(filename, palette)</a></code> - Exports the graphic to a png given the filename and palette   - <code><a href=\"../../RaylibAdditions/FlatClassMethods.html#from_png%28filename%3AString%7CPath%2Cpalette%3A%3A%3AWAD%3A%3APlaypal%3A%3APalette%29%3A%3A%3AWAD%3A%3AFlat-instance-method\">RaylibAdditions::FlatClassMethods.from_png(filename, palette)</a></code> - Imports an opaque 64x64 png as a <code><a href=\"../../WAD/Flat.html\">WAD::Flat</a></code> given the palette   - <code><a href=\"../../RaylibAdditions/FlatClassMethods.html#from_image%28image%3ARaylib%3A%3AImage%2Cpalette%3A%3A%3AWAD%3A%3APlaypal%3A%3APalette%29%3A%3A%3AWAD%3A%3AFlat-instance-method\">RaylibAdditions::FlatClassMethods.from_image(image, palette)</a></code> - Converts an opaque 64x64 <code>Raylib::Image</code> to a <code><a href=\"../../WAD/Flat.html\">WAD::Flat</a></code> given the palette   - <code><a href=\"../../RaylibAdditions/Flat.html#to_image%28palette%3A%3A%3AWAD%3A%3APlaypal%3A%3APalette%29%3ARaylib%3A%3AImage-instance-method\">RaylibAdditions::Flat#to_image(palette)</a></code> - Converts a flat to a <code>Raylib::Image</code> by using the palette   - <code><a href=\"../../RaylibAdditions/Flat.html#get_pixel%28x%3AInt%2Cy%3AInt%2Cpalette%3A%3A%3AWAD%3A%3APlaypal%3A%3APalette%29%3ARaylib%3A%3AColor-instance-method\">RaylibAdditions::Flat#get_pixel(x, y, palette)</a></code> - Gets a <em>Raylib::Color</em> at the flat pixel <em>x</em>, <em>y</em>   - <code><a href=\"../../RaylibAdditions/Flat.html#to_png%28filename%3AString%7CPath%2Cpalette%3A%3A%3AWAD%3A%3APlaypal%3A%3APalette%29-instance-method\">RaylibAdditions::Flat#to_png(filename, palette)</a></code> - Exports the flat to a png given the filename and palette - <a href=\"https://github.com/raysan5/raylib\">Raylib</a> - The Raylib github - <a href=\"https://github.com/sol-vin/raylib-cr\">Raylib-cr</a> - The Crystal C-Bindings for Raylib</li>\n</ul>"},{"html_id":"wa-cr/Documentation/D_Cheatsheet/D_Extras","path":"Documentation/D_Cheatsheet/D_Extras.html","kind":"module","full_name":"Documentation::D_Cheatsheet::D_Extras","name":"D_Extras","abstract":false,"locations":[{"filename":"src/wa-cr/docs/d_cheatsheet/cheatsheet_d_extras.cr","line_number":8,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/d_cheatsheet/cheatsheet_d_extras.cr#L8"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/Documentation/D_Cheatsheet","kind":"module","full_name":"Documentation::D_Cheatsheet","name":"D_Cheatsheet"},"doc":"- Extras\n  - `WAD.string_cut(string, len)` - Cuts a string down to a max length\n  - `WAD.slice_cut(slice, len)` - Cut a slice down to a max length\n  - `WAD.string_sub_chars(string)` - Removes all ms-dos [Incompatible Characters](https://en.wikipedia.org/wiki/8.3_filename#Directory_table:~:text=This%20excludes%20the%20following%20ASCII%20characters%3A)\n    from a string","summary":"<ul>\n<li>Extras   - <code><a href=\"../../WAD.html#string_cut%28string%3AString%2Clen%3AInt%3D8%29%3AString-class-method\">WAD.string_cut(string, len)</a></code> - Cuts a string down to a max length   - <code><a href=\"../../WAD.html#slice_cut%28slice%3ASlice%2Clen%3AInt%3D8%29%3ASlice-class-method\">WAD.slice_cut(slice, len)</a></code> - Cut a slice down to a max length   - <code><a href=\"../../WAD.html#string_sub_chars%28string%3AString%29%3AString-class-method\">WAD.string_sub_chars(string)</a></code> - Removes all ms-dos <a href=\"https://en.wikipedia.org/wiki/8.3_filename#Directory_table:~:text=This%20excludes%20the%20following%20ASCII%20characters:\">Incompatible Characters</a>     from a string</li>\n</ul>"},{"html_id":"wa-cr/Documentation/D_Cheatsheet/E_Apps","path":"Documentation/D_Cheatsheet/E_Apps.html","kind":"module","full_name":"Documentation::D_Cheatsheet::E_Apps","name":"E_Apps","abstract":false,"locations":[{"filename":"src/wa-cr/docs/d_cheatsheet/cheatsheet_e_apps.cr","line_number":10,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/docs/d_cheatsheet/cheatsheet_e_apps.cr#L10"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/Documentation/D_Cheatsheet","kind":"module","full_name":"Documentation::D_Cheatsheet","name":"D_Cheatsheet"},"doc":"- Apps: `Apps` - The module housing all of the app methods\n  - `Apps::MapViewer` - An app that lets you view `WAD::Map`s\n    - `Apps::MapViewer.run(wad, map)` - Views a map in a `WAD`\n    - `Apps::MapViewer.run_cli` - Same as `.run` but uses command line input for wad and map (-w, -m)\n  - `Apps::WadViewer` - WIP - An app that lets you view a `WAD`\n    - `Apps::WadViewer.run(wad)` - Views a `WAD`\n    - `Apps::WadViewer.run_cli` - Same as `.run` but uses command line input for wad (-w)","summary":"<ul>\n<li>Apps: <code><a href=\"../../Apps.html\">Apps</a></code> - The module housing all of the app methods   - <code><a href=\"../../Apps/MapViewer.html\">Apps::MapViewer</a></code> - An app that lets you view <code><a href=\"../../WAD/Map.html\">WAD::Map</a></code>s     - <code><a href=\"../../Apps/MapViewer.html#run%28input_file%3AString%2Cinput_map%3AString%3D%22%22%29-class-method\">Apps::MapViewer.run(wad, map)</a></code> - Views a map in a <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../Apps/MapViewer.html#run_cli-class-method\">Apps::MapViewer.run_cli</a></code> - Same as <code>.run</code> but uses command line input for wad and map (-w, -m)   - <code><a href=\"../../Apps/WadViewer.html\">Apps::WadViewer</a></code> - WIP - An app that lets you view a <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../Apps/WadViewer.html#run%28input_file%3AString%29-class-method\">Apps::WadViewer.run(wad)</a></code> - Views a <code><a href=\"../../WAD.html\">WAD</a></code>     - <code><a href=\"../../Apps/WadViewer.html#run_cli-class-method\">Apps::WadViewer.run_cli</a></code> - Same as <code>.run</code> but uses command line input for wad (-w)</li>\n</ul>"}]}]},{"html_id":"wa-cr/RaylibAdditions","path":"RaylibAdditions.html","kind":"module","full_name":"RaylibAdditions","name":"RaylibAdditions","abstract":false,"locations":[{"filename":"src/raylib.cr","line_number":31,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L31"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"doc":"### Additions to help wa-cr with graphical conversions using [Raylib](https://github.com/raysan5/raylib/releases)\n\nTo use these additions, just require it:\n\n```\nrequire \"wa-cr/raylib\"\n```\n\nHere's some examples of this addition:\n\n```\nrequire \"wa-cr/raylib\"\n\n# Gets the palette to use for the images\npalette = myw_ad.playpal.palettes[0]\n\nmy_wad.get_texture(\"NameOfTexture\", palette) # => Raylib::Image\n\nmy_graphic.to_image(palette) # => Raylib::Image\n\n# You can also get pixel data from the image\nmy_graphic.get_pixel(x, y, palette) # => Raylib::Color\n\nmy_flat.to_image(palette) # => Raylib::Image\n\nmy_flat.get_pixel(x, y, palette) # => Raylib::Color\n```","summary":"<h3><a id=\"additions-to-help-wa-cr-with-graphical-conversions-using-raylib\" class=\"anchor\" href=\"#additions-to-help-wa-cr-with-graphical-conversions-using-raylib\">  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a>Additions to help wa-cr with graphical conversions using <a href=\"https://github.com/raysan5/raylib/releases\">Raylib</a></h3>","types":[{"html_id":"wa-cr/RaylibAdditions/Flat","path":"RaylibAdditions/Flat.html","kind":"module","full_name":"RaylibAdditions::Flat","name":"Flat","abstract":false,"locations":[{"filename":"src/raylib.cr","line_number":272,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L272"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/Flat","kind":"class","full_name":"WAD::Flat","name":"Flat"}],"namespace":{"html_id":"wa-cr/RaylibAdditions","kind":"module","full_name":"RaylibAdditions","name":"RaylibAdditions"},"doc":"A WAD flat","summary":"<p>A WAD flat</p>","instance_methods":[{"html_id":"get_pixel(x:Int,y:Int,palette:::WAD::Playpal::Palette):Raylib::Color-instance-method","name":"get_pixel","doc":"Returns a [Raylib Color](https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L235C6-L235C6)\nfor the pixel of a flat\n\nGets the [Raylib Color](https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L235C6-L235C6)\nof the pixel [5, 2] and draws it:\n```\nrequire \"wa-cr/raylib\"\npalette = my_wad.playpal.palettes[0]\nmy_pixel = my_wad.flats[\"FLOOR0_1\"].get_pixel(5, 2)\nRaylib.draw_pixel(\n  0,\n  0,\n  my_pixel\n)\n```","summary":"<p>Returns a <a href=\"https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L235C6-L235C6\">Raylib Color</a> for the pixel of a flat</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"args_string":"(x : Int, y : Int, palette : ::WAD::Playpal::Palette) : Raylib::Color","args_html":"(x : Int, y : Int, palette : <a href=\"../WAD/Playpal/Palette.html\">::WAD::Playpal::Palette</a>) : Raylib::Color","location":{"filename":"src/raylib.cr","line_number":314,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L314"},"def":{"name":"get_pixel","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"return_type":"Raylib::Color","visibility":"Public","body":"if x > width || y > height\n  raise(\"Out of bounds\")\nend\nif pixel = self[x, y]\n  palette_r = palette.colors[pixel].r\n  palette_g = palette.colors[pixel].g\n  palette_b = palette.colors[pixel].b\n  return Raylib::Color.new(r: palette_r, g: palette_g, b: palette_b, a: 255)\nelse\n  return Raylib::Color.new(r: 0, g: 0, b: 0, a: 0)\nend\n"},"external_var":false},{"html_id":"to_image(palette:::WAD::Playpal::Palette):Raylib::Image-instance-method","name":"to_image","doc":"Converts a flat to a [Raylib Image](https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L251) using a palette\n\nConverts a flat to a [Raylib Image](https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L251) given a palette:\nand draws that image.\n```\nrequire \"wa-cr/raylib\"\npalette = my_wad.playpal.palettes[0]\nmy_image = my_wad.flats[\"FLOOR0_1\"].to_image(palette)\nRaylib.draw_texture(\n  Raylib.load_texture_from_image(my_image),\n  0,\n  0,\n  Raylib::WHITE\n)\n```","summary":"<p>Converts a flat to a <a href=\"https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L251\">Raylib Image</a> using a palette</p>","abstract":false,"args":[{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"args_string":"(palette : ::WAD::Playpal::Palette) : Raylib::Image","args_html":"(palette : <a href=\"../WAD/Playpal/Palette.html\">::WAD::Playpal::Palette</a>) : Raylib::Image","location":{"filename":"src/raylib.cr","line_number":288,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L288"},"def":{"name":"to_image","args":[{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"return_type":"Raylib::Image","visibility":"Public","body":"image = Raylib.gen_image_color(width, height, Raylib::BLANK)\ncolors.each_with_index do |p, i|\n  palette_r = palette.colors[p].r\n  palette_g = palette.colors[p].g\n  palette_b = palette.colors[p].b\n  Raylib.image_draw_pixel(pointerof(image), i % width, (i / width).to_i, Raylib::Color.new(r: palette_r, g: palette_g, b: palette_b, a: 255))\nend\nimage\n"},"external_var":false},{"html_id":"to_png(filename:String|Path,palette:::WAD::Playpal::Palette)-instance-method","name":"to_png","doc":"Exports a flat to a png given a *filename* and a *palette*\n\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\n\npalette = my_wad.playpal.palettes[0]\n\nmy_flat = my_wad.flats[\"MyFlat\"]\n\nmy_flat.to_png(\"Path/To/MyFlat.png\", palette)\n```","summary":"<p>Exports a flat to a png given a <em>filename</em> and a <em>palette</em></p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"args_string":"(filename : String | Path, palette : ::WAD::Playpal::Palette)","args_html":"(filename : String | Path, palette : <a href=\"../WAD/Playpal/Palette.html\">::WAD::Playpal::Palette</a>)","location":{"filename":"src/raylib.cr","line_number":337,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L337"},"def":{"name":"to_png","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"visibility":"Public","body":"filename = filename.to_s\nif filename[filename.rindex!('.'), filename.size - 1] != \".png\"\n  filename = filename + \".png\"\nend\nimage = self.to_image(palette)\nRaylib.export_image?(image, filename)\nRaylib.unload_image(image)\n"},"external_var":false}]},{"html_id":"wa-cr/RaylibAdditions/FlatClassMethods","path":"RaylibAdditions/FlatClassMethods.html","kind":"module","full_name":"RaylibAdditions::FlatClassMethods","name":"FlatClassMethods","abstract":false,"locations":[{"filename":"src/raylib.cr","line_number":347,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L347"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/RaylibAdditions","kind":"module","full_name":"RaylibAdditions","name":"RaylibAdditions"},"doc":"Raylib class methods for `WAD::Flat`","summary":"<p>Raylib class methods for <code>WAD::Flat</code></p>","instance_methods":[{"html_id":"color_distance(color1:Raylib::Color,color2:Raylib::Color):Int-instance-method","name":"color_distance","doc":"Gets the absolute [Color Distance](https://en.wikipedia.org/wiki/Color_difference) between *color1* to *color*2","summary":"<p>Gets the absolute <a href=\"https://en.wikipedia.org/wiki/Color_difference\">Color Distance</a> between <em>color1</em> to <em>color</em>2</p>","abstract":false,"args":[{"name":"color1","external_name":"color1","restriction":"Raylib::Color"},{"name":"color2","external_name":"color2","restriction":"Raylib::Color"}],"args_string":"(color1 : Raylib::Color, color2 : Raylib::Color) : Int","args_html":"(color1 : Raylib::Color, color2 : Raylib::Color) : Int","location":{"filename":"src/raylib.cr","line_number":349,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L349"},"def":{"name":"color_distance","args":[{"name":"color1","external_name":"color1","restriction":"Raylib::Color"},{"name":"color2","external_name":"color2","restriction":"Raylib::Color"}],"return_type":"Int","visibility":"Public","body":"return ((((color1.r.to_i - color2.r.to_i) ** 2) + ((color1.g.to_i - color2.g.to_i) ** 2)) + ((color1.b.to_i - color2.b.to_i) ** 2)).abs"},"external_var":false},{"html_id":"from_image(image:Raylib::Image,palette:::WAD::Playpal::Palette):::WAD::Flat-instance-method","name":"from_image","doc":"Converts a `Raylib::Image` to a `WAD::Flat` given the *image* and the *palette*\n\nNOTE: The image has to be 64x64 and have no transparent pixels\n\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\n\npalette = my_wad.playpal.palettes[0]\n\nmy_image = Raylib.gen_image_color(64, 64, Raylib::RED)\n\nmy_image_flat = WAD::Flat.from_image(my_image, palette)\n```","summary":"<p>Converts a <code>Raylib::Image</code> to a <code>WAD::Flat</code> given the <em>image</em> and the <em>palette</em></p>","abstract":false,"args":[{"name":"image","external_name":"image","restriction":"Raylib::Image"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"args_string":"(image : Raylib::Image, palette : ::WAD::Playpal::Palette) : ::WAD::Flat","args_html":"(image : Raylib::Image, palette : <a href=\"../WAD/Playpal/Palette.html\">::WAD::Playpal::Palette</a>) : <a href=\"../WAD/Flat.html\">::WAD::Flat</a>","location":{"filename":"src/raylib.cr","line_number":388,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L388"},"def":{"name":"from_image","args":[{"name":"image","external_name":"image","restriction":"Raylib::Image"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"return_type":"::WAD::Flat","visibility":"Public","body":"if (image.width != 64) || (image.height != 64)\n  raise(\"A FLAT NEEDS TO BE 64x64. *image* IS #{image.width}x#{image.height}\")\nend\n\n\ncurrent_closest_color : Tuple(Raylib::Color, UInt8, Int32) = {Raylib::BLACK, 0_u8, 0}\nflat = ::WAD::Flat.new\n\nimage.height.times do |y|\n  image.width.times do |x|\n    current_image_color = Raylib.get_image_color(image, x, y)\n\n    if current_image_color.a != 0\n      raylib_palette_color = Raylib::Color.new(r: palette.colors[0].r, g: palette.colors[0].g, b: palette.colors[0].b, a: 255)\n\n      current_closest_color = {raylib_palette_color, 0_u8, color_distance(current_image_color, raylib_palette_color)}\n\n      palette.colors.each.with_index do |color, index|\n        raylib_palette_color = Raylib::Color.new(r: color.r, g: color.g, b: color.b, a: 255)\n        if (current_distance = color_distance(current_image_color, raylib_palette_color)) < current_closest_color[2]\n          current_closest_color = {raylib_palette_color, index.to_u8, current_distance}\n        end\n      end\n\n      flat.colors << current_closest_color[1]\n    else\n      raise(\"Pixel x: #{x}, y: #{y} is transparent. Flats can not have transparent pixels\")\n    end\n  end\nend\n\nreturn flat\n"},"external_var":false},{"html_id":"from_png(filename:String|Path,palette:::WAD::Playpal::Palette):::WAD::Flat-instance-method","name":"from_png","doc":"Converts a .png to a `WAD::Flat` given the *filename* and the *palette*\n\nNOTE: The png has to be 64x64 and have no transparent pixels\n\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\n\npalette = my_wad.playpal.palettes[0]\n\nmy_png_flat = WAD::Flat.from_png(\"Path/To/MyFlat.png\", palette)\n```","summary":"<p>Converts a .png to a <code>WAD::Flat</code> given the <em>filename</em> and the <em>palette</em></p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"args_string":"(filename : String | Path, palette : ::WAD::Playpal::Palette) : ::WAD::Flat","args_html":"(filename : String | Path, palette : <a href=\"../WAD/Playpal/Palette.html\">::WAD::Playpal::Palette</a>) : <a href=\"../WAD/Flat.html\">::WAD::Flat</a>","location":{"filename":"src/raylib.cr","line_number":366,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L366"},"def":{"name":"from_png","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"return_type":"::WAD::Flat","visibility":"Public","body":"filename = filename.to_s\nif filename[filename.rindex!('.'), filename.size - 1] != \".png\"\n  filename = filename + \".png\"\nend\nimage = Raylib.load_image(filename)\nflat = from_image(image, palette)\nRaylib.unload_image(image)\nreturn flat\n"},"external_var":false}]},{"html_id":"wa-cr/RaylibAdditions/Graphic","path":"RaylibAdditions/Graphic.html","kind":"module","full_name":"RaylibAdditions::Graphic","name":"Graphic","abstract":false,"locations":[{"filename":"src/raylib.cr","line_number":104,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L104"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/Graphic","kind":"class","full_name":"WAD::Graphic","name":"Graphic"}],"namespace":{"html_id":"wa-cr/RaylibAdditions","kind":"module","full_name":"RaylibAdditions","name":"RaylibAdditions"},"doc":"A WAD graphic","summary":"<p>A WAD graphic</p>","instance_methods":[{"html_id":"get_pixel(x:Int,y:Int,palette:::WAD::Playpal::Palette):Raylib::Color-instance-method","name":"get_pixel","doc":"Returns a [Raylib Color](https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L235C6-L235C6)\nfor the pixel of a graphic\n\nGets the [Raylib Color](https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L235C6-L235C6)\nof the pixel [2, 4] and draws it:\n```\nrequire \"wa-cr/raylib\"\npalette = my_wad.playpal.palettes[0]\nmy_pixel = my_wad.graphics[\"HELP1\"].get_pixel(2, 4)\nRaylib.draw_pixel(\n  0,\n  0,\n  my_pixel\n)\n```","summary":"<p>Returns a <a href=\"https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L235C6-L235C6\">Raylib Color</a> for the pixel of a graphic</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"args_string":"(x : Int, y : Int, palette : ::WAD::Playpal::Palette) : Raylib::Color","args_html":"(x : Int, y : Int, palette : <a href=\"../WAD/Playpal/Palette.html\">::WAD::Playpal::Palette</a>) : Raylib::Color","location":{"filename":"src/raylib.cr","line_number":147,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L147"},"def":{"name":"get_pixel","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"return_type":"Raylib::Color","visibility":"Public","body":"if x > width || y > height\n  raise(\"Out of bounds\")\nend\nif pixel = self[x, y]\n  palette_r = palette.colors[pixel].r\n  palette_g = palette.colors[pixel].g\n  palette_b = palette.colors[pixel].b\n  return Raylib::Color.new(r: palette_r, g: palette_g, b: palette_b, a: 255)\nelse\n  return Raylib::Color.new(r: 0, g: 0, b: 0, a: 0)\nend\n"},"external_var":false},{"html_id":"to_image(palette:::WAD::Playpal::Palette):Raylib::Image-instance-method","name":"to_image","doc":"Converts a graphic to a raylib image using a palette\n\nConverts a graphic to a Raylib Image given a palette\nand draws that image:\n```\nrequire \"wa-cr/raylib\"\npalette = my_wad.playpal.palettes[0]\nmy_image = my_wad.graphics[\"HELP1\"].to_image(palette)\nRaylib.draw_texture(\n  Raylib.load_texture_from_image(my_image),\n  0,\n  0,\n  Raylib::WHITE\n)\n```","summary":"<p>Converts a graphic to a raylib image using a palette</p>","abstract":false,"args":[{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"args_string":"(palette : ::WAD::Playpal::Palette) : Raylib::Image","args_html":"(palette : <a href=\"../WAD/Playpal/Palette.html\">::WAD::Playpal::Palette</a>) : Raylib::Image","location":{"filename":"src/raylib.cr","line_number":120,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L120"},"def":{"name":"to_image","args":[{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"return_type":"Raylib::Image","visibility":"Public","body":"image = Raylib.gen_image_color(width, height, Raylib::BLANK)\ndata.each_with_index do |p, i|\n  if p.nil?\n    next\n  end\n  palette_r = palette.colors[p].r\n  palette_g = palette.colors[p].g\n  palette_b = palette.colors[p].b\n  Raylib.image_draw_pixel(pointerof(image), i % width, (i / width).to_i, Raylib::Color.new(r: palette_r, g: palette_g, b: palette_b, a: 255))\nend\nimage\n"},"external_var":false},{"html_id":"to_png(filename:String|Path,palette:::WAD::Playpal::Palette)-instance-method","name":"to_png","doc":"Exports a graphic to a png given a *filename* and a *palette*\n\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\n\npalette = my_wad.playpal.palettes[0]\n\nmy_graphic = my_wad.graphics[\"MyGraphic\"]\n\nmy_graphic.to_png(\"Path/To/MyGraphic.png\", palette)\n```","summary":"<p>Exports a graphic to a png given a <em>filename</em> and a <em>palette</em></p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"args_string":"(filename : String | Path, palette : ::WAD::Playpal::Palette)","args_html":"(filename : String | Path, palette : <a href=\"../WAD/Playpal/Palette.html\">::WAD::Playpal::Palette</a>)","location":{"filename":"src/raylib.cr","line_number":170,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L170"},"def":{"name":"to_png","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"visibility":"Public","body":"filename = filename.to_s\nif filename[filename.rindex!('.'), filename.size - 1] != \".png\"\n  filename = filename + \".png\"\nend\nimage = self.to_image(palette)\nRaylib.export_image?(image, filename)\nRaylib.unload_image(image)\n"},"external_var":false}]},{"html_id":"wa-cr/RaylibAdditions/GraphicClassMethods","path":"RaylibAdditions/GraphicClassMethods.html","kind":"module","full_name":"RaylibAdditions::GraphicClassMethods","name":"GraphicClassMethods","abstract":false,"locations":[{"filename":"src/raylib.cr","line_number":180,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L180"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/RaylibAdditions","kind":"module","full_name":"RaylibAdditions","name":"RaylibAdditions"},"doc":"Raylib class methods for `WAD::Graphic`","summary":"<p>Raylib class methods for <code>WAD::Graphic</code></p>","instance_methods":[{"html_id":"color_distance(color1:Raylib::Color,color2:Raylib::Color):Int-instance-method","name":"color_distance","doc":"Gets the absolute [Color Distance](https://en.wikipedia.org/wiki/Color_difference) between *color1* to *color*2","summary":"<p>Gets the absolute <a href=\"https://en.wikipedia.org/wiki/Color_difference\">Color Distance</a> between <em>color1</em> to <em>color</em>2</p>","abstract":false,"args":[{"name":"color1","external_name":"color1","restriction":"Raylib::Color"},{"name":"color2","external_name":"color2","restriction":"Raylib::Color"}],"args_string":"(color1 : Raylib::Color, color2 : Raylib::Color) : Int","args_html":"(color1 : Raylib::Color, color2 : Raylib::Color) : Int","location":{"filename":"src/raylib.cr","line_number":182,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L182"},"def":{"name":"color_distance","args":[{"name":"color1","external_name":"color1","restriction":"Raylib::Color"},{"name":"color2","external_name":"color2","restriction":"Raylib::Color"}],"return_type":"Int","visibility":"Public","body":"return ((((color1.r.to_i - color2.r.to_i) ** 2) + ((color1.g.to_i - color2.g.to_i) ** 2)) + ((color1.b.to_i - color2.b.to_i) ** 2)).abs"},"external_var":false},{"html_id":"from_image(image:Raylib::Image,palette:::WAD::Playpal::Palette,offset:::WAD::Graphic::Offsets=::WAD::Graphic::Offsets::TopLeft):::WAD::Graphic-instance-method","name":"from_image","doc":"Converts a `Raylib::Image` to a `WAD::Graphic` given the *filename*, the *palette*, and the *offset*\n\nNOTE: If you get an arithmetic overflow error at any point, chances are that your image is too big\n\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\n\npalette = my_wad.playpal.palettes[0]\n\nmy_image = Raylib.gen_image_color(100, 80, Raylib::RED)\n\nmy_image_graphic = WAD::Graphic.from_image(my_image, palette, WAD::Graphic::Offsets::BottomCenter)\n```","summary":"<p>Converts a <code>Raylib::Image</code> to a <code>WAD::Graphic</code> given the <em>filename</em>, the <em>palette</em>, and the <em>offset</em></p>","abstract":false,"args":[{"name":"image","external_name":"image","restriction":"Raylib::Image"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"},{"name":"offset","default_value":"::WAD::Graphic::Offsets::TopLeft","external_name":"offset","restriction":"::WAD::Graphic::Offsets"}],"args_string":"(image : Raylib::Image, palette : ::WAD::Playpal::Palette, offset : ::WAD::Graphic::Offsets = ::WAD::Graphic::Offsets::TopLeft) : ::WAD::Graphic","args_html":"(image : Raylib::Image, palette : <a href=\"../WAD/Playpal/Palette.html\">::WAD::Playpal::Palette</a>, offset : <a href=\"../WAD/Graphic/Offsets.html\">::WAD::Graphic::Offsets</a> = <span class=\"t\">::</span><span class=\"t\">WAD</span><span class=\"t\">::</span><span class=\"t\">Graphic</span><span class=\"t\">::</span><span class=\"t\">Offsets</span><span class=\"t\">::</span><span class=\"t\">TopLeft</span>) : <a href=\"../WAD/Graphic.html\">::WAD::Graphic</a>","location":{"filename":"src/raylib.cr","line_number":221,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L221"},"def":{"name":"from_image","args":[{"name":"image","external_name":"image","restriction":"Raylib::Image"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"},{"name":"offset","default_value":"::WAD::Graphic::Offsets::TopLeft","external_name":"offset","restriction":"::WAD::Graphic::Offsets"}],"return_type":"::WAD::Graphic","visibility":"Public","body":"offsets = [[0_i16, 0_i16], [0_i16, (image.width // 2).to_i16], [0_i16, image.width.to_i16], [(image.height // 2).to_i16, 0_i16], [(image.height // 2).to_i16, (image.width // 2).to_i16], [(image.height // 2).to_i16, image.width.to_i16], [image.height.to_i16, 0_i16], [image.height.to_i16, (image.width // 2).to_i16], [image.height.to_i16, image.width.to_i16]]\n\ncurrent_closest_color : Tuple(Raylib::Color, UInt8, Int32) = {Raylib::BLACK, 0_u8, 0}\ngraphic = ::WAD::Graphic.new\n\ngraphic.topoffset = offsets[offset.value][0]\ngraphic.leftoffset = offsets[offset.value][1]\n\ngraphic.width = image.width.to_u16\ngraphic.height = image.height.to_u16\ngraphic.reset_data\n\nimage.height.times do |y|\n  image.width.times do |x|\n    current_image_color = Raylib.get_image_color(image, x, y)\n\n    if current_image_color.a != 0\n      raylib_palette_color = Raylib::Color.new(r: palette.colors[0].r, g: palette.colors[0].g, b: palette.colors[0].b, a: 255)\n\n      current_closest_color = {raylib_palette_color, 0_u8, color_distance(current_image_color, raylib_palette_color)}\n\n      palette.colors.each.with_index do |color, index|\n        raylib_palette_color = Raylib::Color.new(r: color.r, g: color.g, b: color.b, a: 255)\n        if (current_distance = color_distance(current_image_color, raylib_palette_color)) < current_closest_color[2]\n          current_closest_color = {raylib_palette_color, index.to_u8, current_distance}\n        end\n      end\n\n      graphic.data[x + (y * graphic.width)] = current_closest_color[1]\n    end\n  end\nend\n\nreturn graphic\n"},"external_var":false},{"html_id":"from_png(filename:String|Path,palette:::WAD::Playpal::Palette,offset:::WAD::Graphic::Offsets=::WAD::Graphic::Offsets::TopLeft):::WAD::Graphic-instance-method","name":"from_png","doc":"Converts a .png to a `WAD::Graphic` given the *filename*, the *palette*, and the *offset*\n\nNOTE: If you get an arithmetic overflow error at any point, chances are that your image is too big\n\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\n\npalette = my_wad.playpal.palettes[0]\n\nmy_png_graphic = WAD::Graphic.from_png(\"Path/To/MyGraphic.png\", palette, WAD::Graphic::Offsets::BottomCenter)\n```","summary":"<p>Converts a .png to a <code>WAD::Graphic</code> given the <em>filename</em>, the <em>palette</em>, and the <em>offset</em></p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"},{"name":"offset","default_value":"::WAD::Graphic::Offsets::TopLeft","external_name":"offset","restriction":"::WAD::Graphic::Offsets"}],"args_string":"(filename : String | Path, palette : ::WAD::Playpal::Palette, offset : ::WAD::Graphic::Offsets = ::WAD::Graphic::Offsets::TopLeft) : ::WAD::Graphic","args_html":"(filename : String | Path, palette : <a href=\"../WAD/Playpal/Palette.html\">::WAD::Playpal::Palette</a>, offset : <a href=\"../WAD/Graphic/Offsets.html\">::WAD::Graphic::Offsets</a> = <span class=\"t\">::</span><span class=\"t\">WAD</span><span class=\"t\">::</span><span class=\"t\">Graphic</span><span class=\"t\">::</span><span class=\"t\">Offsets</span><span class=\"t\">::</span><span class=\"t\">TopLeft</span>) : <a href=\"../WAD/Graphic.html\">::WAD::Graphic</a>","location":{"filename":"src/raylib.cr","line_number":199,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L199"},"def":{"name":"from_png","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"},{"name":"offset","default_value":"::WAD::Graphic::Offsets::TopLeft","external_name":"offset","restriction":"::WAD::Graphic::Offsets"}],"return_type":"::WAD::Graphic","visibility":"Public","body":"filename = filename.to_s\nif filename[filename.rindex!('.'), filename.size - 1] != \".png\"\n  filename = filename + \".png\"\nend\nimage = Raylib.load_image(filename)\ngraphic = from_image(image, palette, offset)\nRaylib.unload_image(image)\nreturn graphic\n"},"external_var":false}]},{"html_id":"wa-cr/RaylibAdditions/WAD","path":"RaylibAdditions/WAD.html","kind":"module","full_name":"RaylibAdditions::WAD","name":"WAD","abstract":false,"locations":[{"filename":"src/raylib.cr","line_number":33,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L33"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"}],"namespace":{"html_id":"wa-cr/RaylibAdditions","kind":"module","full_name":"RaylibAdditions","name":"RaylibAdditions"},"doc":"Reads and stores the data of a WAD file.","summary":"<p>Reads and stores the data of a WAD file.</p>","instance_methods":[{"html_id":"export_texture(texture_name:String,filename:String|Path,palette:::WAD::Playpal::Palette)-instance-method","name":"export_texture","doc":"Exports a texture to a png given a *texture_name*, a *filename*, and a *palette*\n\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\n\npalette = my_wad.playpal.palettes[0]\n\nmy_wad.export_texture(\"MyTexture\", \"Path/To/MyGraphic.png\", palette)\n```","summary":"<p>Exports a texture to a png given a <em>texture_name</em>, a <em>filename</em>, and a <em>palette</em></p>","abstract":false,"args":[{"name":"texture_name","external_name":"texture_name","restriction":"String"},{"name":"filename","external_name":"filename","restriction":"String | Path"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"args_string":"(texture_name : String, filename : String | Path, palette : ::WAD::Playpal::Palette)","args_html":"(texture_name : String, filename : String | Path, palette : <a href=\"../WAD/Playpal/Palette.html\">::WAD::Playpal::Palette</a>)","location":{"filename":"src/raylib.cr","line_number":94,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L94"},"def":{"name":"export_texture","args":[{"name":"texture_name","external_name":"texture_name","restriction":"String"},{"name":"filename","external_name":"filename","restriction":"String | Path"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"visibility":"Public","body":"filename = filename.to_s\nif filename[filename.rindex!('.'), filename.size - 1] != \".png\"\n  filename = filename + \".png\"\nend\nimage = self.get_texture(texture_name, palette)\nRaylib.export_image?(image, filename)\nRaylib.unload_image(image)\n"},"external_var":false},{"html_id":"get_texture(name:String,palette:::WAD::Playpal::Palette):Raylib::Image-instance-method","name":"get_texture","doc":"Gets a texture as a [Raylib Image](https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L251)\ngiven the texture name and a palette\n\nTakes the name of a texture from TextureX and a palette\nand converts the texture to a [Raylib Image](https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L251)\nand draws that image:\n```\nrequire \"wa-cr/raylib\"\npalette = my_wad.playpal.palettes[0]\nmy_image = my_wad.get_texture(\"STARTAN3\", palette)\nRaylib.draw_texture(\n  Raylib.load_texture_from_image(my_image),\n  0,\n  0,\n  Raylib::WHITE\n)\n```","summary":"<p>Gets a texture as a <a href=\"https://github.com/raysan5/raylib/blob/c147ab51c92abb09af5a5bc93759c7d360b8e1be/src/raylib.h#L251\">Raylib Image</a> given the texture name and a palette</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"args_string":"(name : String, palette : ::WAD::Playpal::Palette) : Raylib::Image","args_html":"(name : String, palette : <a href=\"../WAD/Playpal/Palette.html\">::WAD::Playpal::Palette</a>) : Raylib::Image","location":{"filename":"src/raylib.cr","line_number":51,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L51"},"def":{"name":"get_texture","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"palette","external_name":"palette","restriction":"::WAD::Playpal::Palette"}],"return_type":"Raylib::Image","visibility":"Public","body":"texmaps.values.each do |texmapx|\n  if texturemap = texmapx.mtextures.find do |m| m.name == name end\n    if texturemap.name == name\n      image = Raylib.gen_image_color(texturemap.width, texturemap.height, Raylib::BLANK)\n\n      texturemap.patches.each do |texmap_patch|\n        patch_name = pnames.patches[texmap_patch.patch]\n        patch_image = graphics[patch_name.upcase.gsub(\"\\u0000\", \"\")].to_image(palette)\n        Raylib.image_draw(pointerof(image), patch_image, Raylib::Rectangle.new(x: 0, y: 0, width: patch_image.width, height: patch_image.height), Raylib::Rectangle.new(x: texmap_patch.originx, y: texmap_patch.originy, width: patch_image.width, height: patch_image.height), Raylib::WHITE)\n        Raylib.unload_image(patch_image)\n      end\n      return image\n    end\n  end\nend\nreturn Raylib.gen_image_color(64, 64, Raylib::PURPLE)\n"},"external_var":false}]}]},{"html_id":"wa-cr/WAD","path":"WAD.html","kind":"class","full_name":"WAD","name":"WAD","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/WritingAdditions/WAD","kind":"module","full_name":"WritingAdditions::WAD","name":"WAD"},{"html_id":"wa-cr/RaylibAdditions/WAD","kind":"module","full_name":"RaylibAdditions::WAD","name":"WAD"},{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/raylib.cr","line_number":427,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L427"},{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L1"},{"filename":"src/wa-cr/wad/wad-data/directory.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/directory.cr#L1"},{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L1"},{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L1"},{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L1"},{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L1"},{"filename":"src/wa-cr/wad/wad.cr","line_number":78,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L78"},{"filename":"src/write.cr","line_number":306,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L306"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"HEADER_SIZE","name":"HEADER_SIZE","value":"16","doc":"The size of the header in bytes","summary":"<p>The size of the header in bytes</p>"}],"included_modules":[{"html_id":"wa-cr/RaylibAdditions/WAD","kind":"module","full_name":"RaylibAdditions::WAD","name":"WAD"},{"html_id":"wa-cr/WritingAdditions/WAD","kind":"module","full_name":"WritingAdditions::WAD","name":"WAD"}],"doc":"### Reading a .WAD file's data\n\nTo simply read in a WAD file, you just call `WAD.read(file : Path | String | IO) : WAD`:\n\n```\nmy_string_wad = WAD.read(\"Path/To/Wad\")\nmy_path_wad = WAD.read(Path[\"Path/To/Wad\"])\n\nFile.open(\"Path/To/Wad\") do |file|\n  my_io_wad = WAD.read(file)\nend\n```\n\n### Creating a new `WAD`\n\nTo create a new `WAD`, you call `WAD.new(type)`, with type being of `WAD::Type`\n\n```\nmy_new_internal_wad = WAD.new(WAD::Type::Internal)\nmy_new_patch_wad = WAD.new(WAD::Type::Patch)\n```\n\n### Using the `WAD`'s data\n\nwa-cr sorts the the parsed wad's data into easy to use variables.\n\nTo get the sample rate of the sound *\"MYSOUND\"*:\n\n```\nmy_wad.sounds[\"MYSOUND\"].sample_rate # => returns the sample rate of the sound\n```\n\nTo get *y_position* of the 34th thing in the map *\"MAP23\"*:\n\n```\n# Gets the thing index 33 because it is zero indexed: the 33rd index is the 34th thing\nmy_wad.maps[\"MAP23\"].things[33].y_position # => returns the y_position of the thing\n```\n\n### Lumps\n\nYou can also read in .lmp lump files:\n\nNOTE: `Graphic.parse` can take 2 arguments: The file to read and\nthe position of the start of the data (Default is -1. Should almost always be -1 when reading a .lmp)\n```\nmy_string_graphic = WAD::Graphic.parse(\"Path/To/MyGraphic.lmp\")\nmy_path_graphic = WAD::Graphic.parse(Path[\"Path/To/MyGraphic.lmp\"])\n\nFile.open(\"Path/To/MyGraphic.lmp\") do |file|\n  my_io_graphic = WAD::Graphic.parse(file)\nend\n```\n```\nmy_string_flat = WAD::Flat.parse(\"Path/To/MyFlat.lmp\")\nmy_path_flat = WAD::Flat.parse(Path[\"Path/To/MyFlat.lmp\"])\n\nFile.open(\"Path/To/MyFlat.lmp\") do |file|\n  my_io_flat = WAD::Flat.parse(file)\nend\n```\n```\nmy_string_sound = WAD::Sound.parse(\"Path/To/MySound.lmp\")\nmy_path_sound = WAD::Sound.parse(Path[\"Path/To/MySound.lmp\"])\n\nFile.open(\"Path/To/MySound.lmp\") do |file|\n  my_io_sound = WAD::Sound.parse(file)\nend\n```","summary":"<h3><a id=\"reading-a-.wad-files-data\" class=\"anchor\" href=\"#reading-a-.wad-files-data\">  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a>Reading a .WAD file's data</h3>","class_methods":[{"html_id":"read?(file:IO):WAD|Nil-class-method","name":"read?","doc":"Reads in a WAD file given the *io*\nbut returns `Nil` if parsing the `WAD` throws an error:\n\n```\nFile.open(\"Path/To/Wad\") do |file|\n  my_wad = WAD.read?(file)\nend\n```","summary":"<p>Reads in a WAD file given the <em>io</em> but returns <code>Nil</code> if parsing the <code><a href=\"WAD.html\">WAD</a></code> throws an error:</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"IO"}],"args_string":"(file : IO) : WAD | Nil","args_html":"(file : IO) : <a href=\"WAD.html\">WAD</a> | Nil","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":689,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L689"},"def":{"name":"read?","args":[{"name":"file","external_name":"file","restriction":"IO"}],"return_type":"WAD | Nil","visibility":"Public","body":"begin\n  return self.read(file, throw_errors: true)\nrescue\n  return nil\nend"},"external_var":false},{"html_id":"read?(filename:Path|String):WAD|Nil-class-method","name":"read?","doc":"Reads in a WAD file given the *filename*\nbut returns `Nil` if parsing the `WAD` throws an error:\n\n```\nmy_wad = WAD.read?(\"Path/To/Wad\")\n```","summary":"<p>Reads in a WAD file given the <em>filename</em> but returns <code>Nil</code> if parsing the <code><a href=\"WAD.html\">WAD</a></code> throws an error:</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"Path | String"}],"args_string":"(filename : Path | String) : WAD | Nil","args_html":"(filename : Path | String) : <a href=\"WAD.html\">WAD</a> | Nil","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":703,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L703"},"def":{"name":"read?","args":[{"name":"filename","external_name":"filename","restriction":"Path | String"}],"return_type":"WAD | Nil","visibility":"Public","body":"File.open(filename) do |file|\n  return read?(file)\nend\n\nraise(\"WAD invalid\")\n"},"external_var":false},{"html_id":"slice_cut(slice:Slice,len:Int=8):Slice-class-method","name":"slice_cut","doc":"Cuts a slice down to length *len* if it is larger than *len*:\n\n```\nmy_slice = \"My Test Slice\".to_slice # => Bytes[77, 121, 32, 84, 101, 115, 116, 32, 83, 108, 105, 99, 101]\nWAD.slice_cut(my_slice, 5)          # => Bytes[77, 121, 32, 84, 101]\n```","summary":"<p>Cuts a slice down to length <em>len</em> if it is larger than <em>len</em>:</p>","abstract":false,"args":[{"name":"slice","external_name":"slice","restriction":"Slice"},{"name":"len","default_value":"8","external_name":"len","restriction":"Int"}],"args_string":"(slice : Slice, len : Int = 8) : Slice","args_html":"(slice : Slice, len : Int = <span class=\"n\">8</span>) : Slice","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":774,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L774"},"def":{"name":"slice_cut","args":[{"name":"slice","external_name":"slice","restriction":"Slice"},{"name":"len","default_value":"8","external_name":"len","restriction":"Int"}],"return_type":"Slice","visibility":"Public","body":"if slice.size > len\n  return slice[0..(len - 1)]\nelse\n  return slice\nend"},"external_var":false},{"html_id":"string_cut(string:String,len:Int=8):String-class-method","name":"string_cut","doc":"Cuts a string down to length *len* if it is larger than *len*:\n\n```\nWAD.string_cut(\"Aberdine\", 4) # => \"Aber\"\n```","summary":"<p>Cuts a string down to length <em>len</em> if it is larger than <em>len</em>:</p>","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"String"},{"name":"len","default_value":"8","external_name":"len","restriction":"Int"}],"args_string":"(string : String, len : Int = 8) : String","args_html":"(string : String, len : Int = <span class=\"n\">8</span>) : String","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":744,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L744"},"def":{"name":"string_cut","args":[{"name":"string","external_name":"string","restriction":"String"},{"name":"len","default_value":"8","external_name":"len","restriction":"Int"}],"return_type":"String","visibility":"Public","body":"if string.size > len\n  return string[0..(len - 1)]\nelse\n  return string\nend"},"external_var":false},{"html_id":"string_sub_chars(string:String):String-class-method","name":"string_sub_chars","doc":"Replaces all instances of ms-dos name incompatible chars of a string with \"~\":\n\n```\nmy_string = \"My.TestString\"\nWAD.string_sub_chars(my_string) # => \"My~Test~String\"\n```","summary":"<p>Replaces all instances of ms-dos name incompatible chars of a string with &quot;~&quot;:</p>","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"String"}],"args_string":"(string : String) : String","args_html":"(string : String) : String","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":758,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L758"},"def":{"name":"string_sub_chars","args":[{"name":"string","external_name":"string","restriction":"String"}],"return_type":"String","visibility":"Public","body":"incompatible_chars = ['\"', '*', '+', '.', ',', '/', ':', ';', '<', '=', '>', '?', '\\\\', '[', ']', '|']\nnew_string = string\n\nincompatible_chars.each do |char|\n  new_string = new_string.gsub(char, '~')\nend\nreturn new_string\n"},"external_var":false}],"constructors":[{"html_id":"new(type:Type=Type::Broken)-class-method","name":"new","abstract":false,"args":[{"name":"type","default_value":"Type::Broken","external_name":"type","restriction":"Type"}],"args_string":"(type : Type = Type::Broken)","args_html":"(type : <a href=\"WAD/Type.html\">Type</a> = <span class=\"t\">Type</span><span class=\"t\">::</span><span class=\"t\">Broken</span>)","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":120,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L120"},"def":{"name":"new","args":[{"name":"type","default_value":"Type::Broken","external_name":"type","restriction":"Type"}],"visibility":"Public","body":"_ = allocate\n_.initialize(type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false},{"html_id":"read(filename:Path|String):WAD-class-method","name":"read","doc":"Reads in a WAD file given the *filename*:\n\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\n```","summary":"<p>Reads in a WAD file given the <em>filename</em>:</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"Path | String"}],"args_string":"(filename : Path | String) : WAD","args_html":"(filename : Path | String) : <a href=\"WAD.html\">WAD</a>","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":672,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L672"},"def":{"name":"read","args":[{"name":"filename","external_name":"filename","restriction":"Path | String"}],"return_type":"WAD","visibility":"Public","body":"File.open(filename) do |file|\n  return read(file)\nend\n\nraise(\"WAD invalid\")\n"},"external_var":false},{"html_id":"read(file:IO,*,throw_errors:Bool=false):WAD-class-method","name":"read","doc":"Reads in a WAD file given the *io*:\n\n```\nFile.open(\"Path/To/Wad\") do |file|\n  my_wad = WAD.read(file)\nend\n```","summary":"<p>Reads in a WAD file given the <em>io</em>:</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"IO"},{"name":"","external_name":"","restriction":""},{"name":"throw_errors","default_value":"false","external_name":"throw_errors","restriction":"Bool"}],"args_string":"(file : IO, *, throw_errors : Bool = false) : WAD","args_html":"(file : IO, *, throw_errors : Bool = <span class=\"n\">false</span>) : <a href=\"WAD.html\">WAD</a>","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":296,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L296"},"def":{"name":"read","args":[{"name":"file","external_name":"file","restriction":"IO"},{"name":"","external_name":"","restriction":""},{"name":"throw_errors","default_value":"false","external_name":"throw_errors","restriction":"Bool"}],"splat_index":1,"return_type":"WAD","visibility":"Public","body":"invalid_lump_found = false\nwad = WAD.new\nstart_pos = file.pos.to_u32\n\nheader_slice = Bytes.new(4)\nfile.read(header_slice)\nstring_type = String.new(header_slice)\n\n\nif string_type =~ (/^IWAD$/)\n  wad.type = Type::Internal\nelsif string_type =~ (/^PWAD$/)\n  wad.type = Type::Patch\nelse\n  raise(\"TYPE IS BAD: #{string_type}\")\nend\n\n\nwad.directories_count = file.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\n\nwad.directory_pointer = (file.read_bytes(UInt32, IO::ByteFormat::LittleEndian)) + start_pos\n\nd_index = 0\n\n\n\nwhile d_index < wad.directories_count\n  directory_read = false\n\n\n  directory_start = wad.directory_pointer + (d_index * Directory::SIZE)\n\n  file.read_at(directory_start, Directory::SIZE) do |io|\n\n    directory = Directory.read(io, start_pos)\n    wad.directories << directory\n\n    if !directory_read\n      begin\n        if Map.is_map?(directory.name)\n          map = Map.new(directory.name)\n\n\n          map_directory_end_reached = false\n          while !(map_directory_end_reached)\n            d_index = d_index + 1\n\n            directory_start = wad.directory_pointer + (d_index * Directory::SIZE)\n\n            if (directory_start + Directory::SIZE) > (wad.directory_pointer + (wad.directories_count * Directory::SIZE))\n              break\n            end\n\n            file.read_at(directory_start, Directory::SIZE) do |io|\n\n              directory = Directory.read(io, start_pos)\n\n\n\n              if !(Map::MAP_CONTENTS.includes?(directory.name))\n                d_index = d_index - 1\n                map_directory_end_reached = true\n                break\n              end\n\n              map.insert_next_property(directory)\n            end\n          end\n\n\n          map_parse(things, Thing)\n          map_parse(linedefs, Linedef)\n          map_parse(sidedefs, Sidedef)\n          map_parse(vertexes, Vertex)\n          map_parse(segs, Seg)\n          map_parse(ssectors, Ssector)\n          map_parse(nodes, Node)\n          map_parse(sectors, Sector)\n          file.read_at(map.reject_directory.file_pos, map.reject_directory.size) do |io|\n            map.reject = Map::Reject.parse(io, map.reject_directory.size, map.sectors.size)\n          end\n          map_parse(blockmap, Blockmap)\n\n\n          wad.maps[map.name] = map\n          directory_read = true\n        end\n      rescue e\n        if throw_errors\n          raise(\"MAP '#{directory.name}' IS INVALID\\n#{e}\")\n        end\n        invalid_lump_found = true\n      end\n    end\n\n    if !directory_read\n      begin\n        if PcSound.is_pcsound?(directory.name)\n          file.read_at(directory.file_pos, directory.size) do |io|\n            wad.pcsounds[directory.name] = PcSound.parse(io)\n            directory_read = true\n          end\n        end\n      rescue e\n        if throw_errors\n          raise(\"PC SOUND '#{directory.name}' IS INVALID\\n#{e}\")\n        end\n        invalid_lump_found = true\n      end\n    end\n\n    if !directory_read\n      begin\n        if Sound.is_sound?(directory.name)\n          file.read_at(directory.file_pos, directory.size) do |io|\n            wad.sounds[directory.name] = Sound.parse(io)\n            directory_read = true\n          end\n        end\n      rescue e\n        if throw_errors\n          raise(\"SOUND '#{directory.name}' IS INVALID\\n#{e}\")\n        end\n        invalid_lump_found = true\n      end\n    end\n\n    if !directory_read\n      begin\n        if Music.is_music?(directory.name)\n          file.read_at(directory.file_pos, directory.size) do |io|\n            wad.music[directory.name] = Music.parse(io)\n            directory_read = true\n          end\n        end\n      rescue e\n        if throw_errors\n          raise(\"MUSIC '#{directory.name}' IS INVALID\\n#{e}\")\n        end\n        invalid_lump_found = true\n      end\n    end\n\n    if !directory_read\n      begin\n        if Genmidi.is_genmidi?(directory.name)\n          file.read_at(directory.file_pos, directory.size) do |io|\n            wad.genmidi = Genmidi.parse(io)\n            directory_read = true\n          end\n        end\n      rescue e\n        if throw_errors\n          raise(\"GENMIDI '#{directory.name}' IS INVALID\\n#{e}\")\n        end\n        invalid_lump_found = true\n      end\n    end\n\n    if !directory_read\n      begin\n        if Dmxgus.is_dmxgus?(directory.name)\n          file.read_at(directory.file_pos, directory.size) do |io|\n            wad.dmxgus = Dmxgus.parse(io)\n            directory_read = true\n          end\n        end\n      rescue e\n        if throw_errors\n          raise(\"DMXGUS '#{directory.name}' IS INVALID\\n#{e}\")\n        end\n        invalid_lump_found = true\n      end\n    end\n\n    if !directory_read\n      begin\n        if Playpal.is_playpal?(directory.name)\n          file.read_at(directory.file_pos, directory.size) do |io|\n            wad.playpal = Playpal.parse(io)\n            directory_read = true\n          end\n        end\n      rescue e\n        if throw_errors\n          raise(\"PLAYPAL '#{directory.name}' IS INVALID\\n#{e}\")\n        end\n        invalid_lump_found = true\n      end\n    end\n\n    if !directory_read\n      begin\n        if Colormap.is_colormap?(directory.name)\n          file.read_at(directory.file_pos, directory.size) do |io|\n            wad.colormap = Colormap.parse(io)\n            directory_read = true\n          end\n        end\n      rescue e\n        if throw_errors\n          raise(\"COLORMAP '#{directory.name}' IS INVALID\\n#{e}\")\n        end\n        invalid_lump_found = true\n      end\n    end\n\n    if !directory_read\n      begin\n        if TextureX.is_texturex?(directory.name)\n          file.read_at(directory.file_pos, directory.size) do |io|\n            wad.texmaps[directory.name] = TextureX.parse(io)\n            directory_read = true\n          end\n        end\n      rescue e\n        if throw_errors\n          raise(\"TEXTURE MAP '#{directory.name}' IS INVALID\\n#{e}\")\n        end\n        invalid_lump_found = true\n      end\n    end\n\n    if !directory_read\n      begin\n        if EnDoom.is_endoom?(directory.name)\n          file.read_at(directory.file_pos, directory.size) do |io|\n            wad.endoom = EnDoom.parse(io)\n            directory_read = true\n          end\n        end\n      rescue e\n        if throw_errors\n          raise(\"ENDOOM '#{directory.name}' IS INVALID\\n#{e}\")\n        end\n        invalid_lump_found = true\n      end\n    end\n\n    if !directory_read\n      begin\n        if Pnames.is_pnames?(directory.name)\n          file.read_at(directory.file_pos, directory.size) do |io|\n            wad.pnames = Pnames.parse(io)\n            directory_read = true\n          end\n        end\n      rescue e\n        if throw_errors\n          raise(\"PNAMES '#{directory.name}' IS INVALID\\n#{e}\")\n        end\n        invalid_lump_found = true\n      end\n    end\n\n    if !directory_read\n      begin\n        if Graphic.is_sprite_mark_start?(directory.name)\n          sprite_directory_end_reached = false\n          while !(sprite_directory_end_reached)\n            d_index = d_index + 1\n\n            directory_start = wad.directory_pointer + (d_index * Directory::SIZE)\n\n            if (directory_start + Directory::SIZE) > (wad.directory_pointer + (wad.directories_count * Directory::SIZE))\n              break\n            end\n\n            file.read_at(directory_start, Directory::SIZE) do |io|\n\n              directory = Directory.read(io, start_pos)\n              wad.directories << directory\n\n\n\n              if Graphic.is_sprite_mark_end?(directory.name)\n                sprite_directory_end_reached = true\n                break\n              end\n\n              (Graphic.parse(file, directory.file_pos, directory.size)).try do |graphic|\n                wad.sprites[directory.name] = graphic\n              end\n            end\n          end\n          directory_read = true\n        end\n      rescue e\n        if throw_errors\n          raise(\"SPRITE '#{directory.name}' IS INVALID\\n#{e}\")\n        end\n        invalid_lump_found = true\n      end\n    end\n\n    if !directory_read\n      begin\n        if Flat.is_flat_mark_start?(directory.name)\n          flat_directory_end_reached = false\n          while !(flat_directory_end_reached)\n            d_index = d_index + 1\n\n            directory_start = wad.directory_pointer + (d_index * Directory::SIZE)\n\n            if (directory_start + Directory::SIZE) > (wad.directory_pointer + (wad.directories_count * Directory::SIZE))\n              break\n            end\n\n            file.read_at(directory_start, Directory::SIZE) do |io|\n\n              directory = Directory.read(io, start_pos)\n              wad.directories << directory\n\n\n\n              if Flat.is_flat_mark_end?(directory.name)\n                flat_directory_end_reached = true\n                break\n              end\n\n              file.read_at(directory.file_pos, directory.size) do |io|\n                begin\n                  wad.flats[directory.name] = Flat.parse(io)\n                rescue e : IO::EOFError\n                end\n              end\n            end\n          end\n          directory_read = true\n        end\n      rescue e\n        if throw_errors\n          raise(\"FLAT '#{directory.name}' IS INVALID\\n#{e}\")\n        end\n        invalid_lump_found = true\n      end\n    end\n\n    if !directory_read\n      begin\n        (Graphic.parse(file, directory.file_pos, directory.size)).try do |graphic|\n          wad.graphics[directory.name] = graphic\n          directory_read = true\n        end\n      rescue e\n        if throw_errors\n          raise(\"GRAPHIC '#{directory.name}' IS INVALID\\n#{e}\")\n        end\n        invalid_lump_found = true\n      end\n    end\n\n    if !directory_read\n      begin\n        file.read_at(directory.file_pos, directory.size) do |is_demo_io|\n          if Demo.is_demo?(is_demo_io)\n            file.read_at(directory.file_pos, directory.size) do |io|\n              wad.demos[directory.name] = Demo.parse(io)\n              directory_read = true\n            end\n          end\n        end\n      rescue e\n        if throw_errors\n          raise(\"DEMO '#{directory.name}' IS INVALID\\n#{e}\")\n        end\n        invalid_lump_found = true\n      end\n    end\n\n\n    d_index = d_index + 1\n  end\nend\n\n\nwad\n"},"external_var":false},{"html_id":"read!(file:IO):WAD-class-method","name":"read!","doc":"Reads in a WAD file given the *io*\nbut returns all errors thrown when parsing lumps:\n\n```\nFile.open(\"Path/To/Wad\") do |file|\n  my_wad = WAD.read!(file)\nend\n```","summary":"<p>Reads in a WAD file given the <em>io</em> but returns all errors thrown when parsing lumps:</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"IO"}],"args_string":"(file : IO) : WAD","args_html":"(file : IO) : <a href=\"WAD.html\">WAD</a>","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":720,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L720"},"def":{"name":"read!","args":[{"name":"file","external_name":"file","restriction":"IO"}],"return_type":"WAD","visibility":"Public","body":"return self.read(file, throw_errors: true)"},"external_var":false},{"html_id":"read!(filename:Path|String):WAD-class-method","name":"read!","doc":"Reads in a WAD file given the *filename*\nbut returns all errors thrown when parsing lumps:\n\n```\nmy_wad = WAD.read!(\"Path/To/Wad\")\n```","summary":"<p>Reads in a WAD file given the <em>filename</em> but returns all errors thrown when parsing lumps:</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"Path | String"}],"args_string":"(filename : Path | String) : WAD","args_html":"(filename : Path | String) : <a href=\"WAD.html\">WAD</a>","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":730,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L730"},"def":{"name":"read!","args":[{"name":"filename","external_name":"filename","restriction":"Path | String"}],"return_type":"WAD","visibility":"Public","body":"File.open(filename) do |file|\n  return read!(file)\nend\n\nraise(\"WAD invalid\")\n"},"external_var":false}],"instance_methods":[{"html_id":"add(name:String,type:AddTypes,file:Path|String)-instance-method","name":"add","doc":"Allows easy parsing of lumps into the WAD\n\n```\nmy_wad = WAD.new(WAD::Type::Internal)\n\nmy_wad.add(\"MyTest\", WAD::AddTypes::Sound, \"Path/To/SoundTest.lmp\")\n```","summary":"<p>Allows easy parsing of lumps into the WAD</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"type","external_name":"type","restriction":"AddTypes"},{"name":"file","external_name":"file","restriction":"Path | String"}],"args_string":"(name : String, type : AddTypes, file : Path | String)","args_html":"(name : String, type : <a href=\"WAD/AddTypes.html\">AddTypes</a>, file : Path | String)","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":243,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L243"},"def":{"name":"add","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"type","external_name":"type","restriction":"AddTypes"},{"name":"file","external_name":"file","restriction":"Path | String"}],"visibility":"Public","body":"File.open(file) do |io|\n  add(name, type, io)\nend"},"external_var":false},{"html_id":"add(name:String,type:AddTypes,file:IO)-instance-method","name":"add","doc":"Allows easy parsing of lumps into the WAD\n\n```\nmy_wad = WAD.new(WAD::Type::Internal)\n\nFile.open(\"Path/To/Sound.lmp\") do |file|\n  my_wad.add(\"MyTest\", WAD::AddTypes::Sound, file)\nend\n```","summary":"<p>Allows easy parsing of lumps into the WAD</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"type","external_name":"type","restriction":"AddTypes"},{"name":"file","external_name":"file","restriction":"IO"}],"args_string":"(name : String, type : AddTypes, file : IO)","args_html":"(name : String, type : <a href=\"WAD/AddTypes.html\">AddTypes</a>, file : IO)","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":259,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L259"},"def":{"name":"add","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"type","external_name":"type","restriction":"AddTypes"},{"name":"file","external_name":"file","restriction":"IO"}],"visibility":"Public","body":"case type\nwhen AddTypes::PcSound\n  pcsounds[name] = PcSound.parse(file)\n  new_dir(name)\nwhen AddTypes::Sound\n  sounds[name] = Sound.parse(file)\n  new_dir(name)\nwhen AddTypes::Music\n  music[name] = Music.parse(file)\n  new_dir(name)\nwhen AddTypes::TextureX\n  texmaps[name] = TextureX.parse(file)\n  new_dir(name)\nwhen AddTypes::Graphic\n  (Graphic.parse(file)).try do |graphic|\n    graphics[name] = graphic\n    new_dir(name)\n  end\nwhen AddTypes::Flat\n  flats[name] = Flat.parse(file)\n  new_dir(name)\nwhen AddTypes::Demo\n  demos[name] = Demo.parse(file)\n  new_dir(name)\nelse\n  raise(\"#{type} IS AN INVALID TYPE\")\nend"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":124,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L124"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"colormap:Colormap-instance-method","name":"colormap","doc":"The Colormap in the WAD.","summary":"<p>The Colormap in the WAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":102,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L102"},"def":{"name":"colormap","return_type":"Colormap","visibility":"Public","body":"@colormap"},"external_var":false},{"html_id":"colormap=(colormap:Colormap)-instance-method","name":"colormap=","doc":"The Colormap in the WAD.","summary":"<p>The Colormap in the WAD.</p>","abstract":false,"args":[{"name":"colormap","external_name":"colormap","restriction":"Colormap"}],"args_string":"(colormap : Colormap)","args_html":"(colormap : <a href=\"WAD/Colormap.html\">Colormap</a>)","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":102,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L102"},"def":{"name":"colormap=","args":[{"name":"colormap","external_name":"colormap","restriction":"Colormap"}],"visibility":"Public","body":"@colormap = colormap"},"external_var":false},{"html_id":"demos:Hash(String,Demo)-instance-method","name":"demos","doc":"Array of Demos in the WAD.","summary":"<p>Array of Demos in the WAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":116,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L116"},"def":{"name":"demos","return_type":"Hash(String, Demo)","visibility":"Public","body":"@demos"},"external_var":false},{"html_id":"demos=(demos:Hash(String,Demo))-instance-method","name":"demos=","doc":"Array of Demos in the WAD.","summary":"<p>Array of Demos in the WAD.</p>","abstract":false,"args":[{"name":"demos","external_name":"demos","restriction":"Hash(String, Demo)"}],"args_string":"(demos : Hash(String, Demo))","args_html":"(demos : Hash(String, <a href=\"WAD/Demo.html\">Demo</a>))","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":116,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L116"},"def":{"name":"demos=","args":[{"name":"demos","external_name":"demos","restriction":"Hash(String, Demo)"}],"visibility":"Public","body":"@demos = demos"},"external_var":false},{"html_id":"directories:Array(Directory)-instance-method","name":"directories","doc":"Array of all directories in the WAD.","summary":"<p>Array of all directories in the WAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":118,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L118"},"def":{"name":"directories","return_type":"Array(Directory)","visibility":"Public","body":"@directories"},"external_var":false},{"html_id":"directories=(directories:Array(Directory))-instance-method","name":"directories=","doc":"Array of all directories in the WAD.","summary":"<p>Array of all directories in the WAD.</p>","abstract":false,"args":[{"name":"directories","external_name":"directories","restriction":"Array(Directory)"}],"args_string":"(directories : Array(Directory))","args_html":"(directories : Array(<a href=\"WAD/Directory.html\">Directory</a>))","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":118,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L118"},"def":{"name":"directories=","args":[{"name":"directories","external_name":"directories","restriction":"Array(Directory)"}],"visibility":"Public","body":"@directories = directories"},"external_var":false},{"html_id":"directories_count:UInt32-instance-method","name":"directories_count","doc":"An integer specifying the number of lumps in the WAD.","summary":"<p>An integer specifying the number of lumps in the WAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":84,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L84"},"def":{"name":"directories_count","return_type":"UInt32","visibility":"Public","body":"@directories_count"},"external_var":false},{"html_id":"directories_count=(directories_count:UInt32)-instance-method","name":"directories_count=","doc":"An integer specifying the number of lumps in the WAD.","summary":"<p>An integer specifying the number of lumps in the WAD.</p>","abstract":false,"args":[{"name":"directories_count","external_name":"directories_count","restriction":"UInt32"}],"args_string":"(directories_count : UInt32)","args_html":"(directories_count : UInt32)","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":84,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L84"},"def":{"name":"directories_count=","args":[{"name":"directories_count","external_name":"directories_count","restriction":"UInt32"}],"visibility":"Public","body":"@directories_count = directories_count"},"external_var":false},{"html_id":"directory_pointer:UInt32-instance-method","name":"directory_pointer","doc":"An integer holding a pointer to the location of the directory.","summary":"<p>An integer holding a pointer to the location of the directory.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":86,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L86"},"def":{"name":"directory_pointer","return_type":"UInt32","visibility":"Public","body":"@directory_pointer"},"external_var":false},{"html_id":"directory_pointer=(directory_pointer:UInt32)-instance-method","name":"directory_pointer=","doc":"An integer holding a pointer to the location of the directory.","summary":"<p>An integer holding a pointer to the location of the directory.</p>","abstract":false,"args":[{"name":"directory_pointer","external_name":"directory_pointer","restriction":"UInt32"}],"args_string":"(directory_pointer : UInt32)","args_html":"(directory_pointer : UInt32)","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":86,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L86"},"def":{"name":"directory_pointer=","args":[{"name":"directory_pointer","external_name":"directory_pointer","restriction":"UInt32"}],"visibility":"Public","body":"@directory_pointer = directory_pointer"},"external_var":false},{"html_id":"dmxgus:Dmxgus-instance-method","name":"dmxgus","doc":"The Dmxgus in the WAD.","summary":"<p>The Dmxgus in the WAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":98,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L98"},"def":{"name":"dmxgus","return_type":"Dmxgus","visibility":"Public","body":"@dmxgus"},"external_var":false},{"html_id":"dmxgus=(dmxgus:Dmxgus)-instance-method","name":"dmxgus=","doc":"The Dmxgus in the WAD.","summary":"<p>The Dmxgus in the WAD.</p>","abstract":false,"args":[{"name":"dmxgus","external_name":"dmxgus","restriction":"Dmxgus"}],"args_string":"(dmxgus : Dmxgus)","args_html":"(dmxgus : <a href=\"WAD/Dmxgus.html\">Dmxgus</a>)","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":98,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L98"},"def":{"name":"dmxgus=","args":[{"name":"dmxgus","external_name":"dmxgus","restriction":"Dmxgus"}],"visibility":"Public","body":"@dmxgus = dmxgus"},"external_var":false},{"html_id":"endoom:EnDoom-instance-method","name":"endoom","doc":"The Endoom in the WAD.","summary":"<p>The Endoom in the WAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":104,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L104"},"def":{"name":"endoom","return_type":"EnDoom","visibility":"Public","body":"@endoom"},"external_var":false},{"html_id":"endoom=(endoom:EnDoom)-instance-method","name":"endoom=","doc":"The Endoom in the WAD.","summary":"<p>The Endoom in the WAD.</p>","abstract":false,"args":[{"name":"endoom","external_name":"endoom","restriction":"EnDoom"}],"args_string":"(endoom : EnDoom)","args_html":"(endoom : <a href=\"WAD/EnDoom.html\">EnDoom</a>)","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":104,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L104"},"def":{"name":"endoom=","args":[{"name":"endoom","external_name":"endoom","restriction":"EnDoom"}],"visibility":"Public","body":"@endoom = endoom"},"external_var":false},{"html_id":"flats:Hash(String,Flat)-instance-method","name":"flats","doc":"Array of Flats in the WAD.","summary":"<p>Array of Flats in the WAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":114,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L114"},"def":{"name":"flats","return_type":"Hash(String, Flat)","visibility":"Public","body":"@flats"},"external_var":false},{"html_id":"flats=(flats:Hash(String,Flat))-instance-method","name":"flats=","doc":"Array of Flats in the WAD.","summary":"<p>Array of Flats in the WAD.</p>","abstract":false,"args":[{"name":"flats","external_name":"flats","restriction":"Hash(String, Flat)"}],"args_string":"(flats : Hash(String, Flat))","args_html":"(flats : Hash(String, <a href=\"WAD/Flat.html\">Flat</a>))","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":114,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L114"},"def":{"name":"flats=","args":[{"name":"flats","external_name":"flats","restriction":"Hash(String, Flat)"}],"visibility":"Public","body":"@flats = flats"},"external_var":false},{"html_id":"genmidi:Genmidi-instance-method","name":"genmidi","doc":"The Genmidi in the WAD.","summary":"<p>The Genmidi in the WAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":96,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L96"},"def":{"name":"genmidi","return_type":"Genmidi","visibility":"Public","body":"@genmidi"},"external_var":false},{"html_id":"genmidi=(genmidi:Genmidi)-instance-method","name":"genmidi=","doc":"The Genmidi in the WAD.","summary":"<p>The Genmidi in the WAD.</p>","abstract":false,"args":[{"name":"genmidi","external_name":"genmidi","restriction":"Genmidi"}],"args_string":"(genmidi : Genmidi)","args_html":"(genmidi : <a href=\"WAD/Genmidi.html\">Genmidi</a>)","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":96,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L96"},"def":{"name":"genmidi=","args":[{"name":"genmidi","external_name":"genmidi","restriction":"Genmidi"}],"visibility":"Public","body":"@genmidi = genmidi"},"external_var":false},{"html_id":"graphics:Hash(String,Graphic)-instance-method","name":"graphics","doc":"Array of Graphics and patches in the WAD.","summary":"<p>Array of Graphics and patches in the WAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":110,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L110"},"def":{"name":"graphics","return_type":"Hash(String, Graphic)","visibility":"Public","body":"@graphics"},"external_var":false},{"html_id":"graphics=(graphics:Hash(String,Graphic))-instance-method","name":"graphics=","doc":"Array of Graphics and patches in the WAD.","summary":"<p>Array of Graphics and patches in the WAD.</p>","abstract":false,"args":[{"name":"graphics","external_name":"graphics","restriction":"Hash(String, Graphic)"}],"args_string":"(graphics : Hash(String, Graphic))","args_html":"(graphics : Hash(String, <a href=\"WAD/Graphic.html\">Graphic</a>))","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":110,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L110"},"def":{"name":"graphics=","args":[{"name":"graphics","external_name":"graphics","restriction":"Hash(String, Graphic)"}],"visibility":"Public","body":"@graphics = graphics"},"external_var":false},{"html_id":"maps:Hash(String,Map)-instance-method","name":"maps","doc":"Array of maps in the WAD.","summary":"<p>Array of maps in the WAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":88,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L88"},"def":{"name":"maps","return_type":"Hash(String, Map)","visibility":"Public","body":"@maps"},"external_var":false},{"html_id":"maps=(maps:Hash(String,Map))-instance-method","name":"maps=","doc":"Array of maps in the WAD.","summary":"<p>Array of maps in the WAD.</p>","abstract":false,"args":[{"name":"maps","external_name":"maps","restriction":"Hash(String, Map)"}],"args_string":"(maps : Hash(String, Map))","args_html":"(maps : Hash(String, <a href=\"WAD/Map.html\">Map</a>))","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":88,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L88"},"def":{"name":"maps=","args":[{"name":"maps","external_name":"maps","restriction":"Hash(String, Map)"}],"visibility":"Public","body":"@maps = maps"},"external_var":false},{"html_id":"music:Hash(String,Music)-instance-method","name":"music","doc":"Array of music in the WAD.","summary":"<p>Array of music in the WAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":94,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L94"},"def":{"name":"music","return_type":"Hash(String, Music)","visibility":"Public","body":"@music"},"external_var":false},{"html_id":"music=(music:Hash(String,Music))-instance-method","name":"music=","doc":"Array of music in the WAD.","summary":"<p>Array of music in the WAD.</p>","abstract":false,"args":[{"name":"music","external_name":"music","restriction":"Hash(String, Music)"}],"args_string":"(music : Hash(String, Music))","args_html":"(music : Hash(String, <a href=\"WAD/Music.html\">Music</a>))","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":94,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L94"},"def":{"name":"music=","args":[{"name":"music","external_name":"music","restriction":"Hash(String, Music)"}],"visibility":"Public","body":"@music = music"},"external_var":false},{"html_id":"new_dir(name:String)-instance-method","name":"new_dir","doc":"Creates a new empty directory with *name* and puts it onto the list of directories.\nWARNING: Directory will not work if *name* is not the correct name of the data\n\n```\nFile.open(\"Path/To/MySound.lmp\", \"w+\") do |file|\n  my_wad.[\"MYSOUND\"] = WAD::Sound.parse(file)\n  my_wad.new_dir(\"MYSOUND\")\nend\n```","summary":"<p>Creates a new empty directory with <em>name</em> and puts it onto the list of directories.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":145,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L145"},"def":{"name":"new_dir","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"directory = WAD::Directory.new\ndirectory.name = name\ndirectories << directory\n"},"external_var":false},{"html_id":"pcsounds:Hash(String,PcSound)-instance-method","name":"pcsounds","doc":"Array of speaker sounds in the WAD.","summary":"<p>Array of speaker sounds in the WAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":90,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L90"},"def":{"name":"pcsounds","return_type":"Hash(String, PcSound)","visibility":"Public","body":"@pcsounds"},"external_var":false},{"html_id":"pcsounds=(pcsounds:Hash(String,PcSound))-instance-method","name":"pcsounds=","doc":"Array of speaker sounds in the WAD.","summary":"<p>Array of speaker sounds in the WAD.</p>","abstract":false,"args":[{"name":"pcsounds","external_name":"pcsounds","restriction":"Hash(String, PcSound)"}],"args_string":"(pcsounds : Hash(String, PcSound))","args_html":"(pcsounds : Hash(String, <a href=\"WAD/PcSound.html\">PcSound</a>))","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":90,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L90"},"def":{"name":"pcsounds=","args":[{"name":"pcsounds","external_name":"pcsounds","restriction":"Hash(String, PcSound)"}],"visibility":"Public","body":"@pcsounds = pcsounds"},"external_var":false},{"html_id":"playpal:Playpal-instance-method","name":"playpal","doc":"The Playpal in the WAD.","summary":"<p>The Playpal in the WAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":100,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L100"},"def":{"name":"playpal","return_type":"Playpal","visibility":"Public","body":"@playpal"},"external_var":false},{"html_id":"playpal=(playpal:Playpal)-instance-method","name":"playpal=","doc":"The Playpal in the WAD.","summary":"<p>The Playpal in the WAD.</p>","abstract":false,"args":[{"name":"playpal","external_name":"playpal","restriction":"Playpal"}],"args_string":"(playpal : Playpal)","args_html":"(playpal : <a href=\"WAD/Playpal.html\">Playpal</a>)","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":100,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L100"},"def":{"name":"playpal=","args":[{"name":"playpal","external_name":"playpal","restriction":"Playpal"}],"visibility":"Public","body":"@playpal = playpal"},"external_var":false},{"html_id":"pnames:Pnames-instance-method","name":"pnames","doc":"The Pnames in the WAD.","summary":"<p>The Pnames in the WAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":108,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L108"},"def":{"name":"pnames","return_type":"Pnames","visibility":"Public","body":"@pnames"},"external_var":false},{"html_id":"pnames=(pnames:Pnames)-instance-method","name":"pnames=","doc":"The Pnames in the WAD.","summary":"<p>The Pnames in the WAD.</p>","abstract":false,"args":[{"name":"pnames","external_name":"pnames","restriction":"Pnames"}],"args_string":"(pnames : Pnames)","args_html":"(pnames : <a href=\"WAD/Pnames.html\">Pnames</a>)","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":108,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L108"},"def":{"name":"pnames=","args":[{"name":"pnames","external_name":"pnames","restriction":"Pnames"}],"visibility":"Public","body":"@pnames = pnames"},"external_var":false},{"html_id":"rename_lump(to_rename:String,name:String):Bool-instance-method","name":"rename_lump","doc":"Renames a lump that can be renamed in the WAD\nUsually used when renaming a directory","summary":"<p>Renames a lump that can be renamed in the WAD Usually used when renaming a directory</p>","abstract":false,"args":[{"name":"to_rename","external_name":"to_rename","restriction":"String"},{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(to_rename : String, name : String) : Bool","args_html":"(to_rename : String, name : String) : Bool","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":174,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L174"},"def":{"name":"rename_lump","args":[{"name":"to_rename","external_name":"to_rename","restriction":"String"},{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"case what_is?(to_rename)\nwhen \"Map\"\n  maps[name] = maps[to_rename]\n  maps.delete(to_rename)\n  return true\nwhen \"PcSound\"\n  pcsounds[name] = pcsounds[to_rename]\n  pcsounds.delete(to_rename)\n  return true\nwhen \"Sound\"\n  sounds[name] = sounds[to_rename]\n  sounds.delete(to_rename)\n  return true\nwhen \"Music\"\n  music[name] = music[to_rename]\n  music.delete(to_rename)\n  return true\nwhen \"TexMap\"\n  texmaps[name] = texmaps[to_rename]\n  texmaps.delete(to_rename)\n  return true\nwhen \"Graphic\"\n  graphics[name] = graphics[to_rename]\n  graphics.delete(to_rename)\n  return true\nwhen \"Sprite\"\n  sprites[name] = sprites[to_rename]\n  sprites.delete(to_rename)\n  return true\nwhen \"Flat\"\n  flats[name] = flats[to_rename]\n  flats.delete(to_rename)\n  return true\nwhen \"Demo\"\n  demos[name] = demos[to_rename]\n  demos.delete(to_rename)\n  return true\nelse\n  return false\nend"},"external_var":false},{"html_id":"sounds:Hash(String,Sound)-instance-method","name":"sounds","doc":"Array of sounds in the WAD.","summary":"<p>Array of sounds in the WAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":92,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L92"},"def":{"name":"sounds","return_type":"Hash(String, Sound)","visibility":"Public","body":"@sounds"},"external_var":false},{"html_id":"sounds=(sounds:Hash(String,Sound))-instance-method","name":"sounds=","doc":"Array of sounds in the WAD.","summary":"<p>Array of sounds in the WAD.</p>","abstract":false,"args":[{"name":"sounds","external_name":"sounds","restriction":"Hash(String, Sound)"}],"args_string":"(sounds : Hash(String, Sound))","args_html":"(sounds : Hash(String, <a href=\"WAD/Sound.html\">Sound</a>))","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":92,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L92"},"def":{"name":"sounds=","args":[{"name":"sounds","external_name":"sounds","restriction":"Hash(String, Sound)"}],"visibility":"Public","body":"@sounds = sounds"},"external_var":false},{"html_id":"sprites:Hash(String,Graphic)-instance-method","name":"sprites","doc":"Array of Sprites in the WAD.","summary":"<p>Array of Sprites in the WAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":112,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L112"},"def":{"name":"sprites","return_type":"Hash(String, Graphic)","visibility":"Public","body":"@sprites"},"external_var":false},{"html_id":"sprites=(sprites:Hash(String,Graphic))-instance-method","name":"sprites=","doc":"Array of Sprites in the WAD.","summary":"<p>Array of Sprites in the WAD.</p>","abstract":false,"args":[{"name":"sprites","external_name":"sprites","restriction":"Hash(String, Graphic)"}],"args_string":"(sprites : Hash(String, Graphic))","args_html":"(sprites : Hash(String, <a href=\"WAD/Graphic.html\">Graphic</a>))","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":112,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L112"},"def":{"name":"sprites=","args":[{"name":"sprites","external_name":"sprites","restriction":"Hash(String, Graphic)"}],"visibility":"Public","body":"@sprites = sprites"},"external_var":false},{"html_id":"texmaps:Hash(String,TextureX)-instance-method","name":"texmaps","doc":"Array of texture maps in the WAD.","summary":"<p>Array of texture maps in the WAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":106,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L106"},"def":{"name":"texmaps","return_type":"Hash(String, TextureX)","visibility":"Public","body":"@texmaps"},"external_var":false},{"html_id":"texmaps=(texmaps:Hash(String,TextureX))-instance-method","name":"texmaps=","doc":"Array of texture maps in the WAD.","summary":"<p>Array of texture maps in the WAD.</p>","abstract":false,"args":[{"name":"texmaps","external_name":"texmaps","restriction":"Hash(String, TextureX)"}],"args_string":"(texmaps : Hash(String, TextureX))","args_html":"(texmaps : Hash(String, <a href=\"WAD/TextureX.html\">TextureX</a>))","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":106,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L106"},"def":{"name":"texmaps=","args":[{"name":"texmaps","external_name":"texmaps","restriction":"Hash(String, TextureX)"}],"visibility":"Public","body":"@texmaps = texmaps"},"external_var":false},{"html_id":"type:Type-instance-method","name":"type","doc":"Type of WAD: Either Internal, IWAD, or Patch, PWAD.","summary":"<p>Type of WAD: Either Internal, IWAD, or Patch, PWAD.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":82,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L82"},"def":{"name":"type","return_type":"Type","visibility":"Public","body":"@type"},"external_var":false},{"html_id":"type=(type:Type)-instance-method","name":"type=","doc":"Type of WAD: Either Internal, IWAD, or Patch, PWAD.","summary":"<p>Type of WAD: Either Internal, IWAD, or Patch, PWAD.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"Type"}],"args_string":"(type : Type)","args_html":"(type : <a href=\"WAD/Type.html\">Type</a>)","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":82,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L82"},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"Type"}],"visibility":"Public","body":"@type = type"},"external_var":false},{"html_id":"what_is?(name:String):String-instance-method","name":"what_is?","doc":"Finds what a name is in the `WAD`\nUsually used to find what type a directory points to","summary":"<p>Finds what a name is in the <code><a href=\"WAD.html\">WAD</a></code> Usually used to find what type a directory points to</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : String","args_html":"(name : String) : String","location":{"filename":"src/wa-cr/wad/wad.cr","line_number":153,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L153"},"def":{"name":"what_is?","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"String","visibility":"Public","body":"if (maps.has_key?(name)) && (WAD::Map.is_map?(name))\n  return \"Map\"\nend\nif (pcsounds.has_key?(name)) && (WAD::PcSound.is_pcsound?(name))\n  return \"PcSound\"\nend\nif (sounds.has_key?(name)) && (WAD::Sound.is_sound?(name))\n  return \"Sound\"\nend\nif (music.has_key?(name)) && (WAD::Music.is_music?(name))\n  return \"Music\"\nend\nif WAD::Genmidi.is_genmidi?(name)\n  return \"Genmidi\"\nend\nif WAD::Dmxgus.is_dmxgus?(name)\n  return \"Dmxgus\"\nend\nif WAD::Playpal.is_playpal?(name)\n  return \"Playpal\"\nend\nif WAD::Colormap.is_colormap?(name)\n  return \"Colormap\"\nend\nif WAD::EnDoom.is_endoom?(name)\n  return \"EnDoom\"\nend\nif (texmaps.has_key?(name)) && (WAD::TextureX.is_texturex?(name))\n  return \"TexMap\"\nend\nif WAD::Pnames.is_pnames?(name)\n  return \"Pnames\"\nend\nif graphics.has_key?(name)\n  return \"Graphic\"\nend\nif sprites.has_key?(name)\n  return \"Sprite\"\nend\nif flats.has_key?(name)\n  return \"Flat\"\nend\nif demos.has_key?(name)\n  return \"Demo\"\nend\nreturn \"Marker\"\n"},"external_var":false}],"types":[{"html_id":"wa-cr/WAD/AddTypes","path":"WAD/AddTypes.html","kind":"enum","full_name":"WAD::AddTypes","name":"AddTypes","abstract":false,"ancestors":[{"html_id":"wa-cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"wa-cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad.cr","line_number":225,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L225"}],"repository_name":"wa-cr","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"PcSound","name":"PcSound","value":"0"},{"id":"Sound","name":"Sound","value":"1"},{"id":"Music","name":"Music","value":"2"},{"id":"TextureX","name":"TextureX","value":"3"},{"id":"Graphic","name":"Graphic","value":"4"},{"id":"Flat","name":"Flat","value":"5"},{"id":"Demo","name":"Demo","value":"6"}],"namespace":{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"},"doc":"An enum for all types that can be added to the `WAD` by using `WAD#add`","summary":"<p>An enum for all types that can be added to the <code><a href=\"../WAD.html\">WAD</a></code> by using <code><a href=\"../WAD.html#add%28name%3AString%2Ctype%3AAddTypes%2Cfile%3APath%7CString%29-instance-method\">WAD#add</a></code></p>","instance_methods":[{"html_id":"demo?-instance-method","name":"demo?","doc":"Returns `true` if this enum value equals `Demo`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../WAD/AddTypes.html#Demo\">Demo</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":232,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L232"},"def":{"name":"demo?","visibility":"Public","body":"self == Demo"},"external_var":false},{"html_id":"flat?-instance-method","name":"flat?","doc":"Returns `true` if this enum value equals `Flat`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../WAD/AddTypes.html#Flat\">Flat</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":231,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L231"},"def":{"name":"flat?","visibility":"Public","body":"self == Flat"},"external_var":false},{"html_id":"graphic?-instance-method","name":"graphic?","doc":"Returns `true` if this enum value equals `Graphic`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../WAD/AddTypes.html#Graphic\">Graphic</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":230,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L230"},"def":{"name":"graphic?","visibility":"Public","body":"self == Graphic"},"external_var":false},{"html_id":"music?-instance-method","name":"music?","doc":"Returns `true` if this enum value equals `Music`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../WAD/AddTypes.html#Music\">Music</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":228,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L228"},"def":{"name":"music?","visibility":"Public","body":"self == Music"},"external_var":false},{"html_id":"pc_sound?-instance-method","name":"pc_sound?","doc":"Returns `true` if this enum value equals `PcSound`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../WAD/AddTypes.html#PcSound\">PcSound</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":226,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L226"},"def":{"name":"pc_sound?","visibility":"Public","body":"self == PcSound"},"external_var":false},{"html_id":"sound?-instance-method","name":"sound?","doc":"Returns `true` if this enum value equals `Sound`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../WAD/AddTypes.html#Sound\">Sound</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":227,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L227"},"def":{"name":"sound?","visibility":"Public","body":"self == Sound"},"external_var":false},{"html_id":"texture_x?-instance-method","name":"texture_x?","doc":"Returns `true` if this enum value equals `TextureX`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../WAD/AddTypes.html#TextureX\">TextureX</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":229,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L229"},"def":{"name":"texture_x?","visibility":"Public","body":"self == TextureX"},"external_var":false}]},{"html_id":"wa-cr/WAD/Colormap","path":"WAD/Colormap.html","kind":"class","full_name":"WAD::Colormap","name":"Colormap","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/WritingAdditions/Colormap","kind":"module","full_name":"WritingAdditions::Colormap","name":"Colormap"},{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":85,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L85"},{"filename":"src/write.cr","line_number":350,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L350"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"wa-cr/WritingAdditions/Colormap","kind":"module","full_name":"WritingAdditions::Colormap","name":"Colormap"}],"namespace":{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"},"doc":"Map to adjust pixel values for reduced brightness.","summary":"<p>Map to adjust pixel values for reduced brightness.</p>","class_methods":[{"html_id":"is_colormap?(name:String)-class-method","name":"is_colormap?","doc":"Checks to see if *name* is \"COLORMAP\"\n\nReturns true if the name is a colormap:\n```\ncolormap_name = \"COLORMAP\"\nif WAD::Colormap.is_colormap?(genmidi_name)\n  puts \"Is a ColorMap\"\nelse\n  puts \"Is not a ColorMap\"\nend\n```","summary":"<p>Checks to see if <em>name</em> is &quot;COLORMAP&quot;</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":147,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L147"},"def":{"name":"is_colormap?","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"!(!(name =~ (/^COLORMAP/)))"},"external_var":false}],"constructors":[{"html_id":"parse(filename:String|Path):Colormap-class-method","name":"parse","doc":"Parses a colormap file given the filename\n\nOpens a colormap file and parses it:\n```\nmy_colormap = WAD::Colormap.parse(\"Path/To/Colormap\")\n```","summary":"<p>Parses a colormap file given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Colormap","args_html":"(filename : String | Path) : <a href=\"../WAD/Colormap.html\">Colormap</a>","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":105,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L105"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Colormap","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file)\nend\n\nraise(\"Colormap invalid\")\n"},"external_var":false},{"html_id":"parse(io:IO):Colormap-class-method","name":"parse","doc":"Parses a colormap file given the io\n\nOpens a colormap io and parses it:\n```\nFile.open(\"Path/To/Colormap\") do |file|\n  my_colormap = WAD::Colormap.parse(file)\nend\n```","summary":"<p>Parses a colormap file given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Colormap","args_html":"(io : IO) : <a href=\"../WAD/Colormap.html\">Colormap</a>","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":121,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L121"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Colormap","visibility":"Public","body":"colormap = Colormap.new\namount_of_tables = 34\nlength_of_table = 256\n\namount_of_tables.times do\n  table = Table.new\n  length_of_table.times do\n    table.table << (io.read_bytes(UInt8, IO::ByteFormat::LittleEndian))\n  end\n  colormap.tables << table\nend\ncolormap\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":87,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L87"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"tables:Array(Table)-instance-method","name":"tables","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":89,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L89"},"def":{"name":"tables","return_type":"Array(Table)","visibility":"Public","body":"@tables"},"external_var":false},{"html_id":"tables=(tables:Array(Table))-instance-method","name":"tables=","abstract":false,"args":[{"name":"tables","external_name":"tables","restriction":"Array(Table)"}],"args_string":"(tables : Array(Table))","args_html":"(tables : Array(<a href=\"../WAD/Colormap/Table.html\">Table</a>))","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":89,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L89"},"def":{"name":"tables=","args":[{"name":"tables","external_name":"tables","restriction":"Array(Table)"}],"visibility":"Public","body":"@tables = tables"},"external_var":false}],"types":[{"html_id":"wa-cr/WAD/Colormap/Table","path":"WAD/Colormap/Table.html","kind":"class","full_name":"WAD::Colormap::Table","name":"Table","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":92,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L92"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/Colormap","kind":"class","full_name":"WAD::Colormap","name":"Colormap"},"doc":"A colormap containing it's table's data","summary":"<p>A colormap containing it's table's data</p>","instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":94,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L94"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"table:Array(UInt8)-instance-method","name":"table","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":96,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L96"},"def":{"name":"table","return_type":"Array(UInt8)","visibility":"Public","body":"@table"},"external_var":false},{"html_id":"table=(table:Array(UInt8))-instance-method","name":"table=","abstract":false,"args":[{"name":"table","external_name":"table","restriction":"Array(UInt8)"}],"args_string":"(table : Array(UInt8))","args_html":"(table : Array(UInt8))","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":96,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L96"},"def":{"name":"table=","args":[{"name":"table","external_name":"table","restriction":"Array(UInt8)"}],"visibility":"Public","body":"@table = table"},"external_var":false}]}]},{"html_id":"wa-cr/WAD/Demo","path":"WAD/Demo.html","kind":"class","full_name":"WAD::Demo","name":"Demo","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/WritingAdditions/Demo","kind":"module","full_name":"WritingAdditions::Demo","name":"Demo"},{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":3,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L3"},{"filename":"src/write.cr","line_number":310,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L310"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"wa-cr/WritingAdditions/Demo","kind":"module","full_name":"WritingAdditions::Demo","name":"Demo"}],"namespace":{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"},"doc":"A doom demo which saves player input states","summary":"<p>A doom demo which saves player input states</p>","class_methods":[{"html_id":"is_demo?(io:IO)-class-method","name":"is_demo?","doc":"Checks if the demo is of doom version 1,9\n\nReturns true if an io is a demo:\n```\nFile.open(\"Path/To/Demo\") do |file|\n  if WAD::Demo.is_demo(file)\n    puts \"Is Demo\"\n  else\n    puts \"Is not Demo\"\n  end\n```","summary":"<p>Checks if the demo is of doom version 1,9</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":173,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L173"},"def":{"name":"is_demo?","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"begin\n  return 109 == (io.read_bytes(UInt8, IO::ByteFormat::LittleEndian))\nrescue e : IO::EOFError\n  return false\nend"},"external_var":false}],"constructors":[{"html_id":"parse(filename:String|Path):Demo-class-method","name":"parse","doc":"Parses an file in a demo format\n\nReads an file and puts out a demo:\n```\nmy_demo = WAD::Demo.parse(\"Path/To/Demo\")\n```","summary":"<p>Parses an file in a demo format</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Demo","args_html":"(filename : String | Path) : <a href=\"../WAD/Demo.html\">Demo</a>","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":87,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L87"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Demo","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file)\nend\n\nraise(\"Demo invalid\")\n"},"external_var":false},{"html_id":"parse(io:IO):Demo-class-method","name":"parse","doc":"Parses an io in a demo format\n\nReads an io and puts out a demo:\n```\nFile.open(\"Path/To/Demo\") do |file|\n  my_demo = WAD::Demo.parse(file)\nend\n```","summary":"<p>Parses an io in a demo format</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Demo","args_html":"(io : IO) : <a href=\"../WAD/Demo.html\">Demo</a>","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":103,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L103"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Demo","visibility":"Public","body":"demo = Demo.new\n\ndemo.game_version = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\ndemo.skill_level = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\ndemo.episode = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\ndemo.map = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\ndemo.multiplayer_mode = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\ndemo.respawn = ((io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)) != 0)\ndemo.fast = ((io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)) != 0)\ndemo.nomonsters = ((io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)) != 0)\ndemo.player_pov = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\ndemo.player1 = ((io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)) == 1)\ndemo.player2 = ((io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)) == 1)\ndemo.player3 = ((io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)) == 1)\ndemo.player4 = ((io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)) == 1)\n\nwhile (start_byte = io.read_bytes(Int8, IO::ByteFormat::LittleEndian)) != -128\n  inputaction = InputAction.new\n\n  inputaction.movement_forward_back = start_byte\n  inputaction.strafing = io.read_bytes(Int8, IO::ByteFormat::LittleEndian)\n  inputaction.turning = io.read_bytes(Int8, IO::ByteFormat::LittleEndian)\n  inputaction.action = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n\n  action_bits = BitArray.new(8)\n\n  8.times do |time|\n    action_bits[time] = (inputaction.action.bit(7 - time)) == 1\n  end\n\n  inputaction.expanded_action.special_mode = action_bits[7]\n\n  if inputaction.expanded_action.special_mode\n    inputaction.expanded_action.shoot_pause = action_bits[0]\n    inputaction.expanded_action.interact_save = action_bits[1]\n\n    if inputaction.expanded_action.interact_save\n      if action_bits[2]\n        __temp_164 = inputaction.expanded_action\n        __temp_164.save_slot = __temp_164.save_slot + 1\n      end\n      if action_bits[3]\n        __temp_165 = inputaction.expanded_action\n        __temp_165.save_slot = __temp_165.save_slot + 2\n      end\n      if action_bits[4]\n        __temp_166 = inputaction.expanded_action\n        __temp_166.save_slot = __temp_166.save_slot + 4\n      end\n    end\n  else\n    inputaction.expanded_action.weapon_switch = action_bits[2]\n\n    if inputaction.expanded_action.weapon_switch\n      if action_bits[3]\n        __temp_167 = inputaction.expanded_action\n        __temp_167.weapon_slot = __temp_167.weapon_slot + 1\n      end\n      if action_bits[4]\n        __temp_168 = inputaction.expanded_action\n        __temp_168.weapon_slot = __temp_168.weapon_slot + 2\n      end\n      if action_bits[5]\n        __temp_169 = inputaction.expanded_action\n        __temp_169.weapon_slot = __temp_169.weapon_slot + 4\n      end\n    else\n      inputaction.expanded_action.interact_save = action_bits[1]\n      inputaction.expanded_action.shoot_pause = action_bits[0]\n    end\n  end\n  demo.input_actions << inputaction\nend\ndemo\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":5,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L5"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"episode:UInt8-instance-method","name":"episode","doc":"Always 1 for Doom 2","summary":"<p>Always 1 for Doom 2</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":12,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L12"},"def":{"name":"episode","return_type":"UInt8","visibility":"Public","body":"@episode"},"external_var":false},{"html_id":"episode=(episode:UInt8)-instance-method","name":"episode=","doc":"Always 1 for Doom 2","summary":"<p>Always 1 for Doom 2</p>","abstract":false,"args":[{"name":"episode","external_name":"episode","restriction":"UInt8"}],"args_string":"(episode : UInt8)","args_html":"(episode : UInt8)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":12,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L12"},"def":{"name":"episode=","args":[{"name":"episode","external_name":"episode","restriction":"UInt8"}],"visibility":"Public","body":"@episode = episode"},"external_var":false},{"html_id":"fast:Bool-instance-method","name":"fast","doc":"non-zero value implies use of -fast","summary":"<p>non-zero value implies use of -fast</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":20,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L20"},"def":{"name":"fast","return_type":"Bool","visibility":"Public","body":"@fast"},"external_var":false},{"html_id":"fast=(fast:Bool)-instance-method","name":"fast=","doc":"non-zero value implies use of -fast","summary":"<p>non-zero value implies use of -fast</p>","abstract":false,"args":[{"name":"fast","external_name":"fast","restriction":"Bool"}],"args_string":"(fast : Bool)","args_html":"(fast : Bool)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":20,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L20"},"def":{"name":"fast=","args":[{"name":"fast","external_name":"fast","restriction":"Bool"}],"visibility":"Public","body":"@fast = fast"},"external_var":false},{"html_id":"game_version:UInt8-instance-method","name":"game_version","doc":"109 for version 1.9","summary":"<p>109 for version 1.9</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":8,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L8"},"def":{"name":"game_version","return_type":"UInt8","visibility":"Public","body":"@game_version"},"external_var":false},{"html_id":"game_version=(game_version:UInt8)-instance-method","name":"game_version=","doc":"109 for version 1.9","summary":"<p>109 for version 1.9</p>","abstract":false,"args":[{"name":"game_version","external_name":"game_version","restriction":"UInt8"}],"args_string":"(game_version : UInt8)","args_html":"(game_version : UInt8)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":8,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L8"},"def":{"name":"game_version=","args":[{"name":"game_version","external_name":"game_version","restriction":"UInt8"}],"visibility":"Public","body":"@game_version = game_version"},"external_var":false},{"html_id":"input_actions:Array(InputAction)-instance-method","name":"input_actions","doc":"A series of player actions for each tic encoded in 4 bytes.","summary":"<p>A series of player actions for each tic encoded in 4 bytes.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":34,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L34"},"def":{"name":"input_actions","return_type":"Array(InputAction)","visibility":"Public","body":"@input_actions"},"external_var":false},{"html_id":"input_actions=(input_actions:Array(InputAction))-instance-method","name":"input_actions=","doc":"A series of player actions for each tic encoded in 4 bytes.","summary":"<p>A series of player actions for each tic encoded in 4 bytes.</p>","abstract":false,"args":[{"name":"input_actions","external_name":"input_actions","restriction":"Array(InputAction)"}],"args_string":"(input_actions : Array(InputAction))","args_html":"(input_actions : Array(<a href=\"../WAD/Demo/InputAction.html\">InputAction</a>))","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":34,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L34"},"def":{"name":"input_actions=","args":[{"name":"input_actions","external_name":"input_actions","restriction":"Array(InputAction)"}],"visibility":"Public","body":"@input_actions = input_actions"},"external_var":false},{"html_id":"map:UInt8-instance-method","name":"map","doc":"The map","summary":"<p>The map</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":14,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L14"},"def":{"name":"map","return_type":"UInt8","visibility":"Public","body":"@map"},"external_var":false},{"html_id":"map=(map:UInt8)-instance-method","name":"map=","doc":"The map","summary":"<p>The map</p>","abstract":false,"args":[{"name":"map","external_name":"map","restriction":"UInt8"}],"args_string":"(map : UInt8)","args_html":"(map : UInt8)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":14,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L14"},"def":{"name":"map=","args":[{"name":"map","external_name":"map","restriction":"UInt8"}],"visibility":"Public","body":"@map = map"},"external_var":false},{"html_id":"multiplayer_mode:UInt8-instance-method","name":"multiplayer_mode","doc":"1 means deathmatch, 2 altdeath, 0 is used for single-player or cooperative multi-player","summary":"<p>1 means deathmatch, 2 altdeath, 0 is used for single-player or cooperative multi-player</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":16,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L16"},"def":{"name":"multiplayer_mode","return_type":"UInt8","visibility":"Public","body":"@multiplayer_mode"},"external_var":false},{"html_id":"multiplayer_mode=(multiplayer_mode:UInt8)-instance-method","name":"multiplayer_mode=","doc":"1 means deathmatch, 2 altdeath, 0 is used for single-player or cooperative multi-player","summary":"<p>1 means deathmatch, 2 altdeath, 0 is used for single-player or cooperative multi-player</p>","abstract":false,"args":[{"name":"multiplayer_mode","external_name":"multiplayer_mode","restriction":"UInt8"}],"args_string":"(multiplayer_mode : UInt8)","args_html":"(multiplayer_mode : UInt8)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":16,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L16"},"def":{"name":"multiplayer_mode=","args":[{"name":"multiplayer_mode","external_name":"multiplayer_mode","restriction":"UInt8"}],"visibility":"Public","body":"@multiplayer_mode = multiplayer_mode"},"external_var":false},{"html_id":"nomonsters:Bool-instance-method","name":"nomonsters","doc":"non-zero value implies use of -nomonsters","summary":"<p>non-zero value implies use of -nomonsters</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":22,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L22"},"def":{"name":"nomonsters","return_type":"Bool","visibility":"Public","body":"@nomonsters"},"external_var":false},{"html_id":"nomonsters=(nomonsters:Bool)-instance-method","name":"nomonsters=","doc":"non-zero value implies use of -nomonsters","summary":"<p>non-zero value implies use of -nomonsters</p>","abstract":false,"args":[{"name":"nomonsters","external_name":"nomonsters","restriction":"Bool"}],"args_string":"(nomonsters : Bool)","args_html":"(nomonsters : Bool)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":22,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L22"},"def":{"name":"nomonsters=","args":[{"name":"nomonsters","external_name":"nomonsters","restriction":"Bool"}],"visibility":"Public","body":"@nomonsters = nomonsters"},"external_var":false},{"html_id":"player1:Bool-instance-method","name":"player1","doc":"Set to 1 if player 1 present","summary":"<p>Set to 1 if player 1 present</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":26,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L26"},"def":{"name":"player1","return_type":"Bool","visibility":"Public","body":"@player1"},"external_var":false},{"html_id":"player1=(player1:Bool)-instance-method","name":"player1=","doc":"Set to 1 if player 1 present","summary":"<p>Set to 1 if player 1 present</p>","abstract":false,"args":[{"name":"player1","external_name":"player1","restriction":"Bool"}],"args_string":"(player1 : Bool)","args_html":"(player1 : Bool)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":26,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L26"},"def":{"name":"player1=","args":[{"name":"player1","external_name":"player1","restriction":"Bool"}],"visibility":"Public","body":"@player1 = player1"},"external_var":false},{"html_id":"player2:Bool-instance-method","name":"player2","doc":"Set to 2 if player 1 present","summary":"<p>Set to 2 if player 1 present</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":28,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L28"},"def":{"name":"player2","return_type":"Bool","visibility":"Public","body":"@player2"},"external_var":false},{"html_id":"player2=(player2:Bool)-instance-method","name":"player2=","doc":"Set to 2 if player 1 present","summary":"<p>Set to 2 if player 1 present</p>","abstract":false,"args":[{"name":"player2","external_name":"player2","restriction":"Bool"}],"args_string":"(player2 : Bool)","args_html":"(player2 : Bool)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":28,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L28"},"def":{"name":"player2=","args":[{"name":"player2","external_name":"player2","restriction":"Bool"}],"visibility":"Public","body":"@player2 = player2"},"external_var":false},{"html_id":"player3:Bool-instance-method","name":"player3","doc":"Set to 3 if player 1 present","summary":"<p>Set to 3 if player 1 present</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":30,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L30"},"def":{"name":"player3","return_type":"Bool","visibility":"Public","body":"@player3"},"external_var":false},{"html_id":"player3=(player3:Bool)-instance-method","name":"player3=","doc":"Set to 3 if player 1 present","summary":"<p>Set to 3 if player 1 present</p>","abstract":false,"args":[{"name":"player3","external_name":"player3","restriction":"Bool"}],"args_string":"(player3 : Bool)","args_html":"(player3 : Bool)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":30,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L30"},"def":{"name":"player3=","args":[{"name":"player3","external_name":"player3","restriction":"Bool"}],"visibility":"Public","body":"@player3 = player3"},"external_var":false},{"html_id":"player4:Bool-instance-method","name":"player4","doc":"Set to 4 if player 1 present","summary":"<p>Set to 4 if player 1 present</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":32,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L32"},"def":{"name":"player4","return_type":"Bool","visibility":"Public","body":"@player4"},"external_var":false},{"html_id":"player4=(player4:Bool)-instance-method","name":"player4=","doc":"Set to 4 if player 1 present","summary":"<p>Set to 4 if player 1 present</p>","abstract":false,"args":[{"name":"player4","external_name":"player4","restriction":"Bool"}],"args_string":"(player4 : Bool)","args_html":"(player4 : Bool)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":32,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L32"},"def":{"name":"player4=","args":[{"name":"player4","external_name":"player4","restriction":"Bool"}],"visibility":"Public","body":"@player4 = player4"},"external_var":false},{"html_id":"player_pov:UInt8-instance-method","name":"player_pov","doc":"Which player's point of view to use, zero-indexed (0 means player 1)","summary":"<p>Which player's point of view to use, zero-indexed (0 means player 1)</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":24,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L24"},"def":{"name":"player_pov","return_type":"UInt8","visibility":"Public","body":"@player_pov"},"external_var":false},{"html_id":"player_pov=(player_pov:UInt8)-instance-method","name":"player_pov=","doc":"Which player's point of view to use, zero-indexed (0 means player 1)","summary":"<p>Which player's point of view to use, zero-indexed (0 means player 1)</p>","abstract":false,"args":[{"name":"player_pov","external_name":"player_pov","restriction":"UInt8"}],"args_string":"(player_pov : UInt8)","args_html":"(player_pov : UInt8)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":24,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L24"},"def":{"name":"player_pov=","args":[{"name":"player_pov","external_name":"player_pov","restriction":"UInt8"}],"visibility":"Public","body":"@player_pov = player_pov"},"external_var":false},{"html_id":"respawn:Bool-instance-method","name":"respawn","doc":"non-zero value implies use of -respawn","summary":"<p>non-zero value implies use of -respawn</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":18,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L18"},"def":{"name":"respawn","return_type":"Bool","visibility":"Public","body":"@respawn"},"external_var":false},{"html_id":"respawn=(respawn:Bool)-instance-method","name":"respawn=","doc":"non-zero value implies use of -respawn","summary":"<p>non-zero value implies use of -respawn</p>","abstract":false,"args":[{"name":"respawn","external_name":"respawn","restriction":"Bool"}],"args_string":"(respawn : Bool)","args_html":"(respawn : Bool)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":18,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L18"},"def":{"name":"respawn=","args":[{"name":"respawn","external_name":"respawn","restriction":"Bool"}],"visibility":"Public","body":"@respawn = respawn"},"external_var":false},{"html_id":"skill_level:UInt8-instance-method","name":"skill_level","doc":"Values 0 through 4 indicate \"I'm too young to die\" through \"Nightmare!\", respectively.","summary":"<p>Values 0 through 4 indicate &quot;I'm too young to die&quot; through &quot;Nightmare!&quot;, respectively.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":10,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L10"},"def":{"name":"skill_level","return_type":"UInt8","visibility":"Public","body":"@skill_level"},"external_var":false},{"html_id":"skill_level=(skill_level:UInt8)-instance-method","name":"skill_level=","doc":"Values 0 through 4 indicate \"I'm too young to die\" through \"Nightmare!\", respectively.","summary":"<p>Values 0 through 4 indicate &quot;I'm too young to die&quot; through &quot;Nightmare!&quot;, respectively.</p>","abstract":false,"args":[{"name":"skill_level","external_name":"skill_level","restriction":"UInt8"}],"args_string":"(skill_level : UInt8)","args_html":"(skill_level : UInt8)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":10,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L10"},"def":{"name":"skill_level=","args":[{"name":"skill_level","external_name":"skill_level","restriction":"UInt8"}],"visibility":"Public","body":"@skill_level = skill_level"},"external_var":false}],"types":[{"html_id":"wa-cr/WAD/Demo/InputAction","path":"WAD/Demo/InputAction.html","kind":"struct","full_name":"WAD::Demo::InputAction","name":"InputAction","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":37,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L37"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/Demo","kind":"class","full_name":"WAD::Demo","name":"Demo"},"doc":"Each input action for the demo","summary":"<p>Each input action for the demo</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":37,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L37"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"action:UInt8-instance-method","name":"action","doc":"The action byte to show what is being performed on the tic","summary":"<p>The action byte to show what is being performed on the tic</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":48,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L48"},"def":{"name":"action","return_type":"UInt8","visibility":"Public","body":"@action"},"external_var":false},{"html_id":"action=(action:UInt8)-instance-method","name":"action=","doc":"The action byte to show what is being performed on the tic","summary":"<p>The action byte to show what is being performed on the tic</p>","abstract":false,"args":[{"name":"action","external_name":"action","restriction":"UInt8"}],"args_string":"(action : UInt8)","args_html":"(action : UInt8)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":48,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L48"},"def":{"name":"action=","args":[{"name":"action","external_name":"action","restriction":"UInt8"}],"visibility":"Public","body":"@action = action"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":39,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L39"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"expanded_action:Interaction-instance-method","name":"expanded_action","doc":"This byte encodes multiple actions in different bits. Indexing is from the least significant bit","summary":"<p>This byte encodes multiple actions in different bits.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":50,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L50"},"def":{"name":"expanded_action","return_type":"Interaction","visibility":"Public","body":"@expanded_action"},"external_var":false},{"html_id":"expanded_action=(expanded_action:Interaction)-instance-method","name":"expanded_action=","doc":"This byte encodes multiple actions in different bits. Indexing is from the least significant bit","summary":"<p>This byte encodes multiple actions in different bits.</p>","abstract":false,"args":[{"name":"expanded_action","external_name":"expanded_action","restriction":"Interaction"}],"args_string":"(expanded_action : Interaction)","args_html":"(expanded_action : <a href=\"../../WAD/Demo/Interaction.html\">Interaction</a>)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":50,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L50"},"def":{"name":"expanded_action=","args":[{"name":"expanded_action","external_name":"expanded_action","restriction":"Interaction"}],"visibility":"Public","body":"@expanded_action = expanded_action"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":37,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L37"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false},{"html_id":"movement_forward_back:Int8-instance-method","name":"movement_forward_back","doc":"Positive values indicate forward movement, negative backward.","summary":"<p>Positive values indicate forward movement, negative backward.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":42,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L42"},"def":{"name":"movement_forward_back","return_type":"Int8","visibility":"Public","body":"@movement_forward_back"},"external_var":false},{"html_id":"movement_forward_back=(movement_forward_back:Int8)-instance-method","name":"movement_forward_back=","doc":"Positive values indicate forward movement, negative backward.","summary":"<p>Positive values indicate forward movement, negative backward.</p>","abstract":false,"args":[{"name":"movement_forward_back","external_name":"movement_forward_back","restriction":"Int8"}],"args_string":"(movement_forward_back : Int8)","args_html":"(movement_forward_back : Int8)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":42,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L42"},"def":{"name":"movement_forward_back=","args":[{"name":"movement_forward_back","external_name":"movement_forward_back","restriction":"Int8"}],"visibility":"Public","body":"@movement_forward_back = movement_forward_back"},"external_var":false},{"html_id":"strafing:Int8-instance-method","name":"strafing","doc":"Positive values indicate rightward movement, negative leftward.","summary":"<p>Positive values indicate rightward movement, negative leftward.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":44,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L44"},"def":{"name":"strafing","return_type":"Int8","visibility":"Public","body":"@strafing"},"external_var":false},{"html_id":"strafing=(strafing:Int8)-instance-method","name":"strafing=","doc":"Positive values indicate rightward movement, negative leftward.","summary":"<p>Positive values indicate rightward movement, negative leftward.</p>","abstract":false,"args":[{"name":"strafing","external_name":"strafing","restriction":"Int8"}],"args_string":"(strafing : Int8)","args_html":"(strafing : Int8)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":44,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L44"},"def":{"name":"strafing=","args":[{"name":"strafing","external_name":"strafing","restriction":"Int8"}],"visibility":"Public","body":"@strafing = strafing"},"external_var":false},{"html_id":"turning:Int8-instance-method","name":"turning","doc":"Positive values are left turns, negative right.","summary":"<p>Positive values are left turns, negative right.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":46,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L46"},"def":{"name":"turning","return_type":"Int8","visibility":"Public","body":"@turning"},"external_var":false},{"html_id":"turning=(turning:Int8)-instance-method","name":"turning=","doc":"Positive values are left turns, negative right.","summary":"<p>Positive values are left turns, negative right.</p>","abstract":false,"args":[{"name":"turning","external_name":"turning","restriction":"Int8"}],"args_string":"(turning : Int8)","args_html":"(turning : Int8)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":46,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L46"},"def":{"name":"turning=","args":[{"name":"turning","external_name":"turning","restriction":"Int8"}],"visibility":"Public","body":"@turning = turning"},"external_var":false}]},{"html_id":"wa-cr/WAD/Demo/Interaction","path":"WAD/Demo/Interaction.html","kind":"struct","full_name":"WAD::Demo::Interaction","name":"Interaction","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":54,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L54"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/Demo","kind":"class","full_name":"WAD::Demo","name":"Demo"},"doc":"\"This byte encodes multiple actions in different bits\"","summary":"<p>&quot;This byte encodes multiple actions in different bits&quot;</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":54,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L54"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":56,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L56"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":54,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L54"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false},{"html_id":"interact_save:Bool-instance-method","name":"interact_save","doc":"\"Opens a door or flips a switch; or in special mode the game to\nsaved to the slot specified by the next three bits:\n1xx0001x is slot 1, 1xx1011x is slot 6\".","summary":"<p>&quot;Opens a door or flips a switch; or in special mode the game to saved to the slot specified by the next three bits: 1xx0001x is slot 1, 1xx1011x is slot 6&quot;.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":64,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L64"},"def":{"name":"interact_save","return_type":"Bool","visibility":"Public","body":"@interact_save"},"external_var":false},{"html_id":"interact_save=(interact_save:Bool)-instance-method","name":"interact_save=","doc":"\"Opens a door or flips a switch; or in special mode the game to\nsaved to the slot specified by the next three bits:\n1xx0001x is slot 1, 1xx1011x is slot 6\".","summary":"<p>&quot;Opens a door or flips a switch; or in special mode the game to saved to the slot specified by the next three bits: 1xx0001x is slot 1, 1xx1011x is slot 6&quot;.</p>","abstract":false,"args":[{"name":"interact_save","external_name":"interact_save","restriction":"Bool"}],"args_string":"(interact_save : Bool)","args_html":"(interact_save : Bool)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":64,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L64"},"def":{"name":"interact_save=","args":[{"name":"interact_save","external_name":"interact_save","restriction":"Bool"}],"visibility":"Public","body":"@interact_save = interact_save"},"external_var":false},{"html_id":"save_slot:UInt8-instance-method","name":"save_slot","doc":"Save game slot, used if *interact_save* == true and *special_mode* == true.\nSet to 1 by default, because if it is used, the interact_save bit will equal 1.","summary":"<p>Save game slot, used if <em>interact_save</em> == true and <em>special_mode</em> == true.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":68,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L68"},"def":{"name":"save_slot","return_type":"UInt8","visibility":"Public","body":"@save_slot"},"external_var":false},{"html_id":"save_slot=(save_slot:UInt8)-instance-method","name":"save_slot=","doc":"Save game slot, used if *interact_save* == true and *special_mode* == true.\nSet to 1 by default, because if it is used, the interact_save bit will equal 1.","summary":"<p>Save game slot, used if <em>interact_save</em> == true and <em>special_mode</em> == true.</p>","abstract":false,"args":[{"name":"save_slot","external_name":"save_slot","restriction":"UInt8"}],"args_string":"(save_slot : UInt8)","args_html":"(save_slot : UInt8)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":68,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L68"},"def":{"name":"save_slot=","args":[{"name":"save_slot","external_name":"save_slot","restriction":"UInt8"}],"visibility":"Public","body":"@save_slot = save_slot"},"external_var":false},{"html_id":"shoot_pause:Bool-instance-method","name":"shoot_pause","doc":"\"If set, the weapon is fired; or in special mode pause is toggled\"","summary":"<p>&quot;If set, the weapon is fired; or in special mode pause is toggled&quot;</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":59,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L59"},"def":{"name":"shoot_pause","return_type":"Bool","visibility":"Public","body":"@shoot_pause"},"external_var":false},{"html_id":"shoot_pause=(shoot_pause:Bool)-instance-method","name":"shoot_pause=","doc":"\"If set, the weapon is fired; or in special mode pause is toggled\"","summary":"<p>&quot;If set, the weapon is fired; or in special mode pause is toggled&quot;</p>","abstract":false,"args":[{"name":"shoot_pause","external_name":"shoot_pause","restriction":"Bool"}],"args_string":"(shoot_pause : Bool)","args_html":"(shoot_pause : Bool)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":59,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L59"},"def":{"name":"shoot_pause=","args":[{"name":"shoot_pause","external_name":"shoot_pause","restriction":"Bool"}],"visibility":"Public","body":"@shoot_pause = shoot_pause"},"external_var":false},{"html_id":"special_mode:Bool-instance-method","name":"special_mode","doc":"\"Sets special mode, changing the meaning of the first two bits\".","summary":"<p>&quot;Sets special mode, changing the meaning of the first two bits&quot;.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":78,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L78"},"def":{"name":"special_mode","return_type":"Bool","visibility":"Public","body":"@special_mode"},"external_var":false},{"html_id":"special_mode=(special_mode:Bool)-instance-method","name":"special_mode=","doc":"\"Sets special mode, changing the meaning of the first two bits\".","summary":"<p>&quot;Sets special mode, changing the meaning of the first two bits&quot;.</p>","abstract":false,"args":[{"name":"special_mode","external_name":"special_mode","restriction":"Bool"}],"args_string":"(special_mode : Bool)","args_html":"(special_mode : Bool)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":78,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L78"},"def":{"name":"special_mode=","args":[{"name":"special_mode","external_name":"special_mode","restriction":"Bool"}],"visibility":"Public","body":"@special_mode = special_mode"},"external_var":false},{"html_id":"weapon_slot:UInt8-instance-method","name":"weapon_slot","doc":"Set to 1 by default, because if it is used, the weapon_switch bit will equal 1.","summary":"<p>Set to 1 by default, because if it is used, the weapon_switch bit will equal 1.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":75,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L75"},"def":{"name":"weapon_slot","return_type":"UInt8","visibility":"Public","body":"@weapon_slot"},"external_var":false},{"html_id":"weapon_slot=(weapon_slot:UInt8)-instance-method","name":"weapon_slot=","doc":"Set to 1 by default, because if it is used, the weapon_switch bit will equal 1.","summary":"<p>Set to 1 by default, because if it is used, the weapon_switch bit will equal 1.</p>","abstract":false,"args":[{"name":"weapon_slot","external_name":"weapon_slot","restriction":"UInt8"}],"args_string":"(weapon_slot : UInt8)","args_html":"(weapon_slot : UInt8)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":75,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L75"},"def":{"name":"weapon_slot=","args":[{"name":"weapon_slot","external_name":"weapon_slot","restriction":"UInt8"}],"visibility":"Public","body":"@weapon_slot = weapon_slot"},"external_var":false},{"html_id":"weapon_switch:Bool-instance-method","name":"weapon_switch","doc":"\"Changes to the weapon slot specified by the next three bits:\nxx0001xx is slot 1, xx1101xx is slot 7\".","summary":"<p>&quot;Changes to the weapon slot specified by the next three bits: xx0001xx is slot 1, xx1101xx is slot 7&quot;.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":72,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L72"},"def":{"name":"weapon_switch","return_type":"Bool","visibility":"Public","body":"@weapon_switch"},"external_var":false},{"html_id":"weapon_switch=(weapon_switch:Bool)-instance-method","name":"weapon_switch=","doc":"\"Changes to the weapon slot specified by the next three bits:\nxx0001xx is slot 1, xx1101xx is slot 7\".","summary":"<p>&quot;Changes to the weapon slot specified by the next three bits: xx0001xx is slot 1, xx1101xx is slot 7&quot;.</p>","abstract":false,"args":[{"name":"weapon_switch","external_name":"weapon_switch","restriction":"Bool"}],"args_string":"(weapon_switch : Bool)","args_html":"(weapon_switch : Bool)","location":{"filename":"src/wa-cr/wad/wad-data/demo.cr","line_number":72,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/demo.cr#L72"},"def":{"name":"weapon_switch=","args":[{"name":"weapon_switch","external_name":"weapon_switch","restriction":"Bool"}],"visibility":"Public","body":"@weapon_switch = weapon_switch"},"external_var":false}]}]},{"html_id":"wa-cr/WAD/Directory","path":"WAD/Directory.html","kind":"struct","full_name":"WAD::Directory","name":"Directory","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/directory.cr","line_number":3,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/directory.cr#L3"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"SIZE","name":"SIZE","value":"16"}],"namespace":{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"},"doc":"A directory which points to a start of a lump with its size and name","summary":"<p>A directory which points to a start of a lump with its size and name</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/directory.cr","line_number":3,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/directory.cr#L3"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false},{"html_id":"read(io:IO,file_offset:UInt32=0):Directory-class-method","name":"read","doc":"Read an io from the WAD and convert it into a Directory.\n\nReads a directory from a WAD *file* with *directory_start* and *Directory::SIZE*:\n```\nfile.read_at(directory_start, Directory::SIZE) do |io|\n  directory = Directory.read(io)\nend\n```\n\nNOTE: *file_offset* is used when the start of the WAD is offset in a file","summary":"<p>Read an io from the WAD and convert it into a Directory.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"file_offset","default_value":"0","external_name":"file_offset","restriction":"UInt32"}],"args_string":"(io : IO, file_offset : UInt32 = 0) : Directory","args_html":"(io : IO, file_offset : UInt32 = <span class=\"n\">0</span>) : <a href=\"../WAD/Directory.html\">Directory</a>","location":{"filename":"src/wa-cr/wad/wad-data/directory.cr","line_number":25,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/directory.cr#L25"},"def":{"name":"read","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"file_offset","default_value":"0","external_name":"file_offset","restriction":"UInt32"}],"return_type":"Directory","visibility":"Public","body":"directory = Directory.new\ndirectory.file_pos = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\ndirectory.file_pos = directory.file_pos + file_offset\ndirectory.size = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\ndirectory.name = (io.gets(8)).to_s.gsub(\"\\u0000\", \"\")\ndirectory\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/directory.cr","line_number":5,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/directory.cr#L5"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"file_pos:UInt32-instance-method","name":"file_pos","doc":"An integer holding a pointer to the start of the lump's data in the file.","summary":"<p>An integer holding a pointer to the start of the lump's data in the file.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/directory.cr","line_number":9,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/directory.cr#L9"},"def":{"name":"file_pos","return_type":"UInt32","visibility":"Public","body":"@file_pos"},"external_var":false},{"html_id":"file_pos=(file_pos:UInt32)-instance-method","name":"file_pos=","doc":"An integer holding a pointer to the start of the lump's data in the file.","summary":"<p>An integer holding a pointer to the start of the lump's data in the file.</p>","abstract":false,"args":[{"name":"file_pos","external_name":"file_pos","restriction":"UInt32"}],"args_string":"(file_pos : UInt32)","args_html":"(file_pos : UInt32)","location":{"filename":"src/wa-cr/wad/wad-data/directory.cr","line_number":9,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/directory.cr#L9"},"def":{"name":"file_pos=","args":[{"name":"file_pos","external_name":"file_pos","restriction":"UInt32"}],"visibility":"Public","body":"@file_pos = file_pos"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/directory.cr","line_number":3,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/directory.cr#L3"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false},{"html_id":"name:String-instance-method","name":"name","doc":"An ASCII string defining the lump's name.","summary":"<p>An ASCII string defining the lump's name.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/directory.cr","line_number":13,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/directory.cr#L13"},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"},"external_var":false},{"html_id":"name=(name:String)-instance-method","name":"name=","doc":"An ASCII string defining the lump's name.","summary":"<p>An ASCII string defining the lump's name.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/directory.cr","line_number":13,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/directory.cr#L13"},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"},"external_var":false},{"html_id":"size:UInt32-instance-method","name":"size","doc":"An integer representing the size of the lump in bytes.","summary":"<p>An integer representing the size of the lump in bytes.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/directory.cr","line_number":11,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/directory.cr#L11"},"def":{"name":"size","return_type":"UInt32","visibility":"Public","body":"@size"},"external_var":false},{"html_id":"size=(size:UInt32)-instance-method","name":"size=","doc":"An integer representing the size of the lump in bytes.","summary":"<p>An integer representing the size of the lump in bytes.</p>","abstract":false,"args":[{"name":"size","external_name":"size","restriction":"UInt32"}],"args_string":"(size : UInt32)","args_html":"(size : UInt32)","location":{"filename":"src/wa-cr/wad/wad-data/directory.cr","line_number":11,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/directory.cr#L11"},"def":{"name":"size=","args":[{"name":"size","external_name":"size","restriction":"UInt32"}],"visibility":"Public","body":"@size = size"},"external_var":false}]},{"html_id":"wa-cr/WAD/Dmxgus","path":"WAD/Dmxgus.html","kind":"class","full_name":"WAD::Dmxgus","name":"Dmxgus","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/WritingAdditions/Dmxgus","kind":"module","full_name":"WritingAdditions::Dmxgus","name":"Dmxgus"},{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":188,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L188"},{"filename":"src/write.cr","line_number":334,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L334"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"wa-cr/WritingAdditions/Dmxgus","kind":"module","full_name":"WritingAdditions::Dmxgus","name":"Dmxgus"}],"namespace":{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"},"doc":"\"Instrument data for the DMX sound library to use for Gravis Ultrasound soundcards\".","summary":"<p>&quot;Instrument data for the DMX sound library to use for Gravis Ultrasound soundcards&quot;.</p>","class_methods":[{"html_id":"is_dmxgus?(name:String)-class-method","name":"is_dmxgus?","doc":"Checks to see if *name* is \"DMXGUS\"\n\nReturns true if the name is a dmxgus:\n```\ndmxgus_name = \"DMXGUS\"\nif WAD::Dmxgus.is_dmxgus?(dmxgus_name)\n  puts \"Is a Dmxgus\"\nelse\n  puts \"Is not a Dmxgus\"\nend\n```","summary":"<p>Checks to see if <em>name</em> is &quot;DMXGUS&quot;</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":264,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L264"},"def":{"name":"is_dmxgus?","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"(!(!(name =~ (/^DMXGUS/)))) || (!(!(name =~ (/^DMXGUS\\d/))))"},"external_var":false}],"constructors":[{"html_id":"parse(filename:String|Path):Dmxgus-class-method","name":"parse","doc":"Parses a dmxgus file given the filename\n\nOpens a dmxgus file and parses it:\n```\nmy_dmxgus = WAD::Dmxgus.parse(\"Path/To/Dmxgus\")\n```","summary":"<p>Parses a dmxgus file given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Dmxgus","args_html":"(filename : String | Path) : <a href=\"../WAD/Dmxgus.html\">Dmxgus</a>","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":213,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L213"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Dmxgus","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file)\nend\n\nraise(\"Dmxgus invalid\")\n"},"external_var":false},{"html_id":"parse(io:IO):Dmxgus-class-method","name":"parse","doc":"Parses a dmxgus file given the io\n\nOpens a dmxgus io and parses it:\n```\nFile.open(\"Path/To/Dmxgus\") do |file|\n  my_dmxgus = WAD::Dmxgus.parse(file)\nend\n```","summary":"<p>Parses a dmxgus file given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Dmxgus","args_html":"(io : IO) : <a href=\"../WAD/Dmxgus.html\">Dmxgus</a>","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":229,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L229"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Dmxgus","visibility":"Public","body":"dmxgus = Dmxgus.new\n\n\nio.gets_to_end.each_line do |line|\n  if (line.char_at(0)) != '#'\n    instr_data = InstrumentData.new\n\n    split_line = line.split(',')\n\n    instr_data.patch = split_line[0].to_i\n    instr_data.a_k = split_line[1].to_i\n    instr_data.b_k = split_line[2].to_i\n    instr_data.c_k = split_line[3].to_i\n    instr_data.d_k = split_line[4].to_i\n    instr_data.filename = split_line[5]\n\n    dmxgus.instr_datas << instr_data\n  end\nend\n\ndmxgus\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":190,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L190"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"instr_datas:Array(InstrumentData)-instance-method","name":"instr_datas","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":192,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L192"},"def":{"name":"instr_datas","return_type":"Array(InstrumentData)","visibility":"Public","body":"@instr_datas"},"external_var":false},{"html_id":"instr_datas=(instr_datas:Array(InstrumentData))-instance-method","name":"instr_datas=","abstract":false,"args":[{"name":"instr_datas","external_name":"instr_datas","restriction":"Array(InstrumentData)"}],"args_string":"(instr_datas : Array(InstrumentData))","args_html":"(instr_datas : Array(<a href=\"../WAD/Dmxgus/InstrumentData.html\">InstrumentData</a>))","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":192,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L192"},"def":{"name":"instr_datas=","args":[{"name":"instr_datas","external_name":"instr_datas","restriction":"Array(InstrumentData)"}],"visibility":"Public","body":"@instr_datas = instr_datas"},"external_var":false}],"types":[{"html_id":"wa-cr/WAD/Dmxgus/InstrumentData","path":"WAD/Dmxgus/InstrumentData.html","kind":"struct","full_name":"WAD::Dmxgus::InstrumentData","name":"InstrumentData","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":194,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L194"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/Dmxgus","kind":"class","full_name":"WAD::Dmxgus","name":"Dmxgus"},"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":194,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L194"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"a_k:Int32-instance-method","name":"a_k","doc":"a = 256, b = 512, c = 768, d = 1024","summary":"<p>a = 256, b = 512, c = 768, d = 1024</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":200,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L200"},"def":{"name":"a_k","return_type":"Int32","visibility":"Public","body":"@a_k"},"external_var":false},{"html_id":"a_k=(a_k:Int32)-instance-method","name":"a_k=","doc":"a = 256, b = 512, c = 768, d = 1024","summary":"<p>a = 256, b = 512, c = 768, d = 1024</p>","abstract":false,"args":[{"name":"a_k","external_name":"a_k","restriction":"Int32"}],"args_string":"(a_k : Int32)","args_html":"(a_k : Int32)","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":200,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L200"},"def":{"name":"a_k=","args":[{"name":"a_k","external_name":"a_k","restriction":"Int32"}],"visibility":"Public","body":"@a_k = a_k"},"external_var":false},{"html_id":"b_k:Int32-instance-method","name":"b_k","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":201,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L201"},"def":{"name":"b_k","return_type":"Int32","visibility":"Public","body":"@b_k"},"external_var":false},{"html_id":"b_k=(b_k:Int32)-instance-method","name":"b_k=","abstract":false,"args":[{"name":"b_k","external_name":"b_k","restriction":"Int32"}],"args_string":"(b_k : Int32)","args_html":"(b_k : Int32)","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":201,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L201"},"def":{"name":"b_k=","args":[{"name":"b_k","external_name":"b_k","restriction":"Int32"}],"visibility":"Public","body":"@b_k = b_k"},"external_var":false},{"html_id":"c_k:Int32-instance-method","name":"c_k","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":202,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L202"},"def":{"name":"c_k","return_type":"Int32","visibility":"Public","body":"@c_k"},"external_var":false},{"html_id":"c_k=(c_k:Int32)-instance-method","name":"c_k=","abstract":false,"args":[{"name":"c_k","external_name":"c_k","restriction":"Int32"}],"args_string":"(c_k : Int32)","args_html":"(c_k : Int32)","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":202,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L202"},"def":{"name":"c_k=","args":[{"name":"c_k","external_name":"c_k","restriction":"Int32"}],"visibility":"Public","body":"@c_k = c_k"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":196,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L196"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"d_k:Int32-instance-method","name":"d_k","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":203,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L203"},"def":{"name":"d_k","return_type":"Int32","visibility":"Public","body":"@d_k"},"external_var":false},{"html_id":"d_k=(d_k:Int32)-instance-method","name":"d_k=","abstract":false,"args":[{"name":"d_k","external_name":"d_k","restriction":"Int32"}],"args_string":"(d_k : Int32)","args_html":"(d_k : Int32)","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":203,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L203"},"def":{"name":"d_k=","args":[{"name":"d_k","external_name":"d_k","restriction":"Int32"}],"visibility":"Public","body":"@d_k = d_k"},"external_var":false},{"html_id":"filename:String-instance-method","name":"filename","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":204,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L204"},"def":{"name":"filename","return_type":"String","visibility":"Public","body":"@filename"},"external_var":false},{"html_id":"filename=(filename:String)-instance-method","name":"filename=","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String"}],"args_string":"(filename : String)","args_html":"(filename : String)","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":204,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L204"},"def":{"name":"filename=","args":[{"name":"filename","external_name":"filename","restriction":"String"}],"visibility":"Public","body":"@filename = filename"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":194,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L194"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false},{"html_id":"patch:Int32-instance-method","name":"patch","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":198,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L198"},"def":{"name":"patch","return_type":"Int32","visibility":"Public","body":"@patch"},"external_var":false},{"html_id":"patch=(patch:Int32)-instance-method","name":"patch=","abstract":false,"args":[{"name":"patch","external_name":"patch","restriction":"Int32"}],"args_string":"(patch : Int32)","args_html":"(patch : Int32)","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":198,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L198"},"def":{"name":"patch=","args":[{"name":"patch","external_name":"patch","restriction":"Int32"}],"visibility":"Public","body":"@patch = patch"},"external_var":false}]}]},{"html_id":"wa-cr/WAD/EnDoom","path":"WAD/EnDoom.html","kind":"class","full_name":"WAD::EnDoom","name":"EnDoom","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/WritingAdditions/EnDoom","kind":"module","full_name":"WritingAdditions::EnDoom","name":"EnDoom"},{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":153,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L153"},{"filename":"src/write.cr","line_number":354,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L354"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"wa-cr/WritingAdditions/EnDoom","kind":"module","full_name":"WritingAdditions::EnDoom","name":"EnDoom"}],"namespace":{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"},"doc":"The colorful screen shown when Doom exits.","summary":"<p>The colorful screen shown when Doom exits.</p>","class_methods":[{"html_id":"is_endoom?(name:String)-class-method","name":"is_endoom?","doc":"Checks to see if *name* is \"ENDDOOM\"\n\nReturns true if the name is a endoom:\n```\nendoom_name = \"ENDOOM\"\nif WAD::EnDoom.is_endoom?(endoom_name)\n  puts \"Is a EnDoom\"\nelse\n  puts \"Is not a EnDoom\"\nend\n```","summary":"<p>Checks to see if <em>name</em> is &quot;ENDDOOM&quot;</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":219,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L219"},"def":{"name":"is_endoom?","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"!(!(name =~ (/^ENDOOM/)))"},"external_var":false}],"constructors":[{"html_id":"parse(filename:String|Path):EnDoom-class-method","name":"parse","doc":"Parses a endoom file given the filename\n\nOpens a endoom file and parses it:\n```\nmy_endoom = WAD::EnDoom.parse(\"Path/To/EnDoom\")\n```","summary":"<p>Parses a endoom file given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : EnDoom","args_html":"(filename : String | Path) : <a href=\"../WAD/EnDoom.html\">EnDoom</a>","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":177,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L177"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"EnDoom","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file)\nend\n\nraise(\"EnDoom invalid\")\n"},"external_var":false},{"html_id":"parse(io:IO):EnDoom-class-method","name":"parse","doc":"Parses a endoom file given the io\n\nOpens a endoom io and parses it:\n```\nFile.open(\"Path/To/EnDoom\") do |file|\n  my_endoom = WAD::EnDoom.parse(file)\nend\n```","summary":"<p>Parses a endoom file given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : EnDoom","args_html":"(io : IO) : <a href=\"../WAD/EnDoom.html\">EnDoom</a>","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":193,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L193"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"EnDoom","visibility":"Public","body":"endoom = EnDoom.new\nnum_of_chars = 2000\n\nnum_of_chars.times do\n  endoomchar = EnDoomChars.new\n\n  endoomchar.ascii_value = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n  endoomchar.color = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n\n  endoom.characters << endoomchar\nend\nendoom\n"},"external_var":false}],"instance_methods":[{"html_id":"characters:Array(EnDoomChars)-instance-method","name":"characters","doc":"An array of all the characters in the EnDoom","summary":"<p>An array of all the characters in the EnDoom</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":158,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L158"},"def":{"name":"characters","return_type":"Array(EnDoomChars)","visibility":"Public","body":"@characters"},"external_var":false},{"html_id":"characters=(characters:Array(EnDoomChars))-instance-method","name":"characters=","doc":"An array of all the characters in the EnDoom","summary":"<p>An array of all the characters in the EnDoom</p>","abstract":false,"args":[{"name":"characters","external_name":"characters","restriction":"Array(EnDoomChars)"}],"args_string":"(characters : Array(EnDoomChars))","args_html":"(characters : Array(<a href=\"../WAD/EnDoom/EnDoomChars.html\">EnDoomChars</a>))","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":158,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L158"},"def":{"name":"characters=","args":[{"name":"characters","external_name":"characters","restriction":"Array(EnDoomChars)"}],"visibility":"Public","body":"@characters = characters"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":155,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L155"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false}],"types":[{"html_id":"wa-cr/WAD/EnDoom/EnDoomChars","path":"WAD/EnDoom/EnDoomChars.html","kind":"struct","full_name":"WAD::EnDoom::EnDoomChars","name":"EnDoomChars","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":161,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L161"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/EnDoom","kind":"class","full_name":"WAD::EnDoom","name":"EnDoom"},"doc":"A character in the EnDoom","summary":"<p>A character in the EnDoom</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":161,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L161"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"ascii_value:UInt8-instance-method","name":"ascii_value","doc":"The character's ascii value","summary":"<p>The character's ascii value</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":166,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L166"},"def":{"name":"ascii_value","return_type":"UInt8","visibility":"Public","body":"@ascii_value"},"external_var":false},{"html_id":"ascii_value=(ascii_value:UInt8)-instance-method","name":"ascii_value=","doc":"The character's ascii value","summary":"<p>The character's ascii value</p>","abstract":false,"args":[{"name":"ascii_value","external_name":"ascii_value","restriction":"UInt8"}],"args_string":"(ascii_value : UInt8)","args_html":"(ascii_value : UInt8)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":166,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L166"},"def":{"name":"ascii_value=","args":[{"name":"ascii_value","external_name":"ascii_value","restriction":"UInt8"}],"visibility":"Public","body":"@ascii_value = ascii_value"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":163,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L163"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"color:UInt8-instance-method","name":"color","doc":"The character's color","summary":"<p>The character's color</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":168,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L168"},"def":{"name":"color","return_type":"UInt8","visibility":"Public","body":"@color"},"external_var":false},{"html_id":"color=(color:UInt8)-instance-method","name":"color=","doc":"The character's color","summary":"<p>The character's color</p>","abstract":false,"args":[{"name":"color","external_name":"color","restriction":"UInt8"}],"args_string":"(color : UInt8)","args_html":"(color : UInt8)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":168,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L168"},"def":{"name":"color=","args":[{"name":"color","external_name":"color","restriction":"UInt8"}],"visibility":"Public","body":"@color = color"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":161,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L161"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false}]}]},{"html_id":"wa-cr/WAD/Flat","path":"WAD/Flat.html","kind":"class","full_name":"WAD::Flat","name":"Flat","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/WritingAdditions/Flat","kind":"module","full_name":"WritingAdditions::Flat","name":"Flat"},{"html_id":"wa-cr/RaylibAdditions/Flat","kind":"module","full_name":"RaylibAdditions::Flat","name":"Flat"},{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/raylib.cr","line_number":436,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L436"},{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":661,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L661"},{"filename":"src/write.cr","line_number":370,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L370"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"wa-cr/RaylibAdditions/Flat","kind":"module","full_name":"RaylibAdditions::Flat","name":"Flat"},{"html_id":"wa-cr/WritingAdditions/Flat","kind":"module","full_name":"WritingAdditions::Flat","name":"Flat"}],"extended_modules":[{"html_id":"wa-cr/RaylibAdditions/FlatClassMethods","kind":"module","full_name":"RaylibAdditions::FlatClassMethods","name":"FlatClassMethods"}],"namespace":{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"},"doc":"A WAD flat","summary":"<p>A WAD flat</p>","class_methods":[{"html_id":"is_flat_mark_end?(name:String)-class-method","name":"is_flat_mark_end?","doc":"Checks to see if *name* is \"F_END\".\n\nReturns true if the name is a flat marker end:\n```\nflat_mark_name = \"F_END\"\nif WAD::Flat.is_flat_mark_end?(flat_mark_name)\n  puts \"Is a Flat Marker End\"\nelse\n  puts \"Is not a Flat Marker End\"\nend\n```","summary":"<p>Checks to see if <em>name</em> is &quot;F_END&quot;.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":765,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L765"},"def":{"name":"is_flat_mark_end?","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"name =~ (/^F_END/)"},"external_var":false},{"html_id":"is_flat_mark_start?(name:String)-class-method","name":"is_flat_mark_start?","doc":"Checks to see if *name* is \"F_START\".\n\nReturns true if the name is a flat marker start:\n```\nflat_mark_name = \"F_START\"\nif WAD::Flat.is_flat_mark_start?(flat_mark_name)\n  puts \"Is a Flat Marker Start\"\nelse\n  puts \"Is not a Flat Marker Start\"\nend\n```","summary":"<p>Checks to see if <em>name</em> is &quot;F_START&quot;.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":750,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L750"},"def":{"name":"is_flat_mark_start?","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"name =~ (/^F_START/)"},"external_var":false}],"constructors":[{"html_id":"parse(filename:String|Path):Flat-class-method","name":"parse","doc":"Parses a flat file given the filename\n\nOpens a flat file and parses it:\n```\nmy_flat = WAD::Flat.parse(\"Path/To/Flat\")\n```","summary":"<p>Parses a flat file given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Flat","args_html":"(filename : String | Path) : <a href=\"../WAD/Flat.html\">Flat</a>","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":713,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L713"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Flat","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file)\nend\n\nraise(\"Flat invalid\")\n"},"external_var":false},{"html_id":"parse(io:IO):Flat-class-method","name":"parse","doc":"Parses a flat file given the io\n\nOpens a flat io and parses it:\n```\nFile.open(\"Path/To/Flat\") do |file|\n  my_flat = WAD::Flat.parse(file)\nend\n```","summary":"<p>Parses a flat file given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Flat","args_html":"(io : IO) : <a href=\"../WAD/Flat.html\">Flat</a>","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":729,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L729"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Flat","visibility":"Public","body":"flat = Flat.new\n\nflat.lump_bytes.times do\n  flat.colors << (io.read_bytes(UInt8, IO::ByteFormat::LittleEndian))\nend\n\nflat\n"},"external_var":false}],"instance_methods":[{"html_id":"[](x:Int,y:Int)-instance-method","name":"[]","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"args_string":"(x : Int, y : Int)","args_html":"(x : Int, y : Int)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":703,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L703"},"def":{"name":"[]","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"visibility":"Public","body":"colors[x + (y * width)]"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":663,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L663"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"colors:Array(UInt8)-instance-method","name":"colors","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":665,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L665"},"def":{"name":"colors","return_type":"Array(UInt8)","visibility":"Public","body":"@colors"},"external_var":false},{"html_id":"colors=(colors:Array(UInt8))-instance-method","name":"colors=","abstract":false,"args":[{"name":"colors","external_name":"colors","restriction":"Array(UInt8)"}],"args_string":"(colors : Array(UInt8))","args_html":"(colors : Array(UInt8))","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":665,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L665"},"def":{"name":"colors=","args":[{"name":"colors","external_name":"colors","restriction":"Array(UInt8)"}],"visibility":"Public","body":"@colors = colors"},"external_var":false},{"html_id":"height:Int32-instance-method","name":"height","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":668,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L668"},"def":{"name":"height","return_type":"Int32","visibility":"Public","body":"@height"},"external_var":false},{"html_id":"height=(height:Int32)-instance-method","name":"height=","abstract":false,"args":[{"name":"height","external_name":"height","restriction":"Int32"}],"args_string":"(height : Int32)","args_html":"(height : Int32)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":668,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L668"},"def":{"name":"height=","args":[{"name":"height","external_name":"height","restriction":"Int32"}],"visibility":"Public","body":"@height = height"},"external_var":false},{"html_id":"lump_bytes:Int32-instance-method","name":"lump_bytes","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":666,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L666"},"def":{"name":"lump_bytes","return_type":"Int32","visibility":"Public","body":"@lump_bytes"},"external_var":false},{"html_id":"lump_bytes=(lump_bytes:Int32)-instance-method","name":"lump_bytes=","abstract":false,"args":[{"name":"lump_bytes","external_name":"lump_bytes","restriction":"Int32"}],"args_string":"(lump_bytes : Int32)","args_html":"(lump_bytes : Int32)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":666,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L666"},"def":{"name":"lump_bytes=","args":[{"name":"lump_bytes","external_name":"lump_bytes","restriction":"Int32"}],"visibility":"Public","body":"@lump_bytes = lump_bytes"},"external_var":false},{"html_id":"set_pixel(x:Int,y:Int,value:Int)-instance-method","name":"set_pixel","doc":"Sets a pixel in the flat to be *value*.\nRaises an error if value is not within the bounds\nof a `UInt8`\n\nNOTE: *value* does not refer to an rgb color,\nbut instead to an index in the colors of a `WAD::Playpal::Palette`\n\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\n\nmy_flat = my_wad.flats[\"MyFlat\"]\n\nmy_flat[2, 3] # => Returns the value of the pixel at x=2 y=3\n\nmy_flat.set_pixel(2, 3, 120) # => Sets the value of the pixel at x=2 y=3 to be 120\n\nmy_flat[2, 3] # => 120\n\nmy_flat.set_pixel(2, 3, -1) # => Raises an exception\n\nmy_flat.set_pixel(2, 3, 256) # => Raises an exception\n```","summary":"<p>Sets a pixel in the flat to be <em>value</em>.</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"value","external_name":"value","restriction":"Int"}],"args_string":"(x : Int, y : Int, value : Int)","args_html":"(x : Int, y : Int, value : Int)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":692,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L692"},"def":{"name":"set_pixel","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"value","external_name":"value","restriction":"Int"}],"visibility":"Public","body":"if x > width || y > height\n  raise(\"Out of bounds\")\nend\nif self[x, y]\n  begin\n    colors[x + (y * width)] = value.to_u8\n  rescue e : OverflowError\n    raise(\"'#{value}' IS NOT WITHIN THE BOUNDS OF A UInt8\")\n  end\nend\n"},"external_var":false},{"html_id":"width:Int32-instance-method","name":"width","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":667,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L667"},"def":{"name":"width","return_type":"Int32","visibility":"Public","body":"@width"},"external_var":false},{"html_id":"width=(width:Int32)-instance-method","name":"width=","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int32"}],"args_string":"(width : Int32)","args_html":"(width : Int32)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":667,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L667"},"def":{"name":"width=","args":[{"name":"width","external_name":"width","restriction":"Int32"}],"visibility":"Public","body":"@width = width"},"external_var":false}]},{"html_id":"wa-cr/WAD/Genmidi","path":"WAD/Genmidi.html","kind":"class","full_name":"WAD::Genmidi","name":"Genmidi","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/WritingAdditions/Genmidi","kind":"module","full_name":"WritingAdditions::Genmidi","name":"Genmidi"},{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":93,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L93"},{"filename":"src/write.cr","line_number":330,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L330"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"wa-cr/WritingAdditions/Genmidi","kind":"module","full_name":"WritingAdditions::Genmidi","name":"Genmidi"}],"namespace":{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"},"doc":"\"Instrument data for the DMX sound library to use for OPL synthesis\".","summary":"<p>&quot;Instrument data for the DMX sound library to use for OPL synthesis&quot;.</p>","class_methods":[{"html_id":"is_genmidi?(name:String)-class-method","name":"is_genmidi?","doc":"Checks to see if *name* is \"GENMIDI\".\n\nReturns true if the name is a genmidi:\n```\ngenmidi_name = \"GENMIDI\"\nif WAD::Genmidi.is_genmidi?(genmidi_name)\n  puts \"Is a Genmidi\"\nelse\n  puts \"Is not a Genmidi\"\nend\n```","summary":"<p>Checks to see if <em>name</em> is &quot;GENMIDI&quot;.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":182,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L182"},"def":{"name":"is_genmidi?","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"!(!(name =~ (/^GENMIDI/)))"},"external_var":false}],"constructors":[{"html_id":"parse(filename:String|Path):Genmidi-class-method","name":"parse","doc":"Parses a genmidi file given the filename\n\nOpens a genmidi file and parses it:\n```\nmy_genmidi = WAD::Genmidi.parse(\"Path/To/Genmidi\")\n```","summary":"<p>Parses a genmidi file given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Genmidi","args_html":"(filename : String | Path) : <a href=\"../WAD/Genmidi.html\">Genmidi</a>","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":118,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L118"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Genmidi","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file)\nend\n\nraise(\"Genmidi invalid\")\n"},"external_var":false},{"html_id":"parse(io:IO):Genmidi-class-method","name":"parse","doc":"Parses a genmidi file given the io\n\nOpens a genmidi io and parses it:\n```\nFile.open(\"Path/To/Genmidi\") do |file|\n  my_genmidi = WAD::Genmidi.parse(file)\nend\n```","summary":"<p>Parses a genmidi file given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Genmidi","args_html":"(io : IO) : <a href=\"../WAD/Genmidi.html\">Genmidi</a>","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":134,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L134"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Genmidi","visibility":"Public","body":"genmidi = Genmidi.new\n\ngenmidi.header = (io.gets(8)).to_s\n\ninstrument_data_records_count = 175\n\ninstrument_data_records_count.times do\n  instr_data = InstrumentData.new\n\n\n  instr_data.header << (io.read_bytes(Int16, IO::ByteFormat::LittleEndian))\n  instr_data.header << (io.read_bytes(Int8, IO::ByteFormat::LittleEndian))\n  instr_data.header << (io.read_bytes(Int8, IO::ByteFormat::LittleEndian))\n\n\n  14.times do\n    instr_data.voice1_data << (io.read_bytes(Int8, IO::ByteFormat::LittleEndian))\n  end\n  instr_data.voice1_data << (io.read_bytes(Int16, IO::ByteFormat::LittleEndian))\n\n\n  14.times do\n    instr_data.voice2_data << (io.read_bytes(Int8, IO::ByteFormat::LittleEndian))\n  end\n  instr_data.voice2_data << (io.read_bytes(Int16, IO::ByteFormat::LittleEndian))\n\n  genmidi.instr_datas << instr_data\nend\n\ninstrument_data_records_count.times do\n  genmidi.instr_names << (io.gets(32)).to_s\nend\n\ngenmidi\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":95,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L95"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"header:String-instance-method","name":"header","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":97,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L97"},"def":{"name":"header","return_type":"String","visibility":"Public","body":"@header"},"external_var":false},{"html_id":"header=(header:String)-instance-method","name":"header=","abstract":false,"args":[{"name":"header","external_name":"header","restriction":"String"}],"args_string":"(header : String)","args_html":"(header : String)","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":97,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L97"},"def":{"name":"header=","args":[{"name":"header","external_name":"header","restriction":"String"}],"visibility":"Public","body":"@header = header"},"external_var":false},{"html_id":"instr_datas:Array(InstrumentData)-instance-method","name":"instr_datas","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":98,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L98"},"def":{"name":"instr_datas","return_type":"Array(InstrumentData)","visibility":"Public","body":"@instr_datas"},"external_var":false},{"html_id":"instr_datas=(instr_datas:Array(InstrumentData))-instance-method","name":"instr_datas=","abstract":false,"args":[{"name":"instr_datas","external_name":"instr_datas","restriction":"Array(InstrumentData)"}],"args_string":"(instr_datas : Array(InstrumentData))","args_html":"(instr_datas : Array(<a href=\"../WAD/Genmidi/InstrumentData.html\">InstrumentData</a>))","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":98,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L98"},"def":{"name":"instr_datas=","args":[{"name":"instr_datas","external_name":"instr_datas","restriction":"Array(InstrumentData)"}],"visibility":"Public","body":"@instr_datas = instr_datas"},"external_var":false},{"html_id":"instr_names:Array(String)-instance-method","name":"instr_names","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":99,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L99"},"def":{"name":"instr_names","return_type":"Array(String)","visibility":"Public","body":"@instr_names"},"external_var":false},{"html_id":"instr_names=(instr_names:Array(String))-instance-method","name":"instr_names=","abstract":false,"args":[{"name":"instr_names","external_name":"instr_names","restriction":"Array(String)"}],"args_string":"(instr_names : Array(String))","args_html":"(instr_names : Array(String))","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":99,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L99"},"def":{"name":"instr_names=","args":[{"name":"instr_names","external_name":"instr_names","restriction":"Array(String)"}],"visibility":"Public","body":"@instr_names = instr_names"},"external_var":false}],"types":[{"html_id":"wa-cr/WAD/Genmidi/InstrumentData","path":"WAD/Genmidi/InstrumentData.html","kind":"struct","full_name":"WAD::Genmidi::InstrumentData","name":"InstrumentData","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":102,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L102"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/Genmidi","kind":"class","full_name":"WAD::Genmidi","name":"Genmidi"},"doc":"\"The header is followed by 175 36-byte records of instrument data\".","summary":"<p>&quot;The header is followed by 175 36-byte records of instrument data&quot;.</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":102,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L102"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":104,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L104"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"header:Array(Int8|Int16)-instance-method","name":"header","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":106,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L106"},"def":{"name":"header","return_type":"Array(Int8 | Int16)","visibility":"Public","body":"@header"},"external_var":false},{"html_id":"header=(header:Array(Int8|Int16))-instance-method","name":"header=","abstract":false,"args":[{"name":"header","external_name":"header","restriction":"Array(Int8 | Int16)"}],"args_string":"(header : Array(Int8 | Int16))","args_html":"(header : Array(Int8 | Int16))","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":106,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L106"},"def":{"name":"header=","args":[{"name":"header","external_name":"header","restriction":"Array(Int8 | Int16)"}],"visibility":"Public","body":"@header = header"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":102,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L102"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false},{"html_id":"voice1_data:Array(Int8|Int16)-instance-method","name":"voice1_data","doc":"TODO: Create actual voice data struct","summary":"<p><span class=\"flag orange\">TODO</span>  Create actual voice data struct</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":108,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L108"},"def":{"name":"voice1_data","return_type":"Array(Int8 | Int16)","visibility":"Public","body":"@voice1_data"},"external_var":false},{"html_id":"voice1_data=(voice1_data:Array(Int8|Int16))-instance-method","name":"voice1_data=","doc":"TODO: Create actual voice data struct","summary":"<p><span class=\"flag orange\">TODO</span>  Create actual voice data struct</p>","abstract":false,"args":[{"name":"voice1_data","external_name":"voice1_data","restriction":"Array(Int8 | Int16)"}],"args_string":"(voice1_data : Array(Int8 | Int16))","args_html":"(voice1_data : Array(Int8 | Int16))","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":108,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L108"},"def":{"name":"voice1_data=","args":[{"name":"voice1_data","external_name":"voice1_data","restriction":"Array(Int8 | Int16)"}],"visibility":"Public","body":"@voice1_data = voice1_data"},"external_var":false},{"html_id":"voice2_data:Array(Int8|Int16)-instance-method","name":"voice2_data","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":109,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L109"},"def":{"name":"voice2_data","return_type":"Array(Int8 | Int16)","visibility":"Public","body":"@voice2_data"},"external_var":false},{"html_id":"voice2_data=(voice2_data:Array(Int8|Int16))-instance-method","name":"voice2_data=","abstract":false,"args":[{"name":"voice2_data","external_name":"voice2_data","restriction":"Array(Int8 | Int16)"}],"args_string":"(voice2_data : Array(Int8 | Int16))","args_html":"(voice2_data : Array(Int8 | Int16))","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":109,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L109"},"def":{"name":"voice2_data=","args":[{"name":"voice2_data","external_name":"voice2_data","restriction":"Array(Int8 | Int16)"}],"visibility":"Public","body":"@voice2_data = voice2_data"},"external_var":false}]}]},{"html_id":"wa-cr/WAD/Graphic","path":"WAD/Graphic.html","kind":"class","full_name":"WAD::Graphic","name":"Graphic","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/WritingAdditions/Graphic","kind":"module","full_name":"WritingAdditions::Graphic","name":"Graphic"},{"html_id":"wa-cr/RaylibAdditions/Graphic","kind":"module","full_name":"RaylibAdditions::Graphic","name":"Graphic"},{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/raylib.cr","line_number":431,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/raylib.cr#L431"},{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":435,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L435"},{"filename":"src/write.cr","line_number":366,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L366"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"wa-cr/RaylibAdditions/Graphic","kind":"module","full_name":"RaylibAdditions::Graphic","name":"Graphic"},{"html_id":"wa-cr/WritingAdditions/Graphic","kind":"module","full_name":"WritingAdditions::Graphic","name":"Graphic"}],"extended_modules":[{"html_id":"wa-cr/RaylibAdditions/GraphicClassMethods","kind":"module","full_name":"RaylibAdditions::GraphicClassMethods","name":"GraphicClassMethods"}],"namespace":{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"},"doc":"A WAD graphic\n\nWARNING: The max graphic height is 255. The max width is unlimited\n\nNOTE: Graphic has no `is_graphic?` method.\nInstead, `Graphic#parse` will return `nil` if\n*io* is not a valid graphic","summary":"<p>A WAD graphic</p>","class_methods":[{"html_id":"is_sprite_mark_end?(name:String)-class-method","name":"is_sprite_mark_end?","doc":"Checks to see if *name* is \"S_END\".\n\nReturns true if the name is a sprite marker end:\n```\nsprite_mark_name = \"S_END\"\nif WAD::Graphic.is_sprite_mark_end?(sprite_mark_name)\n  puts \"Is a Sprite Marker End\"\nelse\n  puts \"Is not a Sprite Marker End\"\nend\n```","summary":"<p>Checks to see if <em>name</em> is &quot;S_END&quot;.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":655,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L655"},"def":{"name":"is_sprite_mark_end?","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"name =~ (/^S_END/)"},"external_var":false},{"html_id":"is_sprite_mark_start?(name:String)-class-method","name":"is_sprite_mark_start?","doc":"Checks to see if *name* is \"S_START\".\n\nReturns true if the name is a sprite marker start:\n```\nsprite_mark_name = \"S_START\"\nif WAD::Graphic.is_sprite_mark_start?(sprite_mark_name)\n  puts \"Is a Sprite Marker Start\"\nelse\n  puts \"Is not a Sprite Marker Start\"\nend\n```","summary":"<p>Checks to see if <em>name</em> is &quot;S_START&quot;.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":640,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L640"},"def":{"name":"is_sprite_mark_start?","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"name =~ (/^S_START/)"},"external_var":false},{"html_id":"parse(filename:String|Path):Graphic|Nil-class-method","name":"parse","doc":"Parses a graphic file given the filename\n\nOpens a graphic file and parses it:\n```\nmy_graphic = WAD::Graphic.parse(\"Path/To/Graphic\")\n```","summary":"<p>Parses a graphic file given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Graphic | Nil","args_html":"(filename : String | Path) : <a href=\"../WAD/Graphic.html\">Graphic</a> | Nil","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":509,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L509"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Graphic | Nil","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file)\nend\n\nraise(\"Graphic invalid\")\n"},"external_var":false},{"html_id":"parse(file:File,file_pos:Int=0,size:Int=-1):Graphic|Nil-class-method","name":"parse","doc":"Parses a graphic file given the file\n\nOpens a graphic file and parses it:\n```\nFile.open(\"Path/To/Graphic\") do |file|\n  my_graphic = WAD::Graphic.parse(file)\nend\n```","summary":"<p>Parses a graphic file given the file</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"File"},{"name":"file_pos","default_value":"0","external_name":"file_pos","restriction":"Int"},{"name":"size","default_value":"-1","external_name":"size","restriction":"Int"}],"args_string":"(file : File, file_pos : Int = 0, size : Int = -1) : Graphic | Nil","args_html":"(file : File, file_pos : Int = <span class=\"n\">0</span>, size : Int = <span class=\"n\">-1</span>) : <a href=\"../WAD/Graphic.html\">Graphic</a> | Nil","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":525,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L525"},"def":{"name":"parse","args":[{"name":"file","external_name":"file","restriction":"File"},{"name":"file_pos","default_value":"0","external_name":"file_pos","restriction":"Int"},{"name":"size","default_value":"-1","external_name":"size","restriction":"Int"}],"return_type":"Graphic | Nil","visibility":"Public","body":"begin\n  if size < 0\n    size = file.size\n  end\n  graphic_parse = GraphicParse.new\n  graphic = Graphic.new\n  file.read_at(file_pos, size) do |g_io|\n    graphic.width = g_io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\n    graphic.height = g_io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\n    graphic.leftoffset = g_io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n    graphic.topoffset = g_io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n\n    graphic.width.times do\n      graphic_parse.columnoffsets << (g_io.read_bytes(UInt32, IO::ByteFormat::LittleEndian))\n    end\n\n    graphic.file_size = graphic.file_size + ((graphic.width * 4) + 8)\n\n    graphic.width.times do |i|\n      file.read_at(file_pos + graphic_parse.columnoffsets[i], size - graphic_parse.columnoffsets[i]) do |c_io|\n        rowstart = 0\n        column = GraphicParse::Column.new\n\n        loop do\n          rowstart = c_io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n          post = GraphicParse::Post.new\n          post.topdelta = rowstart\n          if rowstart == 255\n            graphic.file_size = graphic.file_size + 1\n            break\n          end\n\n          post.length = c_io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n          graphic.file_size = graphic.file_size + (post.length.to_u32 + 4.to_u32)\n          dummy = c_io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n\n\n\n\n\n\n\n\n\n\n\n          pixel_parse(i, column, post, c_io)\n          dummy = c_io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n        end\n\n        graphic_parse.columns << column\n\n        if graphic_parse.columns.size == graphic.width\n          begin\n            while (graphic.file_size < size) && (i = c_io.read_bytes(UInt8, IO::ByteFormat::LittleEndian))\n              if i != 0\n                break\n              end\n              graphic.file_size = graphic.file_size + 1\n            end\n          rescue e : IO::EOFError\n          end\n        end\n      end\n    end\n  end\n\n  if size == graphic.file_size\n    graphic.reset_data\n    graphic_parse.columns.each do |column|\n      column.posts.each do |post|\n        post.row_column_data.each do |pixel|\n          graphic.data[pixel.column + (pixel.row * graphic.width)] = pixel.pixel\n        end\n      end\n    end\n    return graphic\n  else\n    return nil\n  end\nrescue e : IO::EOFError\n  return nil\nrescue e : ArgumentError\n  return nil\nrescue e : OverflowError\n  return nil\nend"},"external_var":false}],"instance_methods":[{"html_id":"[](x:Int,y:Int)-instance-method","name":"[]","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"args_string":"(x : Int, y : Int)","args_html":"(x : Int, y : Int)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":493,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L493"},"def":{"name":"[]","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"visibility":"Public","body":"data[x + (y * width)]"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":437,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L437"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"data:Array(UInt8|Nil)-instance-method","name":"data","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":458,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L458"},"def":{"name":"data","return_type":"Array(UInt8 | ::Nil)","visibility":"Public","body":"@data"},"external_var":false},{"html_id":"file_size:UInt32-instance-method","name":"file_size","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":456,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L456"},"def":{"name":"file_size","return_type":"UInt32","visibility":"Public","body":"@file_size"},"external_var":false},{"html_id":"file_size=(file_size:UInt32)-instance-method","name":"file_size=","abstract":false,"args":[{"name":"file_size","external_name":"file_size","restriction":"UInt32"}],"args_string":"(file_size : UInt32)","args_html":"(file_size : UInt32)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":456,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L456"},"def":{"name":"file_size=","args":[{"name":"file_size","external_name":"file_size","restriction":"UInt32"}],"visibility":"Public","body":"@file_size = file_size"},"external_var":false},{"html_id":"height:UInt16-instance-method","name":"height","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":453,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L453"},"def":{"name":"height","return_type":"UInt16","visibility":"Public","body":"@height"},"external_var":false},{"html_id":"height=(height:UInt16)-instance-method","name":"height=","abstract":false,"args":[{"name":"height","external_name":"height","restriction":"UInt16"}],"args_string":"(height : UInt16)","args_html":"(height : UInt16)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":453,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L453"},"def":{"name":"height=","args":[{"name":"height","external_name":"height","restriction":"UInt16"}],"visibility":"Public","body":"@height = height"},"external_var":false},{"html_id":"leftoffset:Int16-instance-method","name":"leftoffset","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":454,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L454"},"def":{"name":"leftoffset","return_type":"Int16","visibility":"Public","body":"@leftoffset"},"external_var":false},{"html_id":"leftoffset=(leftoffset:Int16)-instance-method","name":"leftoffset=","abstract":false,"args":[{"name":"leftoffset","external_name":"leftoffset","restriction":"Int16"}],"args_string":"(leftoffset : Int16)","args_html":"(leftoffset : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":454,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L454"},"def":{"name":"leftoffset=","args":[{"name":"leftoffset","external_name":"leftoffset","restriction":"Int16"}],"visibility":"Public","body":"@leftoffset = leftoffset"},"external_var":false},{"html_id":"reset_data-instance-method","name":"reset_data","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":497,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L497"},"def":{"name":"reset_data","visibility":"Public","body":"(width.to_i * height.to_i).times do\n  @data << nil\nend"},"external_var":false},{"html_id":"set_pixel(x:Int,y:Int,value:Int)-instance-method","name":"set_pixel","doc":"Sets a pixel in the graphic to be *value*.\nRaises an error if value is not within the bounds\nof a `UInt8`\n\nNOTE: *value* does not refer to an rgb color,\nbut instead to an index in the colors of a `WAD::Playpal::Palette`\n\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\n\nmy_graphic = my_wad.graphics[\"MyGraphic\"]\n\nmy_graphic[2, 3] # => Returns the value of the pixel at x=2 y=3\n\nmy_graphic.set_pixel(2, 3, 120) # => Sets the value of the pixel at x=2 y=3 to be 120\n\nmy_graphic[2, 3] # => 120\n\nmy_graphic.set_pixel(2, 3, -1) # => Raises an exception\n\nmy_graphic.set_pixel(2, 3, 256) # => Raises an exception\n```","summary":"<p>Sets a pixel in the graphic to be <em>value</em>.</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"value","external_name":"value","restriction":"Int"}],"args_string":"(x : Int, y : Int, value : Int)","args_html":"(x : Int, y : Int, value : Int)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":482,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L482"},"def":{"name":"set_pixel","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"value","external_name":"value","restriction":"Int"}],"visibility":"Public","body":"if x > width || y > height\n  raise(\"Out of bounds\")\nend\nif self[x, y]\n  begin\n    data[x + (y * width)] = value.to_u8\n  rescue e : OverflowError\n    raise(\"'#{value}' IS NOT WITHIN THE BOUNDS OF A UInt8\")\n  end\nend\n"},"external_var":false},{"html_id":"topoffset:Int16-instance-method","name":"topoffset","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":455,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L455"},"def":{"name":"topoffset","return_type":"Int16","visibility":"Public","body":"@topoffset"},"external_var":false},{"html_id":"topoffset=(topoffset:Int16)-instance-method","name":"topoffset=","abstract":false,"args":[{"name":"topoffset","external_name":"topoffset","restriction":"Int16"}],"args_string":"(topoffset : Int16)","args_html":"(topoffset : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":455,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L455"},"def":{"name":"topoffset=","args":[{"name":"topoffset","external_name":"topoffset","restriction":"Int16"}],"visibility":"Public","body":"@topoffset = topoffset"},"external_var":false},{"html_id":"width:UInt16-instance-method","name":"width","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":452,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L452"},"def":{"name":"width","return_type":"UInt16","visibility":"Public","body":"@width"},"external_var":false},{"html_id":"width=(width:UInt16)-instance-method","name":"width=","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"UInt16"}],"args_string":"(width : UInt16)","args_html":"(width : UInt16)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":452,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L452"},"def":{"name":"width=","args":[{"name":"width","external_name":"width","restriction":"UInt16"}],"visibility":"Public","body":"@width = width"},"external_var":false}],"types":[{"html_id":"wa-cr/WAD/Graphic/Offsets","path":"WAD/Graphic/Offsets.html","kind":"enum","full_name":"WAD::Graphic::Offsets","name":"Offsets","abstract":false,"ancestors":[{"html_id":"wa-cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"wa-cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":440,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L440"}],"repository_name":"wa-cr","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"TopLeft","name":"TopLeft","value":"0"},{"id":"TopCenter","name":"TopCenter","value":"1"},{"id":"TopRight","name":"TopRight","value":"2"},{"id":"MiddleLeft","name":"MiddleLeft","value":"3"},{"id":"MiddleCenter","name":"MiddleCenter","value":"4"},{"id":"MiddleRight","name":"MiddleRight","value":"5"},{"id":"BottomLeft","name":"BottomLeft","value":"6"},{"id":"BottomCenter","name":"BottomCenter","value":"7"},{"id":"BottomRight","name":"BottomRight","value":"8"}],"namespace":{"html_id":"wa-cr/WAD/Graphic","kind":"class","full_name":"WAD::Graphic","name":"Graphic"},"doc":"An enum for preset offsets of the graphic","summary":"<p>An enum for preset offsets of the graphic</p>","instance_methods":[{"html_id":"bottom_center?-instance-method","name":"bottom_center?","doc":"Returns `true` if this enum value equals `BottomCenter`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../WAD/Graphic/Offsets.html#BottomCenter\">BottomCenter</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":448,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L448"},"def":{"name":"bottom_center?","visibility":"Public","body":"self == BottomCenter"},"external_var":false},{"html_id":"bottom_left?-instance-method","name":"bottom_left?","doc":"Returns `true` if this enum value equals `BottomLeft`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../WAD/Graphic/Offsets.html#BottomLeft\">BottomLeft</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":447,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L447"},"def":{"name":"bottom_left?","visibility":"Public","body":"self == BottomLeft"},"external_var":false},{"html_id":"bottom_right?-instance-method","name":"bottom_right?","doc":"Returns `true` if this enum value equals `BottomRight`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../WAD/Graphic/Offsets.html#BottomRight\">BottomRight</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":449,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L449"},"def":{"name":"bottom_right?","visibility":"Public","body":"self == BottomRight"},"external_var":false},{"html_id":"middle_center?-instance-method","name":"middle_center?","doc":"Returns `true` if this enum value equals `MiddleCenter`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../WAD/Graphic/Offsets.html#MiddleCenter\">MiddleCenter</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":445,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L445"},"def":{"name":"middle_center?","visibility":"Public","body":"self == MiddleCenter"},"external_var":false},{"html_id":"middle_left?-instance-method","name":"middle_left?","doc":"Returns `true` if this enum value equals `MiddleLeft`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../WAD/Graphic/Offsets.html#MiddleLeft\">MiddleLeft</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":444,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L444"},"def":{"name":"middle_left?","visibility":"Public","body":"self == MiddleLeft"},"external_var":false},{"html_id":"middle_right?-instance-method","name":"middle_right?","doc":"Returns `true` if this enum value equals `MiddleRight`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../WAD/Graphic/Offsets.html#MiddleRight\">MiddleRight</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":446,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L446"},"def":{"name":"middle_right?","visibility":"Public","body":"self == MiddleRight"},"external_var":false},{"html_id":"top_center?-instance-method","name":"top_center?","doc":"Returns `true` if this enum value equals `TopCenter`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../WAD/Graphic/Offsets.html#TopCenter\">TopCenter</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":442,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L442"},"def":{"name":"top_center?","visibility":"Public","body":"self == TopCenter"},"external_var":false},{"html_id":"top_left?-instance-method","name":"top_left?","doc":"Returns `true` if this enum value equals `TopLeft`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../WAD/Graphic/Offsets.html#TopLeft\">TopLeft</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":441,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L441"},"def":{"name":"top_left?","visibility":"Public","body":"self == TopLeft"},"external_var":false},{"html_id":"top_right?-instance-method","name":"top_right?","doc":"Returns `true` if this enum value equals `TopRight`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../../WAD/Graphic/Offsets.html#TopRight\">TopRight</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":443,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L443"},"def":{"name":"top_right?","visibility":"Public","body":"self == TopRight"},"external_var":false}]}]},{"html_id":"wa-cr/WAD/Map","path":"WAD/Map.html","kind":"class","full_name":"WAD::Map","name":"Map","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/WritingAdditions/Map","kind":"module","full_name":"WritingAdditions::Map","name":"Map"},{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":3,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L3"},{"filename":"src/write.cr","line_number":314,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L314"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MAP_CONTENTS","name":"MAP_CONTENTS","value":"[\"THINGS\", \"LINEDEFS\", \"SIDEDEFS\", \"VERTEXES\", \"SEGS\", \"SSECTORS\", \"NODES\", \"SECTORS\", \"REJECT\", \"BLOCKMAP\", \"BEHAVIOR\"]","doc":"A list of things that the map contains","summary":"<p>A list of things that the map contains</p>"},{"id":"THING_TYPES","name":"THING_TYPES","value":"{1 => {\"Player 1 start\", \"PLAYA1\", 16}, 2 => {\"Player 2 start\", \"PLAYA1\", 16}, 3 => {\"Player 3 start\", \"PLAYA1\", 16}, 4 => {\"Player 4 start\", \"PLAYA1\", 16}, 5 => {\"Blue keycard\", \"BKEYA0\", 20}, 6 => {\"Yellow keycard\", \"YKEYA0\", 20}, 7 => {\"Spiderdemon\", \"SPIDA1D1\", 128}, 8 => {\"Backpack\", \"BPAKA0\", 20}, 9 => {\"Shotgun guy\", \"SPOSA1\", 20}, 10 => {\"Bloody mess\", \"PLAYW0\", 20}, 11 => {\"Deathmatch start\", \"PLAYE1\", 16}, 12 => {\"Bloody mess\", \"PLAYW0\", 20}, 13 => {\"Red keycard\", \"RKEYA0\", 20}, 14 => {\"Teleport landing\", \"TFOGA0\", 20}, 15 => {\"Dead player\", \"PLAYN0\", 20}, 16 => {\"Cyberdemon\", \"CYBRA1\", 40}, 17 => {\"Energy cell pack\", \"CELPA0\", 20}, 18 => {\"Dead former human\", \"POSSL0\", 20}, 19 => {\"Dead former sergeant\", \"SPOSL0\", 20}, 20 => {\"Dead imp\", \"TROOM0\", 20}, 21 => {\"Dead demon\", \"SARGN0\", 20}, 22 => {\"Dead cacodemon\", \"HEADL0\", 20}, 23 => {\"Dead lost soul (invisible)\", \"\", 20}, 24 => {\"Pool of blood and flesh\", \"POL5A0\", 20}, 25 => {\"Impaled human\", \"POL1A0\", 16}, 26 => {\"Twitching impaled human\", \"POL6A0\", 16}, 27 => {\"Skull on a pole\", \"POL4A0\", 16}, 28 => {\"Five skulls \\\"shish kebab\\\"\", \"POL2A0\", 16}, 29 => {\"Pile of skulls and candles\", \"POL3A0\", 16}, 30 => {\"Tall green pillar\", \"COL1A0\", 16}, 31 => {\"Short green pillar\", \"COL2A0\", 16}, 32 => {\"Tall red pillar\", \"COL3A0\", 16}, 33 => {\"Short red pillar\", \"COL4A0\", 16}, 34 => {\"Candle\", \"CANDA0\", 20}, 35 => {\"Candelabra\", \"CBRAA0\", 16}, 36 => {\"Short green pillar with beating heart\", \"COL5A0\", 16}, 37 => {\"Short red pillar with skull\", \"COL6A0\", 16}, 38 => {\"Red skull key\", \"RSKUA0\", 20}, 39 => {\"Yellow skull key\", \"YSKUA0\", 20}, 40 => {\"Blue skull key\", \"BSKUA0\", 20}, 41 => {\"Evil eye\", \"CEYEA0\", 16}, 42 => {\"Floating skull\", \"FSKUA0\", 16}, 43 => {\"Burnt tree\", \"TRE1A0\", 16}, 44 => {\"Tall blue firestick\", \"TBLUA0\", 16}, 45 => {\"Tall green firestick\", \"TGRNA0\", 16}, 46 => {\"Tall red firestick\", \"TREDA0\", 16}, 47 => {\"Brown stump\", \"SMITA0\", 16}, 48 => {\"Tall techno column\", \"ELECA0\", 16}, 49 => {\"Hanging victim, twitching\", \"GOR1A0\", 16}, 50 => {\"Hanging victim, arms out\", \"GOR2A0\", 16}, 51 => {\"Hanging victim, one-legged\", \"GOR3A0\", 16}, 52 => {\"Hanging pair of legs\", \"GOR4A0\", 16}, 53 => {\"Hanging leg\", \"GOR5A0\", 16}, 54 => {\"Large brown tree\", \"TRE2A0\", 32}, 55 => {\"Short blue firestick\", \"SMBTA0\", 16}, 56 => {\"Short green firestick\", \"SMGTA0\", 16}, 57 => {\"Short red firestick\", \"SMRTA0\", 16}, 58 => {\"Spectre\", \"SARGA1\", 30}, 59 => {\"Hanging victim, arms out\", \"GOR2A0\", 20}, 60 => {\"Hanging pair of legs\", \"GOR4A0\", 20}, 61 => {\"Hanging victim, one-legged\", \"GOR3A0\", 20}, 62 => {\"Hanging leg\", \"GOR5A0\", 20}, 63 => {\"Hanging victim, twitching\", \"GOR1A0\", 20}, 64 => {\"Arch-vile\", \"VILEA1D1\", 20}, 65 => {\"Heavy weapon dude\", \"CPOSA1\", 20}, 66 => {\"Revenant\", \"SKELA1D1\", 20}, 67 => {\"Mancubus\", \"FATTA1\", 48}, 68 => {\"Arachnotron\", \"BSPIA1D1\", 64}, 69 => {\"Hell knight\", \"BOS2A1C1\", 24}, 70 => {\"Burning barrel\", \"FCANA0\", 16}, 71 => {\"Pain elemental\", \"PAINA1\", 31}, 72 => {\"Commander keen\", \"KEENA0\", 16}, 73 => {\"Hanging victim, guts removed\", \"HDB1A0\", 16}, 74 => {\"Hanging victim, guts and brain removed\", \"HDB2A0\", 16}, 75 => {\"Hanging torso, looking down\", \"HDB3A0\", 16}, 76 => {\"Hanging torso, open skull\", \"HDB4A0\", 16}, 77 => {\"Hanging torso, looking up\", \"HDB5A0\", 16}, 78 => {\"Hanging torso, brain removed\", \"HDB6A0\", 16}, 79 => {\"Pool of blood\", \"POB1A0\", 20}, 80 => {\"Pool of blood\", \"POB2A0\", 20}, 81 => {\"Pool of brains\", \"BRS1A0\", 20}, 82 => {\"Super shotgun\", \"SGN2A0\", 20}, 83 => {\"Megasphere\", \"MEGAA0\", 20}, 84 => {\"Wolfenstein SS\", \"SSWVA1\", 20}, 85 => {\"Tall techno floor lamp\", \"TLMPA0\", 16}, 86 => {\"Short techno floor lamp\", \"TLP2A0\", 16}, 87 => {\"Spawn spot\", \"FIREA0\", 20}, 88 => {\"Romero's head\", \"BBRNA0\", 16}, 89 => {\"Monster spawner\", \"BOSFA0\", 20}, 2001 => {\"Shotgun\", \"SHOTA0\", 20}, 2002 => {\"Chaingun\", \"MGUNA0\", 20}, 2003 => {\"Rocket launcher\", \"LAUNA0\", 20}, 2004 => {\"Plasma gun \", \"PLASA0\", 20}, 2005 => {\"Chainsaw\", \"CSAWA0\", 20}, 2006 => {\"BFG9000\", \"BFUGA0\", 20}, 2007 => {\"Clip\", \"CLIPA0\", 20}, 2008 => {\"4 shotgun shells\", \"SHELA0\", 20}, 2010 => {\"Rocket\", \"ROCKA0\", 20}, 2011 => {\"Stimpack\", \"STIMA0\", 20}, 2012 => {\"Medikit\", \"MEDIA0\", 20}, 2013 => {\"Supercharge\", \"SOULA0\", 20}, 2014 => {\"Health bonus\", \"BON1A0\", 20}, 2015 => {\"Armor bonus\", \"BON2A0\", 20}, 2018 => {\"Armor (green)\", \"ARM1A0\", 20}, 2019 => {\"Megaarmor (blue)\", \"ARM2A0\", 20}, 2022 => {\"Invulnerability\", \"PINVA0\", 20}, 2023 => {\"Beserk\", \"PSTRA0\", 20}, 2024 => {\"Partial invisibility\", \"PINSA0\", 20}, 2025 => {\"Radiation shielding suit\", \"SUITA0\", 20}, 2026 => {\"Computer area map\", \"PMAPA0\", 20}, 2028 => {\"Floor lamp\", \"COLUA0\", 16}, 2035 => {\"Exploding barrel\", \"BAR1A0\", 10}, 2045 => {\"Light amplification visor\", \"PVISA0\", 20}, 2046 => {\"Box of rockets\", \"BROKA0\", 20}, 2047 => {\"Energy cell\", \"CELLA0\", 20}, 2048 => {\"Box of bullets\", \"AMMOA0\", 20}, 2049 => {\"Box of shotgun shells\", \"SBOXA0\", 20}, 3001 => {\"Imp\", \"TROOA1\", 20}, 3002 => {\"Demon\", \"SARGA1\", 30}, 3003 => {\"Baron of hell\", \"BOSSA1\", 24}, 3004 => {\"Zombieman\", \"POSSA1\", 20}, 3005 => {\"Cacodemon\", \"HEADA1\", 31}, 3006 => {\"Lost soul\", \"SKULA1\", 16}}","doc":"Hashes of a thing type number to the description, the default sprite of the thing, and the radius","summary":"<p>Hashes of a thing type number to the description, the default sprite of the thing, and the radius</p>"}],"included_modules":[{"html_id":"wa-cr/WritingAdditions/Map","kind":"module","full_name":"WritingAdditions::Map","name":"Map"}],"namespace":{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"},"doc":"Map containing all directories of data lumps.","summary":"<p>Map containing all directories of data lumps.</p>","class_methods":[{"html_id":"is_map?(name:String)-class-method","name":"is_map?","doc":"Checks to see if *name* is a map with the name format 'ExMx' or 'MAPxx'.\n\nReturns true if the name is a map:\n```\nmap_name = \"E1M1\"\nif WAD::Map.is_map?(map_name)\n  puts \"Is a Map\"\nelse\n  puts \"Is not a Map\"\nend\n```","summary":"<p>Checks to see if <em>name</em> is a map with the name format 'ExMx' or 'MAPxx'.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":866,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L866"},"def":{"name":"is_map?","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"(name =~ (/^E\\dM\\d/)) || (name =~ (/^MAP\\d\\d/))"},"external_var":false}],"constructors":[{"html_id":"new(name:String=\"\")-class-method","name":"new","abstract":false,"args":[{"name":"name","default_value":"\"\"","external_name":"name","restriction":"String"}],"args_string":"(name : String = \"\")","args_html":"(name : String = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":180,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L180"},"def":{"name":"new","args":[{"name":"name","default_value":"\"\"","external_name":"name","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"blockmap:Blockmap-instance-method","name":"blockmap","doc":"The parsed blockmap lump","summary":"<p>The parsed blockmap lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":178,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L178"},"def":{"name":"blockmap","return_type":"Blockmap","visibility":"Public","body":"@blockmap"},"external_var":false},{"html_id":"blockmap=(blockmap:Blockmap)-instance-method","name":"blockmap=","doc":"The parsed blockmap lump","summary":"<p>The parsed blockmap lump</p>","abstract":false,"args":[{"name":"blockmap","external_name":"blockmap","restriction":"Blockmap"}],"args_string":"(blockmap : Blockmap)","args_html":"(blockmap : <a href=\"../WAD/Map/Blockmap.html\">Blockmap</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":178,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L178"},"def":{"name":"blockmap=","args":[{"name":"blockmap","external_name":"blockmap","restriction":"Blockmap"}],"visibility":"Public","body":"@blockmap = blockmap"},"external_var":false},{"html_id":"blockmap_directory:Directory-instance-method","name":"blockmap_directory","doc":"The directory of the blockmap lump","summary":"<p>The directory of the blockmap lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":157,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L157"},"def":{"name":"blockmap_directory","return_type":"Directory","visibility":"Public","body":"@blockmap_directory"},"external_var":false},{"html_id":"blockmap_directory=(blockmap_directory:Directory)-instance-method","name":"blockmap_directory=","doc":"The directory of the blockmap lump","summary":"<p>The directory of the blockmap lump</p>","abstract":false,"args":[{"name":"blockmap_directory","external_name":"blockmap_directory","restriction":"Directory"}],"args_string":"(blockmap_directory : Directory)","args_html":"(blockmap_directory : <a href=\"../WAD/Directory.html\">Directory</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":157,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L157"},"def":{"name":"blockmap_directory=","args":[{"name":"blockmap_directory","external_name":"blockmap_directory","restriction":"Directory"}],"visibility":"Public","body":"@blockmap_directory = blockmap_directory"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":5,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L5"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"insert_next_property(prop:Directory)-instance-method","name":"insert_next_property","doc":"Inserts a directory based off of the property:\n```\nmap_name = \"E1M1\"\nif WAD::Map.is_map?(map_name)\n  puts \"Is a Map\"\nelse\n  puts \"Is not a Map\"\nend\n```","summary":"<p>Inserts a directory based off of the property: <code>map_name = &quot;E1M1&quot; if <a href=\"../WAD/Map.html#is_map%3F%28name%3AString%29-class-method\">WAD::Map.is_map?(map_name)</a>   puts &quot;Is a <a href=\"../WAD/Map.html\">Map</a>&quot; else   puts &quot;Is not a <a href=\"../WAD/Map.html\">Map</a>&quot; end</code></p>","abstract":false,"args":[{"name":"prop","external_name":"prop","restriction":"Directory"}],"args_string":"(prop : Directory)","args_html":"(prop : <a href=\"../WAD/Directory.html\">Directory</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":879,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L879"},"def":{"name":"insert_next_property","args":[{"name":"prop","external_name":"prop","restriction":"Directory"}],"visibility":"Public","body":"case prop.name\nwhen \"THINGS\"\n  @things_directory = prop\nwhen \"LINEDEFS\"\n  @linedefs_directory = prop\nwhen \"SIDEDEFS\"\n  @sidedefs_directory = prop\nwhen \"VERTEXES\"\n  @vertexes_directory = prop\nwhen \"SEGS\"\n  @segs_directory = prop\nwhen \"SSECTORS\"\n  @ssectors_directory = prop\nwhen \"NODES\"\n  @nodes_directory = prop\nwhen \"SECTORS\"\n  @sectors_directory = prop\nwhen \"REJECT\"\n  @reject_directory = prop\nwhen \"BLOCKMAP\"\n  @blockmap_directory = prop\nend"},"external_var":false},{"html_id":"linedefs:Array(Linedef)-instance-method","name":"linedefs","doc":"The parsed linedefs lump","summary":"<p>The parsed linedefs lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":162,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L162"},"def":{"name":"linedefs","return_type":"Array(Linedef)","visibility":"Public","body":"@linedefs"},"external_var":false},{"html_id":"linedefs=(linedefs:Array(Linedef))-instance-method","name":"linedefs=","doc":"The parsed linedefs lump","summary":"<p>The parsed linedefs lump</p>","abstract":false,"args":[{"name":"linedefs","external_name":"linedefs","restriction":"Array(Linedef)"}],"args_string":"(linedefs : Array(Linedef))","args_html":"(linedefs : Array(<a href=\"../WAD/Map/Linedef.html\">Linedef</a>))","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":162,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L162"},"def":{"name":"linedefs=","args":[{"name":"linedefs","external_name":"linedefs","restriction":"Array(Linedef)"}],"visibility":"Public","body":"@linedefs = linedefs"},"external_var":false},{"html_id":"linedefs_directory:Directory-instance-method","name":"linedefs_directory","doc":"The directory of the linedefs lump","summary":"<p>The directory of the linedefs lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":141,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L141"},"def":{"name":"linedefs_directory","return_type":"Directory","visibility":"Public","body":"@linedefs_directory"},"external_var":false},{"html_id":"linedefs_directory=(linedefs_directory:Directory)-instance-method","name":"linedefs_directory=","doc":"The directory of the linedefs lump","summary":"<p>The directory of the linedefs lump</p>","abstract":false,"args":[{"name":"linedefs_directory","external_name":"linedefs_directory","restriction":"Directory"}],"args_string":"(linedefs_directory : Directory)","args_html":"(linedefs_directory : <a href=\"../WAD/Directory.html\">Directory</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":141,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L141"},"def":{"name":"linedefs_directory=","args":[{"name":"linedefs_directory","external_name":"linedefs_directory","restriction":"Directory"}],"visibility":"Public","body":"@linedefs_directory = linedefs_directory"},"external_var":false},{"html_id":"name:String-instance-method","name":"name","doc":"The name of the map.","summary":"<p>The name of the map.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":137,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L137"},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"},"external_var":false},{"html_id":"name=(name:String)-instance-method","name":"name=","doc":"The name of the map.","summary":"<p>The name of the map.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":137,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L137"},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"},"external_var":false},{"html_id":"nodes:Array(Node)-instance-method","name":"nodes","doc":"The parsed nodes lump","summary":"<p>The parsed nodes lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":172,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L172"},"def":{"name":"nodes","return_type":"Array(Node)","visibility":"Public","body":"@nodes"},"external_var":false},{"html_id":"nodes=(nodes:Array(Node))-instance-method","name":"nodes=","doc":"The parsed nodes lump","summary":"<p>The parsed nodes lump</p>","abstract":false,"args":[{"name":"nodes","external_name":"nodes","restriction":"Array(Node)"}],"args_string":"(nodes : Array(Node))","args_html":"(nodes : Array(<a href=\"../WAD/Map/Node.html\">Node</a>))","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":172,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L172"},"def":{"name":"nodes=","args":[{"name":"nodes","external_name":"nodes","restriction":"Array(Node)"}],"visibility":"Public","body":"@nodes = nodes"},"external_var":false},{"html_id":"nodes_directory:Directory-instance-method","name":"nodes_directory","doc":"The directory of the nodes lump","summary":"<p>The directory of the nodes lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":151,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L151"},"def":{"name":"nodes_directory","return_type":"Directory","visibility":"Public","body":"@nodes_directory"},"external_var":false},{"html_id":"nodes_directory=(nodes_directory:Directory)-instance-method","name":"nodes_directory=","doc":"The directory of the nodes lump","summary":"<p>The directory of the nodes lump</p>","abstract":false,"args":[{"name":"nodes_directory","external_name":"nodes_directory","restriction":"Directory"}],"args_string":"(nodes_directory : Directory)","args_html":"(nodes_directory : <a href=\"../WAD/Directory.html\">Directory</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":151,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L151"},"def":{"name":"nodes_directory=","args":[{"name":"nodes_directory","external_name":"nodes_directory","restriction":"Directory"}],"visibility":"Public","body":"@nodes_directory = nodes_directory"},"external_var":false},{"html_id":"reject:Reject-instance-method","name":"reject","doc":"The parsed reject lump","summary":"<p>The parsed reject lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":176,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L176"},"def":{"name":"reject","return_type":"Reject","visibility":"Public","body":"@reject"},"external_var":false},{"html_id":"reject=(reject:Reject)-instance-method","name":"reject=","doc":"The parsed reject lump","summary":"<p>The parsed reject lump</p>","abstract":false,"args":[{"name":"reject","external_name":"reject","restriction":"Reject"}],"args_string":"(reject : Reject)","args_html":"(reject : <a href=\"../WAD/Map/Reject.html\">Reject</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":176,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L176"},"def":{"name":"reject=","args":[{"name":"reject","external_name":"reject","restriction":"Reject"}],"visibility":"Public","body":"@reject = reject"},"external_var":false},{"html_id":"reject_directory:Directory-instance-method","name":"reject_directory","doc":"The directory of the reject lump","summary":"<p>The directory of the reject lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":155,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L155"},"def":{"name":"reject_directory","return_type":"Directory","visibility":"Public","body":"@reject_directory"},"external_var":false},{"html_id":"reject_directory=(reject_directory:Directory)-instance-method","name":"reject_directory=","doc":"The directory of the reject lump","summary":"<p>The directory of the reject lump</p>","abstract":false,"args":[{"name":"reject_directory","external_name":"reject_directory","restriction":"Directory"}],"args_string":"(reject_directory : Directory)","args_html":"(reject_directory : <a href=\"../WAD/Directory.html\">Directory</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":155,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L155"},"def":{"name":"reject_directory=","args":[{"name":"reject_directory","external_name":"reject_directory","restriction":"Directory"}],"visibility":"Public","body":"@reject_directory = reject_directory"},"external_var":false},{"html_id":"sectors:Array(Sector)-instance-method","name":"sectors","doc":"The parsed sectors lump","summary":"<p>The parsed sectors lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":174,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L174"},"def":{"name":"sectors","return_type":"Array(Sector)","visibility":"Public","body":"@sectors"},"external_var":false},{"html_id":"sectors=(sectors:Array(Sector))-instance-method","name":"sectors=","doc":"The parsed sectors lump","summary":"<p>The parsed sectors lump</p>","abstract":false,"args":[{"name":"sectors","external_name":"sectors","restriction":"Array(Sector)"}],"args_string":"(sectors : Array(Sector))","args_html":"(sectors : Array(<a href=\"../WAD/Map/Sector.html\">Sector</a>))","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":174,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L174"},"def":{"name":"sectors=","args":[{"name":"sectors","external_name":"sectors","restriction":"Array(Sector)"}],"visibility":"Public","body":"@sectors = sectors"},"external_var":false},{"html_id":"sectors_directory:Directory-instance-method","name":"sectors_directory","doc":"The directory of the sectors lump","summary":"<p>The directory of the sectors lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":153,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L153"},"def":{"name":"sectors_directory","return_type":"Directory","visibility":"Public","body":"@sectors_directory"},"external_var":false},{"html_id":"sectors_directory=(sectors_directory:Directory)-instance-method","name":"sectors_directory=","doc":"The directory of the sectors lump","summary":"<p>The directory of the sectors lump</p>","abstract":false,"args":[{"name":"sectors_directory","external_name":"sectors_directory","restriction":"Directory"}],"args_string":"(sectors_directory : Directory)","args_html":"(sectors_directory : <a href=\"../WAD/Directory.html\">Directory</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":153,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L153"},"def":{"name":"sectors_directory=","args":[{"name":"sectors_directory","external_name":"sectors_directory","restriction":"Directory"}],"visibility":"Public","body":"@sectors_directory = sectors_directory"},"external_var":false},{"html_id":"segs:Array(Seg)-instance-method","name":"segs","doc":"The parsed segs lump","summary":"<p>The parsed segs lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":168,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L168"},"def":{"name":"segs","return_type":"Array(Seg)","visibility":"Public","body":"@segs"},"external_var":false},{"html_id":"segs=(segs:Array(Seg))-instance-method","name":"segs=","doc":"The parsed segs lump","summary":"<p>The parsed segs lump</p>","abstract":false,"args":[{"name":"segs","external_name":"segs","restriction":"Array(Seg)"}],"args_string":"(segs : Array(Seg))","args_html":"(segs : Array(<a href=\"../WAD/Map/Seg.html\">Seg</a>))","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":168,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L168"},"def":{"name":"segs=","args":[{"name":"segs","external_name":"segs","restriction":"Array(Seg)"}],"visibility":"Public","body":"@segs = segs"},"external_var":false},{"html_id":"segs_directory:Directory-instance-method","name":"segs_directory","doc":"The directory of the segs lump","summary":"<p>The directory of the segs lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":147,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L147"},"def":{"name":"segs_directory","return_type":"Directory","visibility":"Public","body":"@segs_directory"},"external_var":false},{"html_id":"segs_directory=(segs_directory:Directory)-instance-method","name":"segs_directory=","doc":"The directory of the segs lump","summary":"<p>The directory of the segs lump</p>","abstract":false,"args":[{"name":"segs_directory","external_name":"segs_directory","restriction":"Directory"}],"args_string":"(segs_directory : Directory)","args_html":"(segs_directory : <a href=\"../WAD/Directory.html\">Directory</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":147,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L147"},"def":{"name":"segs_directory=","args":[{"name":"segs_directory","external_name":"segs_directory","restriction":"Directory"}],"visibility":"Public","body":"@segs_directory = segs_directory"},"external_var":false},{"html_id":"sidedefs:Array(Sidedef)-instance-method","name":"sidedefs","doc":"The parsed sidedefs lump","summary":"<p>The parsed sidedefs lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":164,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L164"},"def":{"name":"sidedefs","return_type":"Array(Sidedef)","visibility":"Public","body":"@sidedefs"},"external_var":false},{"html_id":"sidedefs=(sidedefs:Array(Sidedef))-instance-method","name":"sidedefs=","doc":"The parsed sidedefs lump","summary":"<p>The parsed sidedefs lump</p>","abstract":false,"args":[{"name":"sidedefs","external_name":"sidedefs","restriction":"Array(Sidedef)"}],"args_string":"(sidedefs : Array(Sidedef))","args_html":"(sidedefs : Array(<a href=\"../WAD/Map/Sidedef.html\">Sidedef</a>))","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":164,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L164"},"def":{"name":"sidedefs=","args":[{"name":"sidedefs","external_name":"sidedefs","restriction":"Array(Sidedef)"}],"visibility":"Public","body":"@sidedefs = sidedefs"},"external_var":false},{"html_id":"sidedefs_directory:Directory-instance-method","name":"sidedefs_directory","doc":"The directory of the sidedefs lump","summary":"<p>The directory of the sidedefs lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":143,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L143"},"def":{"name":"sidedefs_directory","return_type":"Directory","visibility":"Public","body":"@sidedefs_directory"},"external_var":false},{"html_id":"sidedefs_directory=(sidedefs_directory:Directory)-instance-method","name":"sidedefs_directory=","doc":"The directory of the sidedefs lump","summary":"<p>The directory of the sidedefs lump</p>","abstract":false,"args":[{"name":"sidedefs_directory","external_name":"sidedefs_directory","restriction":"Directory"}],"args_string":"(sidedefs_directory : Directory)","args_html":"(sidedefs_directory : <a href=\"../WAD/Directory.html\">Directory</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":143,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L143"},"def":{"name":"sidedefs_directory=","args":[{"name":"sidedefs_directory","external_name":"sidedefs_directory","restriction":"Directory"}],"visibility":"Public","body":"@sidedefs_directory = sidedefs_directory"},"external_var":false},{"html_id":"ssectors:Array(Ssector)-instance-method","name":"ssectors","doc":"The parsed ssectors lump","summary":"<p>The parsed ssectors lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":170,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L170"},"def":{"name":"ssectors","return_type":"Array(Ssector)","visibility":"Public","body":"@ssectors"},"external_var":false},{"html_id":"ssectors=(ssectors:Array(Ssector))-instance-method","name":"ssectors=","doc":"The parsed ssectors lump","summary":"<p>The parsed ssectors lump</p>","abstract":false,"args":[{"name":"ssectors","external_name":"ssectors","restriction":"Array(Ssector)"}],"args_string":"(ssectors : Array(Ssector))","args_html":"(ssectors : Array(<a href=\"../WAD/Map/Ssector.html\">Ssector</a>))","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":170,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L170"},"def":{"name":"ssectors=","args":[{"name":"ssectors","external_name":"ssectors","restriction":"Array(Ssector)"}],"visibility":"Public","body":"@ssectors = ssectors"},"external_var":false},{"html_id":"ssectors_directory:Directory-instance-method","name":"ssectors_directory","doc":"The directory of the ssectors lump","summary":"<p>The directory of the ssectors lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":149,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L149"},"def":{"name":"ssectors_directory","return_type":"Directory","visibility":"Public","body":"@ssectors_directory"},"external_var":false},{"html_id":"ssectors_directory=(ssectors_directory:Directory)-instance-method","name":"ssectors_directory=","doc":"The directory of the ssectors lump","summary":"<p>The directory of the ssectors lump</p>","abstract":false,"args":[{"name":"ssectors_directory","external_name":"ssectors_directory","restriction":"Directory"}],"args_string":"(ssectors_directory : Directory)","args_html":"(ssectors_directory : <a href=\"../WAD/Directory.html\">Directory</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":149,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L149"},"def":{"name":"ssectors_directory=","args":[{"name":"ssectors_directory","external_name":"ssectors_directory","restriction":"Directory"}],"visibility":"Public","body":"@ssectors_directory = ssectors_directory"},"external_var":false},{"html_id":"things:Array(Thing)-instance-method","name":"things","doc":"The parsed things lump","summary":"<p>The parsed things lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":160,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L160"},"def":{"name":"things","return_type":"Array(Thing)","visibility":"Public","body":"@things"},"external_var":false},{"html_id":"things=(things:Array(Thing))-instance-method","name":"things=","doc":"The parsed things lump","summary":"<p>The parsed things lump</p>","abstract":false,"args":[{"name":"things","external_name":"things","restriction":"Array(Thing)"}],"args_string":"(things : Array(Thing))","args_html":"(things : Array(<a href=\"../WAD/Map/Thing.html\">Thing</a>))","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":160,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L160"},"def":{"name":"things=","args":[{"name":"things","external_name":"things","restriction":"Array(Thing)"}],"visibility":"Public","body":"@things = things"},"external_var":false},{"html_id":"things_directory:Directory-instance-method","name":"things_directory","doc":"The directory of the things lump","summary":"<p>The directory of the things lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":139,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L139"},"def":{"name":"things_directory","return_type":"Directory","visibility":"Public","body":"@things_directory"},"external_var":false},{"html_id":"things_directory=(things_directory:Directory)-instance-method","name":"things_directory=","doc":"The directory of the things lump","summary":"<p>The directory of the things lump</p>","abstract":false,"args":[{"name":"things_directory","external_name":"things_directory","restriction":"Directory"}],"args_string":"(things_directory : Directory)","args_html":"(things_directory : <a href=\"../WAD/Directory.html\">Directory</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":139,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L139"},"def":{"name":"things_directory=","args":[{"name":"things_directory","external_name":"things_directory","restriction":"Directory"}],"visibility":"Public","body":"@things_directory = things_directory"},"external_var":false},{"html_id":"vertexes:Array(Vertex)-instance-method","name":"vertexes","doc":"The parsed vertexes lump","summary":"<p>The parsed vertexes lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":166,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L166"},"def":{"name":"vertexes","return_type":"Array(Vertex)","visibility":"Public","body":"@vertexes"},"external_var":false},{"html_id":"vertexes=(vertexes:Array(Vertex))-instance-method","name":"vertexes=","doc":"The parsed vertexes lump","summary":"<p>The parsed vertexes lump</p>","abstract":false,"args":[{"name":"vertexes","external_name":"vertexes","restriction":"Array(Vertex)"}],"args_string":"(vertexes : Array(Vertex))","args_html":"(vertexes : Array(<a href=\"../WAD/Map/Vertex.html\">Vertex</a>))","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":166,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L166"},"def":{"name":"vertexes=","args":[{"name":"vertexes","external_name":"vertexes","restriction":"Array(Vertex)"}],"visibility":"Public","body":"@vertexes = vertexes"},"external_var":false},{"html_id":"vertexes_directory:Directory-instance-method","name":"vertexes_directory","doc":"The directory of the vertexes lump","summary":"<p>The directory of the vertexes lump</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":145,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L145"},"def":{"name":"vertexes_directory","return_type":"Directory","visibility":"Public","body":"@vertexes_directory"},"external_var":false},{"html_id":"vertexes_directory=(vertexes_directory:Directory)-instance-method","name":"vertexes_directory=","doc":"The directory of the vertexes lump","summary":"<p>The directory of the vertexes lump</p>","abstract":false,"args":[{"name":"vertexes_directory","external_name":"vertexes_directory","restriction":"Directory"}],"args_string":"(vertexes_directory : Directory)","args_html":"(vertexes_directory : <a href=\"../WAD/Directory.html\">Directory</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":145,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L145"},"def":{"name":"vertexes_directory=","args":[{"name":"vertexes_directory","external_name":"vertexes_directory","restriction":"Directory"}],"visibility":"Public","body":"@vertexes_directory = vertexes_directory"},"external_var":false}],"types":[{"html_id":"wa-cr/WAD/Map/Blockmap","path":"WAD/Map/Blockmap.html","kind":"class","full_name":"WAD::Map::Blockmap","name":"Blockmap","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/WritingAdditions/Map/Blockmap","kind":"module","full_name":"WritingAdditions::Map::Blockmap","name":"Blockmap"},{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":772,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L772"},{"filename":"src/write.cr","line_number":322,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L322"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"wa-cr/WritingAdditions/Map/Blockmap","kind":"module","full_name":"WritingAdditions::Map::Blockmap","name":"Blockmap"}],"namespace":{"html_id":"wa-cr/WAD/Map","kind":"class","full_name":"WAD::Map","name":"Map"},"doc":"Class of a blockmap.","summary":"<p>Class of a blockmap.</p>","constructors":[{"html_id":"parse(io:IO,lump_size:Int):Blockmap-class-method","name":"parse","doc":"Parses a blockmap list given the io and the size\n\nOpens a blockmap lump and parses it:\n```\nFile.open(\"Path/To/Blockmap\") do |file|\n  my_blockmap = WAD::Map::Blockmap.parse(file, file.size)\nend\n```","summary":"<p>Parses a blockmap list given the io and the size</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"args_string":"(io : IO, lump_size : Int) : Blockmap","args_html":"(io : IO, lump_size : Int) : <a href=\"../../WAD/Map/Blockmap.html\">Blockmap</a>","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":812,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L812"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"return_type":"Blockmap","visibility":"Public","body":"parsed_blockmap = Blockmap.new\n\nparsed_blockmap.header.grid_origin_x = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\nparsed_blockmap.header.grid_origin_y = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\nparsed_blockmap.header.num_of_columns = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\nparsed_blockmap.header.num_of_rows = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\n\nblockmap_length = lump_size - (2 * 4)\n\nparsed_blockmap.num_of_blocks.times do |time|\n\n  parsed_blockmap.offsets << (io.read_bytes(Int16, IO::ByteFormat::LittleEndian))\n\n  blockmap_length = blockmap_length - 2\nend\n\nblocklist = Blockmap::Blocklist.new\n\nloop do\n\n  if blockmap_length < 2\n    break\n  end\n\n  read_byte = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\n\n  blockmap_length = blockmap_length - 2\n\n  if read_byte != 65535\n    blocklist.linedefs_in_block << read_byte\n  else\n    parsed_blockmap.blocklists << blocklist\n\n    blocklist = Blockmap::Blocklist.new\n  end\nend\n\nparsed_blockmap\n"},"external_var":false}],"instance_methods":[{"html_id":"blocklists:Array(Blocklist)-instance-method","name":"blocklists","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":802,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L802"},"def":{"name":"blocklists","return_type":"Array(Blocklist)","visibility":"Public","body":"@blocklists"},"external_var":false},{"html_id":"blocklists=(blocklists:Array(Blocklist))-instance-method","name":"blocklists=","abstract":false,"args":[{"name":"blocklists","external_name":"blocklists","restriction":"Array(Blocklist)"}],"args_string":"(blocklists : Array(Blocklist))","args_html":"(blocklists : Array(<a href=\"../../WAD/Map/Blockmap/Blocklist.html\">Blocklist</a>))","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":802,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L802"},"def":{"name":"blocklists=","args":[{"name":"blocklists","external_name":"blocklists","restriction":"Array(Blocklist)"}],"visibility":"Public","body":"@blocklists = blocklists"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":774,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L774"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"header:Header-instance-method","name":"header","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":800,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L800"},"def":{"name":"header","return_type":"Header","visibility":"Public","body":"@header"},"external_var":false},{"html_id":"header=(header:Header)-instance-method","name":"header=","abstract":false,"args":[{"name":"header","external_name":"header","restriction":"Header"}],"args_string":"(header : Header)","args_html":"(header : <a href=\"../../WAD/Map/Blockmap/Header.html\">Header</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":800,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L800"},"def":{"name":"header=","args":[{"name":"header","external_name":"header","restriction":"Header"}],"visibility":"Public","body":"@header = header"},"external_var":false},{"html_id":"num_of_blocks-instance-method","name":"num_of_blocks","doc":"There are N blocks, which is equal to columns × rows (from the header).","summary":"<p>There are N blocks, which is equal to columns × rows (from the header).</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":796,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L796"},"def":{"name":"num_of_blocks","visibility":"Public","body":"header.num_of_columns * header.num_of_rows"},"external_var":false},{"html_id":"offsets:Array(Int16)-instance-method","name":"offsets","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":801,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L801"},"def":{"name":"offsets","return_type":"Array(Int16)","visibility":"Public","body":"@offsets"},"external_var":false},{"html_id":"offsets=(offsets:Array(Int16))-instance-method","name":"offsets=","abstract":false,"args":[{"name":"offsets","external_name":"offsets","restriction":"Array(Int16)"}],"args_string":"(offsets : Array(Int16))","args_html":"(offsets : Array(Int16))","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":801,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L801"},"def":{"name":"offsets=","args":[{"name":"offsets","external_name":"offsets","restriction":"Array(Int16)"}],"visibility":"Public","body":"@offsets = offsets"},"external_var":false}],"types":[{"html_id":"wa-cr/WAD/Map/Blockmap/Blocklist","path":"WAD/Map/Blockmap/Blocklist.html","kind":"class","full_name":"WAD::Map::Blockmap::Blocklist","name":"Blocklist","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":788,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L788"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/Map/Blockmap","kind":"class","full_name":"WAD::Map::Blockmap","name":"Blockmap"},"doc":"Class of the blockmap blocklist","summary":"<p>Class of the blockmap blocklist</p>","instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":790,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L790"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"linedefs_in_block:Array(UInt16)-instance-method","name":"linedefs_in_block","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":792,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L792"},"def":{"name":"linedefs_in_block","return_type":"Array(UInt16)","visibility":"Public","body":"@linedefs_in_block"},"external_var":false},{"html_id":"linedefs_in_block=(linedefs_in_block:Array(UInt16))-instance-method","name":"linedefs_in_block=","abstract":false,"args":[{"name":"linedefs_in_block","external_name":"linedefs_in_block","restriction":"Array(UInt16)"}],"args_string":"(linedefs_in_block : Array(UInt16))","args_html":"(linedefs_in_block : Array(UInt16))","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":792,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L792"},"def":{"name":"linedefs_in_block=","args":[{"name":"linedefs_in_block","external_name":"linedefs_in_block","restriction":"Array(UInt16)"}],"visibility":"Public","body":"@linedefs_in_block = linedefs_in_block"},"external_var":false}]},{"html_id":"wa-cr/WAD/Map/Blockmap/Header","path":"WAD/Map/Blockmap/Header.html","kind":"struct","full_name":"WAD::Map::Blockmap::Header","name":"Header","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":777,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L777"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/Map/Blockmap","kind":"class","full_name":"WAD::Map::Blockmap","name":"Blockmap"},"doc":"Structure of the blockmap header.","summary":"<p>Structure of the blockmap header.</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":777,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L777"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":779,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L779"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"grid_origin_x:Int16-instance-method","name":"grid_origin_x","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":781,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L781"},"def":{"name":"grid_origin_x","return_type":"Int16","visibility":"Public","body":"@grid_origin_x"},"external_var":false},{"html_id":"grid_origin_x=(grid_origin_x:Int16)-instance-method","name":"grid_origin_x=","abstract":false,"args":[{"name":"grid_origin_x","external_name":"grid_origin_x","restriction":"Int16"}],"args_string":"(grid_origin_x : Int16)","args_html":"(grid_origin_x : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":781,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L781"},"def":{"name":"grid_origin_x=","args":[{"name":"grid_origin_x","external_name":"grid_origin_x","restriction":"Int16"}],"visibility":"Public","body":"@grid_origin_x = grid_origin_x"},"external_var":false},{"html_id":"grid_origin_y:Int16-instance-method","name":"grid_origin_y","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":782,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L782"},"def":{"name":"grid_origin_y","return_type":"Int16","visibility":"Public","body":"@grid_origin_y"},"external_var":false},{"html_id":"grid_origin_y=(grid_origin_y:Int16)-instance-method","name":"grid_origin_y=","abstract":false,"args":[{"name":"grid_origin_y","external_name":"grid_origin_y","restriction":"Int16"}],"args_string":"(grid_origin_y : Int16)","args_html":"(grid_origin_y : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":782,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L782"},"def":{"name":"grid_origin_y=","args":[{"name":"grid_origin_y","external_name":"grid_origin_y","restriction":"Int16"}],"visibility":"Public","body":"@grid_origin_y = grid_origin_y"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":777,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L777"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false},{"html_id":"num_of_columns:UInt16-instance-method","name":"num_of_columns","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":783,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L783"},"def":{"name":"num_of_columns","return_type":"UInt16","visibility":"Public","body":"@num_of_columns"},"external_var":false},{"html_id":"num_of_columns=(num_of_columns:UInt16)-instance-method","name":"num_of_columns=","abstract":false,"args":[{"name":"num_of_columns","external_name":"num_of_columns","restriction":"UInt16"}],"args_string":"(num_of_columns : UInt16)","args_html":"(num_of_columns : UInt16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":783,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L783"},"def":{"name":"num_of_columns=","args":[{"name":"num_of_columns","external_name":"num_of_columns","restriction":"UInt16"}],"visibility":"Public","body":"@num_of_columns = num_of_columns"},"external_var":false},{"html_id":"num_of_rows:UInt16-instance-method","name":"num_of_rows","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":784,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L784"},"def":{"name":"num_of_rows","return_type":"UInt16","visibility":"Public","body":"@num_of_rows"},"external_var":false},{"html_id":"num_of_rows=(num_of_rows:UInt16)-instance-method","name":"num_of_rows=","abstract":false,"args":[{"name":"num_of_rows","external_name":"num_of_rows","restriction":"UInt16"}],"args_string":"(num_of_rows : UInt16)","args_html":"(num_of_rows : UInt16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":784,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L784"},"def":{"name":"num_of_rows=","args":[{"name":"num_of_rows","external_name":"num_of_rows","restriction":"UInt16"}],"visibility":"Public","body":"@num_of_rows = num_of_rows"},"external_var":false}]}]},{"html_id":"wa-cr/WAD/Map/Linedef","path":"WAD/Map/Linedef.html","kind":"struct","full_name":"WAD::Map::Linedef","name":"Linedef","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":244,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L244"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/Map","kind":"class","full_name":"WAD::Map","name":"Map"},"doc":"Structure of a linedef.","summary":"<p>Structure of a linedef.</p>","class_methods":[{"html_id":"parse(io:IO,lump_size:Int):Array(Linedef)-class-method","name":"parse","doc":"Parses a linedefs list given the io and the size\n\nOpens a linedefs lump and parses it:\n```\nFile.open(\"Path/To/Linedef\") do |file|\n  my_linedefs = WAD::Map::Linedef.parse(file, file.size)\nend\n```","summary":"<p>Parses a linedefs list given the io and the size</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"args_string":"(io : IO, lump_size : Int) : Array(Linedef)","args_html":"(io : IO, lump_size : Int) : Array(<a href=\"../../WAD/Map/Linedef.html\">Linedef</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":278,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L278"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"return_type":"Array(Linedef)","visibility":"Public","body":"parsed_linedefs = [] of Linedef\n\nlinedefs_index = 0\n\nentry_length = 14\n\nwhile (linedefs_index * entry_length) < lump_size\n  linedef = Linedef.new\n\n  linedef.start_vertex = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  linedef.end_vertex = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  linedef.flags = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  linedef.special_type = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  linedef.sector_tag = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  linedef.front_sidedef = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  linedef.back_sidedef = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n\n  linedefs_index = linedefs_index + 1\n\n  parsed_linedefs << linedef\nend\n\nparsed_linedefs\n"},"external_var":false},{"html_id":"parse(filename:String|Path):Array(Linedef)-class-method","name":"parse","doc":"Parses a linedefs list given the filename\n\nOpens a linedefs lump and parses it:\n```\nmy_linedefs = WAD::Map::Linedef.parse(\"Path/To/Linedef\")\n```","summary":"<p>Parses a linedefs list given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Array(Linedef)","args_html":"(filename : String | Path) : Array(<a href=\"../../WAD/Map/Linedef.html\">Linedef</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":262,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L262"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Array(Linedef)","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file, file.size)\nend\n\nraise(\"Linedef invalid\")\n"},"external_var":false}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":244,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L244"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"back_sidedef:Int16-instance-method","name":"back_sidedef","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":254,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L254"},"def":{"name":"back_sidedef","return_type":"Int16","visibility":"Public","body":"@back_sidedef"},"external_var":false},{"html_id":"back_sidedef=(back_sidedef:Int16)-instance-method","name":"back_sidedef=","abstract":false,"args":[{"name":"back_sidedef","external_name":"back_sidedef","restriction":"Int16"}],"args_string":"(back_sidedef : Int16)","args_html":"(back_sidedef : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":254,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L254"},"def":{"name":"back_sidedef=","args":[{"name":"back_sidedef","external_name":"back_sidedef","restriction":"Int16"}],"visibility":"Public","body":"@back_sidedef = back_sidedef"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":246,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L246"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"end_vertex:Int16-instance-method","name":"end_vertex","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":249,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L249"},"def":{"name":"end_vertex","return_type":"Int16","visibility":"Public","body":"@end_vertex"},"external_var":false},{"html_id":"end_vertex=(end_vertex:Int16)-instance-method","name":"end_vertex=","abstract":false,"args":[{"name":"end_vertex","external_name":"end_vertex","restriction":"Int16"}],"args_string":"(end_vertex : Int16)","args_html":"(end_vertex : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":249,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L249"},"def":{"name":"end_vertex=","args":[{"name":"end_vertex","external_name":"end_vertex","restriction":"Int16"}],"visibility":"Public","body":"@end_vertex = end_vertex"},"external_var":false},{"html_id":"flags:Int16-instance-method","name":"flags","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":250,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L250"},"def":{"name":"flags","return_type":"Int16","visibility":"Public","body":"@flags"},"external_var":false},{"html_id":"flags=(flags:Int16)-instance-method","name":"flags=","abstract":false,"args":[{"name":"flags","external_name":"flags","restriction":"Int16"}],"args_string":"(flags : Int16)","args_html":"(flags : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":250,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L250"},"def":{"name":"flags=","args":[{"name":"flags","external_name":"flags","restriction":"Int16"}],"visibility":"Public","body":"@flags = flags"},"external_var":false},{"html_id":"front_sidedef:Int16-instance-method","name":"front_sidedef","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":253,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L253"},"def":{"name":"front_sidedef","return_type":"Int16","visibility":"Public","body":"@front_sidedef"},"external_var":false},{"html_id":"front_sidedef=(front_sidedef:Int16)-instance-method","name":"front_sidedef=","abstract":false,"args":[{"name":"front_sidedef","external_name":"front_sidedef","restriction":"Int16"}],"args_string":"(front_sidedef : Int16)","args_html":"(front_sidedef : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":253,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L253"},"def":{"name":"front_sidedef=","args":[{"name":"front_sidedef","external_name":"front_sidedef","restriction":"Int16"}],"visibility":"Public","body":"@front_sidedef = front_sidedef"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":244,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L244"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false},{"html_id":"sector_tag:Int16-instance-method","name":"sector_tag","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":252,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L252"},"def":{"name":"sector_tag","return_type":"Int16","visibility":"Public","body":"@sector_tag"},"external_var":false},{"html_id":"sector_tag=(sector_tag:Int16)-instance-method","name":"sector_tag=","abstract":false,"args":[{"name":"sector_tag","external_name":"sector_tag","restriction":"Int16"}],"args_string":"(sector_tag : Int16)","args_html":"(sector_tag : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":252,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L252"},"def":{"name":"sector_tag=","args":[{"name":"sector_tag","external_name":"sector_tag","restriction":"Int16"}],"visibility":"Public","body":"@sector_tag = sector_tag"},"external_var":false},{"html_id":"special_type:Int16-instance-method","name":"special_type","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":251,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L251"},"def":{"name":"special_type","return_type":"Int16","visibility":"Public","body":"@special_type"},"external_var":false},{"html_id":"special_type=(special_type:Int16)-instance-method","name":"special_type=","abstract":false,"args":[{"name":"special_type","external_name":"special_type","restriction":"Int16"}],"args_string":"(special_type : Int16)","args_html":"(special_type : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":251,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L251"},"def":{"name":"special_type=","args":[{"name":"special_type","external_name":"special_type","restriction":"Int16"}],"visibility":"Public","body":"@special_type = special_type"},"external_var":false},{"html_id":"start_vertex:Int16-instance-method","name":"start_vertex","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":248,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L248"},"def":{"name":"start_vertex","return_type":"Int16","visibility":"Public","body":"@start_vertex"},"external_var":false},{"html_id":"start_vertex=(start_vertex:Int16)-instance-method","name":"start_vertex=","abstract":false,"args":[{"name":"start_vertex","external_name":"start_vertex","restriction":"Int16"}],"args_string":"(start_vertex : Int16)","args_html":"(start_vertex : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":248,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L248"},"def":{"name":"start_vertex=","args":[{"name":"start_vertex","external_name":"start_vertex","restriction":"Int16"}],"visibility":"Public","body":"@start_vertex = start_vertex"},"external_var":false}]},{"html_id":"wa-cr/WAD/Map/Node","path":"WAD/Map/Node.html","kind":"struct","full_name":"WAD::Map::Node","name":"Node","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":549,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L549"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/Map","kind":"class","full_name":"WAD::Map","name":"Map"},"doc":"Structure of a node.","summary":"<p>Structure of a node.</p>","class_methods":[{"html_id":"parse(io:IO,lump_size:Int):Array(Node)-class-method","name":"parse","doc":"Parses a nodes list given the io and the size\n\nOpens a nodes lump and parses it:\n```\nFile.open(\"Path/To/Node\") do |file|\n  my_nodes = WAD::Map::Node.parse(file, file.size)\nend\n```","summary":"<p>Parses a nodes list given the io and the size</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"args_string":"(io : IO, lump_size : Int) : Array(Node)","args_html":"(io : IO, lump_size : Int) : Array(<a href=\"../../WAD/Map/Node.html\">Node</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":597,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L597"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"return_type":"Array(Node)","visibility":"Public","body":"parsed_nodes = [] of Node\n\nnodes_index = 0\n\nentry_length = 28\n\nwhile (nodes_index * entry_length) < lump_size\n  node = Node.new\n\n  node.x_coord = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  node.y_coord = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  node.x_change_to_end = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  node.y_change_to_end = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n\n\n\n  node.right_bound_box << (io.read_bytes(Int16, IO::ByteFormat::LittleEndian))\n  node.right_bound_box << (io.read_bytes(Int16, IO::ByteFormat::LittleEndian))\n  node.right_bound_box << (io.read_bytes(Int16, IO::ByteFormat::LittleEndian))\n  node.right_bound_box << (io.read_bytes(Int16, IO::ByteFormat::LittleEndian))\n\n  node.left_bound_box << (io.read_bytes(Int16, IO::ByteFormat::LittleEndian))\n  node.left_bound_box << (io.read_bytes(Int16, IO::ByteFormat::LittleEndian))\n  node.left_bound_box << (io.read_bytes(Int16, IO::ByteFormat::LittleEndian))\n  node.left_bound_box << (io.read_bytes(Int16, IO::ByteFormat::LittleEndian))\n\n  node.right_child = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  node.left_child = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n\n  nodes_index = nodes_index + 1\n\n  parsed_nodes << node\nend\n\nparsed_nodes\n"},"external_var":false},{"html_id":"parse(filename:String|Path):Array(Node)-class-method","name":"parse","doc":"Parses a nodes list given the filename\n\nOpens a nodes lump and parses it:\n```\nmy_nodes = WAD::Map::Node.parse(\"Path/To/Node\")\n```","summary":"<p>Parses a nodes list given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Array(Node)","args_html":"(filename : String | Path) : Array(<a href=\"../../WAD/Map/Node.html\">Node</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":581,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L581"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Array(Node)","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file, file.size)\nend\n\nraise(\"Node invalid\")\n"},"external_var":false}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":549,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L549"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":551,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L551"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":549,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L549"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false},{"html_id":"left_bound_box:Array(Int16)-instance-method","name":"left_bound_box","doc":"A bounding box consists of four short values (top, bottom, left and right)\ngiving the upper and lower bounds of the y coordinate and the lower and upper\nbounds of the x coordinate (in that order).","summary":"<p>A bounding box consists of four short values (top, bottom, left and right) giving the upper and lower bounds of the y coordinate and the lower and upper bounds of the x coordinate (in that order).</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":570,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L570"},"def":{"name":"left_bound_box","return_type":"Array(Int16)","visibility":"Public","body":"@left_bound_box"},"external_var":false},{"html_id":"left_bound_box=(left_bound_box:Array(Int16))-instance-method","name":"left_bound_box=","doc":"A bounding box consists of four short values (top, bottom, left and right)\ngiving the upper and lower bounds of the y coordinate and the lower and upper\nbounds of the x coordinate (in that order).","summary":"<p>A bounding box consists of four short values (top, bottom, left and right) giving the upper and lower bounds of the y coordinate and the lower and upper bounds of the x coordinate (in that order).</p>","abstract":false,"args":[{"name":"left_bound_box","external_name":"left_bound_box","restriction":"Array(Int16)"}],"args_string":"(left_bound_box : Array(Int16))","args_html":"(left_bound_box : Array(Int16))","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":570,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L570"},"def":{"name":"left_bound_box=","args":[{"name":"left_bound_box","external_name":"left_bound_box","restriction":"Array(Int16)"}],"visibility":"Public","body":"@left_bound_box = left_bound_box"},"external_var":false},{"html_id":"left_child:Int16-instance-method","name":"left_child","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":573,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L573"},"def":{"name":"left_child","return_type":"Int16","visibility":"Public","body":"@left_child"},"external_var":false},{"html_id":"left_child=(left_child:Int16)-instance-method","name":"left_child=","abstract":false,"args":[{"name":"left_child","external_name":"left_child","restriction":"Int16"}],"args_string":"(left_child : Int16)","args_html":"(left_child : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":573,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L573"},"def":{"name":"left_child=","args":[{"name":"left_child","external_name":"left_child","restriction":"Int16"}],"visibility":"Public","body":"@left_child = left_child"},"external_var":false},{"html_id":"right_bound_box:Array(Int16)-instance-method","name":"right_bound_box","doc":"A bounding box consists of four short values (top, bottom, left and right)\ngiving the upper and lower bounds of the y coordinate and the lower and upper\nbounds of the x coordinate (in that order).","summary":"<p>A bounding box consists of four short values (top, bottom, left and right) giving the upper and lower bounds of the y coordinate and the lower and upper bounds of the x coordinate (in that order).</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":568,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L568"},"def":{"name":"right_bound_box","return_type":"Array(Int16)","visibility":"Public","body":"@right_bound_box"},"external_var":false},{"html_id":"right_bound_box=(right_bound_box:Array(Int16))-instance-method","name":"right_bound_box=","doc":"A bounding box consists of four short values (top, bottom, left and right)\ngiving the upper and lower bounds of the y coordinate and the lower and upper\nbounds of the x coordinate (in that order).","summary":"<p>A bounding box consists of four short values (top, bottom, left and right) giving the upper and lower bounds of the y coordinate and the lower and upper bounds of the x coordinate (in that order).</p>","abstract":false,"args":[{"name":"right_bound_box","external_name":"right_bound_box","restriction":"Array(Int16)"}],"args_string":"(right_bound_box : Array(Int16))","args_html":"(right_bound_box : Array(Int16))","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":568,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L568"},"def":{"name":"right_bound_box=","args":[{"name":"right_bound_box","external_name":"right_bound_box","restriction":"Array(Int16)"}],"visibility":"Public","body":"@right_bound_box = right_bound_box"},"external_var":false},{"html_id":"right_child:Int16-instance-method","name":"right_child","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":572,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L572"},"def":{"name":"right_child","return_type":"Int16","visibility":"Public","body":"@right_child"},"external_var":false},{"html_id":"right_child=(right_child:Int16)-instance-method","name":"right_child=","abstract":false,"args":[{"name":"right_child","external_name":"right_child","restriction":"Int16"}],"args_string":"(right_child : Int16)","args_html":"(right_child : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":572,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L572"},"def":{"name":"right_child=","args":[{"name":"right_child","external_name":"right_child","restriction":"Int16"}],"visibility":"Public","body":"@right_child = right_child"},"external_var":false},{"html_id":"x_change_to_end:Int16-instance-method","name":"x_change_to_end","doc":"Change in x from start to end of partition line.","summary":"<p>Change in x from start to end of partition line.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":558,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L558"},"def":{"name":"x_change_to_end","return_type":"Int16","visibility":"Public","body":"@x_change_to_end"},"external_var":false},{"html_id":"x_change_to_end=(x_change_to_end:Int16)-instance-method","name":"x_change_to_end=","doc":"Change in x from start to end of partition line.","summary":"<p>Change in x from start to end of partition line.</p>","abstract":false,"args":[{"name":"x_change_to_end","external_name":"x_change_to_end","restriction":"Int16"}],"args_string":"(x_change_to_end : Int16)","args_html":"(x_change_to_end : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":558,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L558"},"def":{"name":"x_change_to_end=","args":[{"name":"x_change_to_end","external_name":"x_change_to_end","restriction":"Int16"}],"visibility":"Public","body":"@x_change_to_end = x_change_to_end"},"external_var":false},{"html_id":"x_coord:Int16-instance-method","name":"x_coord","doc":"X coordinate of partition line start.","summary":"<p>X coordinate of partition line start.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":554,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L554"},"def":{"name":"x_coord","return_type":"Int16","visibility":"Public","body":"@x_coord"},"external_var":false},{"html_id":"x_coord=(x_coord:Int16)-instance-method","name":"x_coord=","doc":"X coordinate of partition line start.","summary":"<p>X coordinate of partition line start.</p>","abstract":false,"args":[{"name":"x_coord","external_name":"x_coord","restriction":"Int16"}],"args_string":"(x_coord : Int16)","args_html":"(x_coord : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":554,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L554"},"def":{"name":"x_coord=","args":[{"name":"x_coord","external_name":"x_coord","restriction":"Int16"}],"visibility":"Public","body":"@x_coord = x_coord"},"external_var":false},{"html_id":"y_change_to_end:Int16-instance-method","name":"y_change_to_end","doc":"Change in y from start to end of partition line.","summary":"<p>Change in y from start to end of partition line.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":560,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L560"},"def":{"name":"y_change_to_end","return_type":"Int16","visibility":"Public","body":"@y_change_to_end"},"external_var":false},{"html_id":"y_change_to_end=(y_change_to_end:Int16)-instance-method","name":"y_change_to_end=","doc":"Change in y from start to end of partition line.","summary":"<p>Change in y from start to end of partition line.</p>","abstract":false,"args":[{"name":"y_change_to_end","external_name":"y_change_to_end","restriction":"Int16"}],"args_string":"(y_change_to_end : Int16)","args_html":"(y_change_to_end : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":560,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L560"},"def":{"name":"y_change_to_end=","args":[{"name":"y_change_to_end","external_name":"y_change_to_end","restriction":"Int16"}],"visibility":"Public","body":"@y_change_to_end = y_change_to_end"},"external_var":false},{"html_id":"y_coord:Int16-instance-method","name":"y_coord","doc":"Y coordinate of partition line start.","summary":"<p>Y coordinate of partition line start.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":556,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L556"},"def":{"name":"y_coord","return_type":"Int16","visibility":"Public","body":"@y_coord"},"external_var":false},{"html_id":"y_coord=(y_coord:Int16)-instance-method","name":"y_coord=","doc":"Y coordinate of partition line start.","summary":"<p>Y coordinate of partition line start.</p>","abstract":false,"args":[{"name":"y_coord","external_name":"y_coord","restriction":"Int16"}],"args_string":"(y_coord : Int16)","args_html":"(y_coord : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":556,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L556"},"def":{"name":"y_coord=","args":[{"name":"y_coord","external_name":"y_coord","restriction":"Int16"}],"visibility":"Public","body":"@y_coord = y_coord"},"external_var":false}]},{"html_id":"wa-cr/WAD/Map/Reject","path":"WAD/Map/Reject.html","kind":"class","full_name":"WAD::Map::Reject","name":"Reject","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/WritingAdditions/Map/Reject","kind":"module","full_name":"WritingAdditions::Map::Reject","name":"Reject"},{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":703,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L703"},{"filename":"src/write.cr","line_number":318,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L318"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"wa-cr/WritingAdditions/Map/Reject","kind":"module","full_name":"WritingAdditions::Map::Reject","name":"Reject"}],"namespace":{"html_id":"wa-cr/WAD/Map","kind":"class","full_name":"WAD::Map","name":"Map"},"doc":"Class of a reject.","summary":"<p>Class of a reject.</p>","constructors":[{"html_id":"new(data:BitArray=BitArray.new(0))-class-method","name":"new","abstract":false,"args":[{"name":"data","default_value":"BitArray.new(0)","external_name":"data","restriction":"BitArray"}],"args_string":"(data : BitArray = BitArray.new(0))","args_html":"(data : BitArray = <span class=\"t\">BitArray</span>.new(<span class=\"n\">0</span>))","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":716,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L716"},"def":{"name":"new","args":[{"name":"data","default_value":"BitArray.new(0)","external_name":"data","restriction":"BitArray"}],"visibility":"Public","body":"_ = allocate\n_.initialize(data)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false},{"html_id":"parse(io:IO,lump_size:Int,sectors:Int=0):Reject-class-method","name":"parse","doc":"Parses a reject list given the io and the size\n\nExample: Opens a reject lump and parses it\n```\nFile.open(\"Path/To/Reject\") do |file|\n  my_reject = WAD::Map::Reject.parse(file, file.size)\nend\n```","summary":"<p>Parses a reject list given the io and the size</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"},{"name":"sectors","default_value":"0","external_name":"sectors","restriction":"Int"}],"args_string":"(io : IO, lump_size : Int, sectors : Int = 0) : Reject","args_html":"(io : IO, lump_size : Int, sectors : Int = <span class=\"n\">0</span>) : <a href=\"../../WAD/Map/Reject.html\">Reject</a>","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":728,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L728"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"},{"name":"sectors","default_value":"0","external_name":"sectors","restriction":"Int"}],"return_type":"Reject","visibility":"Public","body":"reject = Reject.new\n\nreject_size = (sectors ** 2) / 8\n\nreject_index = 0\n\nsector_byte_loop = 0\n\nbyte_slice = Bytes.new(lump_size)\n\nio.read_fully(byte_slice)\n\nbyte_slice_array = byte_slice.to_a\nreject.byte_data = byte_slice.to_a\n\nbit_array = BitArray.new(sectors ** 2)\n\nsectors.times do |y|\n\n  sectors.times do |x|\n\n    bit_array[x + (y * sectors)] = (byte_slice_array[0].bit(sector_byte_loop)) == 1\n\n    if sector_byte_loop == 7\n      sector_byte_loop = 0\n\n      byte_slice_array.delete_at(0)\n    else\n      sector_byte_loop = sector_byte_loop + 1\n    end\n  end\n\n  reject_index = reject_index + 1\nend\n\nreject.data = bit_array\nreject\n"},"external_var":false}],"instance_methods":[{"html_id":"[](x:Int,y:Int)-instance-method","name":"[]","doc":"Outputs the truthiness of the bit at the given *x, y*.","summary":"<p>Outputs the truthiness of the bit at the given <em>x, y</em>.</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"args_string":"(x : Int, y : Int)","args_html":"(x : Int, y : Int)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":712,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L712"},"def":{"name":"[]","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"}],"visibility":"Public","body":"data[x + (y * @sectors)]"},"external_var":false},{"html_id":"byte_data:Array(UInt8)-instance-method","name":"byte_data","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":708,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L708"},"def":{"name":"byte_data","return_type":"Array(UInt8)","visibility":"Public","body":"@byte_data"},"external_var":false},{"html_id":"byte_data=(byte_data:Array(UInt8))-instance-method","name":"byte_data=","abstract":false,"args":[{"name":"byte_data","external_name":"byte_data","restriction":"Array(UInt8)"}],"args_string":"(byte_data : Array(UInt8))","args_html":"(byte_data : Array(UInt8))","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":708,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L708"},"def":{"name":"byte_data=","args":[{"name":"byte_data","external_name":"byte_data","restriction":"Array(UInt8)"}],"visibility":"Public","body":"@byte_data = byte_data"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":705,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L705"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"data:BitArray-instance-method","name":"data","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":707,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L707"},"def":{"name":"data","return_type":"BitArray","visibility":"Public","body":"@data"},"external_var":false},{"html_id":"data=(data:BitArray)-instance-method","name":"data=","abstract":false,"args":[{"name":"data","external_name":"data","restriction":"BitArray"}],"args_string":"(data : BitArray)","args_html":"(data : BitArray)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":707,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L707"},"def":{"name":"data=","args":[{"name":"data","external_name":"data","restriction":"BitArray"}],"visibility":"Public","body":"@data = data"},"external_var":false}]},{"html_id":"wa-cr/WAD/Map/Sector","path":"WAD/Map/Sector.html","kind":"struct","full_name":"WAD::Map::Sector","name":"Sector","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":639,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L639"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/Map","kind":"class","full_name":"WAD::Map","name":"Map"},"doc":"Structure of a sector.","summary":"<p>Structure of a sector.</p>","class_methods":[{"html_id":"parse(io:IO,lump_size:Int):Array(Sector)-class-method","name":"parse","doc":"Parses a sectors list given the io and the size\n\nOpens a sectors lump and parses it:\n```\nFile.open(\"Path/To/Sector\") do |file|\n  my_sectors = WAD::Map::Sector.parse(file, file.size)\nend\n```","summary":"<p>Parses a sectors list given the io and the size</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"args_string":"(io : IO, lump_size : Int) : Array(Sector)","args_html":"(io : IO, lump_size : Int) : Array(<a href=\"../../WAD/Map/Sector.html\">Sector</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":673,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L673"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"return_type":"Array(Sector)","visibility":"Public","body":"parsed_sectors = [] of Sector\n\nsectors_index = 0\n\nentry_length = 26\n\nwhile (sectors_index * entry_length) < lump_size\n  sector = Sector.new\n\n  sector.floor_height = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  sector.ceiling_height = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  sector.name_tex_floor = (io.gets(8)).to_s.gsub(\"\\u0000\", \"\")\n  sector.name_tex_ceiling = (io.gets(8)).to_s.gsub(\"\\u0000\", \"\")\n  sector.light_level = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  sector.special_type = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  sector.tag_num = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n\n  sectors_index = sectors_index + 1\n\n  parsed_sectors << sector\nend\n\nparsed_sectors\n"},"external_var":false},{"html_id":"parse(filename:String|Path):Array(Sector)-class-method","name":"parse","doc":"Parses a sectors list given the filename\n\nOpens a sectors lump and parses it:\n```\nmy_sectors = WAD::Map::Sector.parse(\"Path/To/Sector\")\n```","summary":"<p>Parses a sectors list given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Array(Sector)","args_html":"(filename : String | Path) : Array(<a href=\"../../WAD/Map/Sector.html\">Sector</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":657,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L657"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Array(Sector)","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file, file.size)\nend\n\nraise(\"Sector invalid\")\n"},"external_var":false}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":639,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L639"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"ceiling_height:Int16-instance-method","name":"ceiling_height","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":644,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L644"},"def":{"name":"ceiling_height","return_type":"Int16","visibility":"Public","body":"@ceiling_height"},"external_var":false},{"html_id":"ceiling_height=(ceiling_height:Int16)-instance-method","name":"ceiling_height=","abstract":false,"args":[{"name":"ceiling_height","external_name":"ceiling_height","restriction":"Int16"}],"args_string":"(ceiling_height : Int16)","args_html":"(ceiling_height : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":644,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L644"},"def":{"name":"ceiling_height=","args":[{"name":"ceiling_height","external_name":"ceiling_height","restriction":"Int16"}],"visibility":"Public","body":"@ceiling_height = ceiling_height"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":641,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L641"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"floor_height:Int16-instance-method","name":"floor_height","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":643,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L643"},"def":{"name":"floor_height","return_type":"Int16","visibility":"Public","body":"@floor_height"},"external_var":false},{"html_id":"floor_height=(floor_height:Int16)-instance-method","name":"floor_height=","abstract":false,"args":[{"name":"floor_height","external_name":"floor_height","restriction":"Int16"}],"args_string":"(floor_height : Int16)","args_html":"(floor_height : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":643,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L643"},"def":{"name":"floor_height=","args":[{"name":"floor_height","external_name":"floor_height","restriction":"Int16"}],"visibility":"Public","body":"@floor_height = floor_height"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":639,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L639"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false},{"html_id":"light_level:Int16-instance-method","name":"light_level","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":647,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L647"},"def":{"name":"light_level","return_type":"Int16","visibility":"Public","body":"@light_level"},"external_var":false},{"html_id":"light_level=(light_level:Int16)-instance-method","name":"light_level=","abstract":false,"args":[{"name":"light_level","external_name":"light_level","restriction":"Int16"}],"args_string":"(light_level : Int16)","args_html":"(light_level : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":647,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L647"},"def":{"name":"light_level=","args":[{"name":"light_level","external_name":"light_level","restriction":"Int16"}],"visibility":"Public","body":"@light_level = light_level"},"external_var":false},{"html_id":"name_tex_ceiling:String-instance-method","name":"name_tex_ceiling","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":646,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L646"},"def":{"name":"name_tex_ceiling","return_type":"String","visibility":"Public","body":"@name_tex_ceiling"},"external_var":false},{"html_id":"name_tex_ceiling=(name_tex_ceiling:String)-instance-method","name":"name_tex_ceiling=","abstract":false,"args":[{"name":"name_tex_ceiling","external_name":"name_tex_ceiling","restriction":"String"}],"args_string":"(name_tex_ceiling : String)","args_html":"(name_tex_ceiling : String)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":646,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L646"},"def":{"name":"name_tex_ceiling=","args":[{"name":"name_tex_ceiling","external_name":"name_tex_ceiling","restriction":"String"}],"visibility":"Public","body":"@name_tex_ceiling = name_tex_ceiling"},"external_var":false},{"html_id":"name_tex_floor:String-instance-method","name":"name_tex_floor","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":645,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L645"},"def":{"name":"name_tex_floor","return_type":"String","visibility":"Public","body":"@name_tex_floor"},"external_var":false},{"html_id":"name_tex_floor=(name_tex_floor:String)-instance-method","name":"name_tex_floor=","abstract":false,"args":[{"name":"name_tex_floor","external_name":"name_tex_floor","restriction":"String"}],"args_string":"(name_tex_floor : String)","args_html":"(name_tex_floor : String)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":645,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L645"},"def":{"name":"name_tex_floor=","args":[{"name":"name_tex_floor","external_name":"name_tex_floor","restriction":"String"}],"visibility":"Public","body":"@name_tex_floor = name_tex_floor"},"external_var":false},{"html_id":"special_type:Int16-instance-method","name":"special_type","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":648,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L648"},"def":{"name":"special_type","return_type":"Int16","visibility":"Public","body":"@special_type"},"external_var":false},{"html_id":"special_type=(special_type:Int16)-instance-method","name":"special_type=","abstract":false,"args":[{"name":"special_type","external_name":"special_type","restriction":"Int16"}],"args_string":"(special_type : Int16)","args_html":"(special_type : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":648,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L648"},"def":{"name":"special_type=","args":[{"name":"special_type","external_name":"special_type","restriction":"Int16"}],"visibility":"Public","body":"@special_type = special_type"},"external_var":false},{"html_id":"tag_num:Int16-instance-method","name":"tag_num","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":649,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L649"},"def":{"name":"tag_num","return_type":"Int16","visibility":"Public","body":"@tag_num"},"external_var":false},{"html_id":"tag_num=(tag_num:Int16)-instance-method","name":"tag_num=","abstract":false,"args":[{"name":"tag_num","external_name":"tag_num","restriction":"Int16"}],"args_string":"(tag_num : Int16)","args_html":"(tag_num : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":649,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L649"},"def":{"name":"tag_num=","args":[{"name":"tag_num","external_name":"tag_num","restriction":"Int16"}],"visibility":"Public","body":"@tag_num = tag_num"},"external_var":false}]},{"html_id":"wa-cr/WAD/Map/Seg","path":"WAD/Map/Seg.html","kind":"struct","full_name":"WAD::Map::Seg","name":"Seg","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":425,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L425"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/Map","kind":"class","full_name":"WAD::Map","name":"Map"},"doc":"Structure of a seg.","summary":"<p>Structure of a seg.</p>","class_methods":[{"html_id":"parse(io:IO,lump_size:Int):Array(Seg)-class-method","name":"parse","doc":"Parses a segs list given the io and the size\n\nOpens a segs lump and parses it:\n```\nFile.open(\"Path/To/Seg\") do |file|\n  my_segs = WAD::Map::Seg.parse(file, file.size)\nend\n```","summary":"<p>Parses a segs list given the io and the size</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"args_string":"(io : IO, lump_size : Int) : Array(Seg)","args_html":"(io : IO, lump_size : Int) : Array(<a href=\"../../WAD/Map/Seg.html\">Seg</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":461,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L461"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"return_type":"Array(Seg)","visibility":"Public","body":"parsed_segs = [] of Seg\n\nsegs_index = 0\n\nentry_length = 12\n\nwhile (segs_index * entry_length) < lump_size\n  seg = Seg.new\n\n  seg.start_vertex_num = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n\n  seg.end_vertex_num = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n\n  seg.angle = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n\n  seg.linedef_num = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n\n  seg.direction = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n\n  seg.offset = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n\n  segs_index = segs_index + 1\n\n  parsed_segs << seg\nend\n\nparsed_segs\n"},"external_var":false},{"html_id":"parse(filename:String|Path):Array(Seg)-class-method","name":"parse","doc":"Parses a segs list given the filename\n\nOpens a segs lump and parses it:\n```\nmy_segs = WAD::Map::Seg.parse(\"Path/To/Seg\")\n```","summary":"<p>Parses a segs list given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Array(Seg)","args_html":"(filename : String | Path) : Array(<a href=\"../../WAD/Map/Seg.html\">Seg</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":445,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L445"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Array(Seg)","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file, file.size)\nend\n\nraise(\"Seg invalid\")\n"},"external_var":false}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":425,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L425"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"angle:Int16-instance-method","name":"angle","doc":"Angle, full circle is -32768 to 32767.","summary":"<p>Angle, full circle is -32768 to 32767.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":432,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L432"},"def":{"name":"angle","return_type":"Int16","visibility":"Public","body":"@angle"},"external_var":false},{"html_id":"angle=(angle:Int16)-instance-method","name":"angle=","doc":"Angle, full circle is -32768 to 32767.","summary":"<p>Angle, full circle is -32768 to 32767.</p>","abstract":false,"args":[{"name":"angle","external_name":"angle","restriction":"Int16"}],"args_string":"(angle : Int16)","args_html":"(angle : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":432,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L432"},"def":{"name":"angle=","args":[{"name":"angle","external_name":"angle","restriction":"Int16"}],"visibility":"Public","body":"@angle = angle"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":427,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L427"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"direction:Int16-instance-method","name":"direction","doc":"Direction, 0 (same as linedef) or 1 (opposite of linedef).","summary":"<p>Direction, 0 (same as linedef) or 1 (opposite of linedef).</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":435,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L435"},"def":{"name":"direction","return_type":"Int16","visibility":"Public","body":"@direction"},"external_var":false},{"html_id":"direction=(direction:Int16)-instance-method","name":"direction=","doc":"Direction, 0 (same as linedef) or 1 (opposite of linedef).","summary":"<p>Direction, 0 (same as linedef) or 1 (opposite of linedef).</p>","abstract":false,"args":[{"name":"direction","external_name":"direction","restriction":"Int16"}],"args_string":"(direction : Int16)","args_html":"(direction : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":435,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L435"},"def":{"name":"direction=","args":[{"name":"direction","external_name":"direction","restriction":"Int16"}],"visibility":"Public","body":"@direction = direction"},"external_var":false},{"html_id":"end_vertex_num:Int16-instance-method","name":"end_vertex_num","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":430,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L430"},"def":{"name":"end_vertex_num","return_type":"Int16","visibility":"Public","body":"@end_vertex_num"},"external_var":false},{"html_id":"end_vertex_num=(end_vertex_num:Int16)-instance-method","name":"end_vertex_num=","abstract":false,"args":[{"name":"end_vertex_num","external_name":"end_vertex_num","restriction":"Int16"}],"args_string":"(end_vertex_num : Int16)","args_html":"(end_vertex_num : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":430,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L430"},"def":{"name":"end_vertex_num=","args":[{"name":"end_vertex_num","external_name":"end_vertex_num","restriction":"Int16"}],"visibility":"Public","body":"@end_vertex_num = end_vertex_num"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":425,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L425"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false},{"html_id":"linedef_num:Int16-instance-method","name":"linedef_num","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":433,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L433"},"def":{"name":"linedef_num","return_type":"Int16","visibility":"Public","body":"@linedef_num"},"external_var":false},{"html_id":"linedef_num=(linedef_num:Int16)-instance-method","name":"linedef_num=","abstract":false,"args":[{"name":"linedef_num","external_name":"linedef_num","restriction":"Int16"}],"args_string":"(linedef_num : Int16)","args_html":"(linedef_num : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":433,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L433"},"def":{"name":"linedef_num=","args":[{"name":"linedef_num","external_name":"linedef_num","restriction":"Int16"}],"visibility":"Public","body":"@linedef_num = linedef_num"},"external_var":false},{"html_id":"offset:Int16-instance-method","name":"offset","doc":"Offset, distance along linedef to start of seg.","summary":"<p>Offset, distance along linedef to start of seg.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":437,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L437"},"def":{"name":"offset","return_type":"Int16","visibility":"Public","body":"@offset"},"external_var":false},{"html_id":"offset=(offset:Int16)-instance-method","name":"offset=","doc":"Offset, distance along linedef to start of seg.","summary":"<p>Offset, distance along linedef to start of seg.</p>","abstract":false,"args":[{"name":"offset","external_name":"offset","restriction":"Int16"}],"args_string":"(offset : Int16)","args_html":"(offset : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":437,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L437"},"def":{"name":"offset=","args":[{"name":"offset","external_name":"offset","restriction":"Int16"}],"visibility":"Public","body":"@offset = offset"},"external_var":false},{"html_id":"start_vertex_num:Int16-instance-method","name":"start_vertex_num","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":429,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L429"},"def":{"name":"start_vertex_num","return_type":"Int16","visibility":"Public","body":"@start_vertex_num"},"external_var":false},{"html_id":"start_vertex_num=(start_vertex_num:Int16)-instance-method","name":"start_vertex_num=","abstract":false,"args":[{"name":"start_vertex_num","external_name":"start_vertex_num","restriction":"Int16"}],"args_string":"(start_vertex_num : Int16)","args_html":"(start_vertex_num : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":429,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L429"},"def":{"name":"start_vertex_num=","args":[{"name":"start_vertex_num","external_name":"start_vertex_num","restriction":"Int16"}],"visibility":"Public","body":"@start_vertex_num = start_vertex_num"},"external_var":false}]},{"html_id":"wa-cr/WAD/Map/Sidedef","path":"WAD/Map/Sidedef.html","kind":"struct","full_name":"WAD::Map::Sidedef","name":"Sidedef","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":308,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L308"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/Map","kind":"class","full_name":"WAD::Map","name":"Map"},"doc":"Structure of a sidedef.","summary":"<p>Structure of a sidedef.</p>","class_methods":[{"html_id":"parse(io:IO,lump_size:Int):Array(Sidedef)-class-method","name":"parse","doc":"Parses a sidedefs list given the io and the size\n\nOpens a sidedefs lump and parses it:\n```\nFile.open(\"Path/To/Sidedef\") do |file|\n  my_sidedefs = WAD::Map::Sidedef.parse(file, file.size)\nend\n```","summary":"<p>Parses a sidedefs list given the io and the size</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"args_string":"(io : IO, lump_size : Int) : Array(Sidedef)","args_html":"(io : IO, lump_size : Int) : Array(<a href=\"../../WAD/Map/Sidedef.html\">Sidedef</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":342,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L342"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"return_type":"Array(Sidedef)","visibility":"Public","body":"parsed_sidedefs = [] of Sidedef\n\nsidedefs_index = 0\n\nentry_length = 30\n\nwhile (sidedefs_index * entry_length) < lump_size\n  sidedef = Sidedef.new\n\n  sidedef.x_offset = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  sidedef.y_offset = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  sidedef.name_tex_up = (io.gets(8)).to_s.gsub(\"\\u0000\", \"\")\n  sidedef.name_tex_low = (io.gets(8)).to_s.gsub(\"\\u0000\", \"\")\n  sidedef.name_tex_mid = (io.gets(8)).to_s.gsub(\"\\u0000\", \"\")\n  sidedef.facing_sector_num = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n\n  sidedefs_index = sidedefs_index + 1\n\n  parsed_sidedefs << sidedef\nend\n\nparsed_sidedefs\n"},"external_var":false},{"html_id":"parse(filename:String|Path):Array(Sidedef)-class-method","name":"parse","doc":"Parses a sidedefs list given the filename\n\nOpens a sidedefs lump and parses it:\n```\nmy_sidedefs = WAD::Map::Sidedef.parse(\"Path/To/Sidedef\")\n```","summary":"<p>Parses a sidedefs list given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Array(Sidedef)","args_html":"(filename : String | Path) : Array(<a href=\"../../WAD/Map/Sidedef.html\">Sidedef</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":326,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L326"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Array(Sidedef)","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file, file.size)\nend\n\nraise(\"Sidedef invalid\")\n"},"external_var":false}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":308,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L308"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":310,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L310"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"facing_sector_num:Int16-instance-method","name":"facing_sector_num","doc":"Sector number this sidedef 'faces'.","summary":"<p>Sector number this sidedef 'faces'.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":318,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L318"},"def":{"name":"facing_sector_num","return_type":"Int16","visibility":"Public","body":"@facing_sector_num"},"external_var":false},{"html_id":"facing_sector_num=(facing_sector_num:Int16)-instance-method","name":"facing_sector_num=","doc":"Sector number this sidedef 'faces'.","summary":"<p>Sector number this sidedef 'faces'.</p>","abstract":false,"args":[{"name":"facing_sector_num","external_name":"facing_sector_num","restriction":"Int16"}],"args_string":"(facing_sector_num : Int16)","args_html":"(facing_sector_num : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":318,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L318"},"def":{"name":"facing_sector_num=","args":[{"name":"facing_sector_num","external_name":"facing_sector_num","restriction":"Int16"}],"visibility":"Public","body":"@facing_sector_num = facing_sector_num"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":308,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L308"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false},{"html_id":"name_tex_low:String-instance-method","name":"name_tex_low","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":315,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L315"},"def":{"name":"name_tex_low","return_type":"String","visibility":"Public","body":"@name_tex_low"},"external_var":false},{"html_id":"name_tex_low=(name_tex_low:String)-instance-method","name":"name_tex_low=","abstract":false,"args":[{"name":"name_tex_low","external_name":"name_tex_low","restriction":"String"}],"args_string":"(name_tex_low : String)","args_html":"(name_tex_low : String)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":315,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L315"},"def":{"name":"name_tex_low=","args":[{"name":"name_tex_low","external_name":"name_tex_low","restriction":"String"}],"visibility":"Public","body":"@name_tex_low = name_tex_low"},"external_var":false},{"html_id":"name_tex_mid:String-instance-method","name":"name_tex_mid","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":316,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L316"},"def":{"name":"name_tex_mid","return_type":"String","visibility":"Public","body":"@name_tex_mid"},"external_var":false},{"html_id":"name_tex_mid=(name_tex_mid:String)-instance-method","name":"name_tex_mid=","abstract":false,"args":[{"name":"name_tex_mid","external_name":"name_tex_mid","restriction":"String"}],"args_string":"(name_tex_mid : String)","args_html":"(name_tex_mid : String)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":316,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L316"},"def":{"name":"name_tex_mid=","args":[{"name":"name_tex_mid","external_name":"name_tex_mid","restriction":"String"}],"visibility":"Public","body":"@name_tex_mid = name_tex_mid"},"external_var":false},{"html_id":"name_tex_up:String-instance-method","name":"name_tex_up","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":314,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L314"},"def":{"name":"name_tex_up","return_type":"String","visibility":"Public","body":"@name_tex_up"},"external_var":false},{"html_id":"name_tex_up=(name_tex_up:String)-instance-method","name":"name_tex_up=","abstract":false,"args":[{"name":"name_tex_up","external_name":"name_tex_up","restriction":"String"}],"args_string":"(name_tex_up : String)","args_html":"(name_tex_up : String)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":314,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L314"},"def":{"name":"name_tex_up=","args":[{"name":"name_tex_up","external_name":"name_tex_up","restriction":"String"}],"visibility":"Public","body":"@name_tex_up = name_tex_up"},"external_var":false},{"html_id":"x_offset:Int16-instance-method","name":"x_offset","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":312,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L312"},"def":{"name":"x_offset","return_type":"Int16","visibility":"Public","body":"@x_offset"},"external_var":false},{"html_id":"x_offset=(x_offset:Int16)-instance-method","name":"x_offset=","abstract":false,"args":[{"name":"x_offset","external_name":"x_offset","restriction":"Int16"}],"args_string":"(x_offset : Int16)","args_html":"(x_offset : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":312,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L312"},"def":{"name":"x_offset=","args":[{"name":"x_offset","external_name":"x_offset","restriction":"Int16"}],"visibility":"Public","body":"@x_offset = x_offset"},"external_var":false},{"html_id":"y_offset:Int16-instance-method","name":"y_offset","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":313,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L313"},"def":{"name":"y_offset","return_type":"Int16","visibility":"Public","body":"@y_offset"},"external_var":false},{"html_id":"y_offset=(y_offset:Int16)-instance-method","name":"y_offset=","abstract":false,"args":[{"name":"y_offset","external_name":"y_offset","restriction":"Int16"}],"args_string":"(y_offset : Int16)","args_html":"(y_offset : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":313,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L313"},"def":{"name":"y_offset=","args":[{"name":"y_offset","external_name":"y_offset","restriction":"Int16"}],"visibility":"Public","body":"@y_offset = y_offset"},"external_var":false}]},{"html_id":"wa-cr/WAD/Map/Ssector","path":"WAD/Map/Ssector.html","kind":"struct","full_name":"WAD::Map::Ssector","name":"Ssector","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":495,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L495"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/Map","kind":"class","full_name":"WAD::Map","name":"Map"},"doc":"Structure of a ssector.","summary":"<p>Structure of a ssector.</p>","class_methods":[{"html_id":"parse(io:IO,lump_size:Int):Array(Ssector)-class-method","name":"parse","doc":"Parses a ssectors list given the io and the size\n\nOpens a ssectors lump and parses it:\n```\nFile.open(\"Path/To/Ssector\") do |file|\n  my_ssectors = WAD::Map::Ssector.parse(file, file.size)\nend\n```","summary":"<p>Parses a ssectors list given the io and the size</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"args_string":"(io : IO, lump_size : Int) : Array(Ssector)","args_html":"(io : IO, lump_size : Int) : Array(<a href=\"../../WAD/Map/Ssector.html\">Ssector</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":524,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L524"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"return_type":"Array(Ssector)","visibility":"Public","body":"parsed_ssectors = [] of Ssector\n\nssectors_index = 0\n\nentry_length = 4\n\nwhile (ssectors_index * entry_length) < lump_size\n  ssector = Ssector.new\n\n  ssector.seg_count = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  ssector.first_seg_num = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n\n  ssectors_index = ssectors_index + 1\n\n  parsed_ssectors << ssector\nend\n\nparsed_ssectors\n"},"external_var":false},{"html_id":"parse(filename:String|Path):Array(Ssector)-class-method","name":"parse","doc":"Parses a ssectors list given the filename\n\nOpens a ssectors lump and parses it:\n```\nmy_ssectors = WAD::Map::Ssector.parse(\"Path/To/Ssector\")\n```","summary":"<p>Parses a ssectors list given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Array(Ssector)","args_html":"(filename : String | Path) : Array(<a href=\"../../WAD/Map/Ssector.html\">Ssector</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":508,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L508"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Array(Ssector)","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file, file.size)\nend\n\nraise(\"Ssector invalid\")\n"},"external_var":false}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":495,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L495"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":497,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L497"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"first_seg_num:Int16-instance-method","name":"first_seg_num","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":500,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L500"},"def":{"name":"first_seg_num","return_type":"Int16","visibility":"Public","body":"@first_seg_num"},"external_var":false},{"html_id":"first_seg_num=(first_seg_num:Int16)-instance-method","name":"first_seg_num=","abstract":false,"args":[{"name":"first_seg_num","external_name":"first_seg_num","restriction":"Int16"}],"args_string":"(first_seg_num : Int16)","args_html":"(first_seg_num : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":500,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L500"},"def":{"name":"first_seg_num=","args":[{"name":"first_seg_num","external_name":"first_seg_num","restriction":"Int16"}],"visibility":"Public","body":"@first_seg_num = first_seg_num"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":495,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L495"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false},{"html_id":"seg_count:Int16-instance-method","name":"seg_count","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":499,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L499"},"def":{"name":"seg_count","return_type":"Int16","visibility":"Public","body":"@seg_count"},"external_var":false},{"html_id":"seg_count=(seg_count:Int16)-instance-method","name":"seg_count=","abstract":false,"args":[{"name":"seg_count","external_name":"seg_count","restriction":"Int16"}],"args_string":"(seg_count : Int16)","args_html":"(seg_count : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":499,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L499"},"def":{"name":"seg_count=","args":[{"name":"seg_count","external_name":"seg_count","restriction":"Int16"}],"visibility":"Public","body":"@seg_count = seg_count"},"external_var":false}]},{"html_id":"wa-cr/WAD/Map/Thing","path":"WAD/Map/Thing.html","kind":"struct","full_name":"WAD::Map::Thing","name":"Thing","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":184,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L184"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/Map","kind":"class","full_name":"WAD::Map","name":"Map"},"doc":"Structure of a thing.","summary":"<p>Structure of a thing.</p>","class_methods":[{"html_id":"parse(io:IO,lump_size:Int):Array(Thing)-class-method","name":"parse","doc":"Parses a things list given the io and the size\n\nOpens a things lump and parses it:\n```\nFile.open(\"Path/To/Thing\") do |file|\n  my_things = WAD::Map::Thing.parse(file, file.size)\nend\n```","summary":"<p>Parses a things list given the io and the size</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"args_string":"(io : IO, lump_size : Int) : Array(Thing)","args_html":"(io : IO, lump_size : Int) : Array(<a href=\"../../WAD/Map/Thing.html\">Thing</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":216,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L216"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"return_type":"Array(Thing)","visibility":"Public","body":"parsed_things = [] of Thing\n\nthings_index = 0\n\nentry_length = 10\n\nwhile (things_index * entry_length) < lump_size\n  thing = Thing.new\n\n  thing.x_position = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  thing.y_position = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  thing.angle_facing = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  thing.thing_type = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  thing.flags = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n\n  things_index = things_index + 1\n\n  parsed_things << thing\nend\n\nparsed_things\n"},"external_var":false},{"html_id":"parse(filename:String|Path):Array(Thing)-class-method","name":"parse","doc":"Parses a things list given the filename\n\nOpens a things lump and parses it:\n```\nmy_things = WAD::Map::Thing.parse(\"Path/To/Thing\")\n```","summary":"<p>Parses a things list given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Array(Thing)","args_html":"(filename : String | Path) : Array(<a href=\"../../WAD/Map/Thing.html\">Thing</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":200,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L200"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Array(Thing)","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file, file.size)\nend\n\nraise(\"Thing invalid\")\n"},"external_var":false}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":184,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L184"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"angle_facing:Int16-instance-method","name":"angle_facing","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":190,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L190"},"def":{"name":"angle_facing","return_type":"Int16","visibility":"Public","body":"@angle_facing"},"external_var":false},{"html_id":"angle_facing=(angle_facing:Int16)-instance-method","name":"angle_facing=","abstract":false,"args":[{"name":"angle_facing","external_name":"angle_facing","restriction":"Int16"}],"args_string":"(angle_facing : Int16)","args_html":"(angle_facing : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":190,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L190"},"def":{"name":"angle_facing=","args":[{"name":"angle_facing","external_name":"angle_facing","restriction":"Int16"}],"visibility":"Public","body":"@angle_facing = angle_facing"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":186,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L186"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"flags:Int16-instance-method","name":"flags","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":192,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L192"},"def":{"name":"flags","return_type":"Int16","visibility":"Public","body":"@flags"},"external_var":false},{"html_id":"flags=(flags:Int16)-instance-method","name":"flags=","abstract":false,"args":[{"name":"flags","external_name":"flags","restriction":"Int16"}],"args_string":"(flags : Int16)","args_html":"(flags : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":192,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L192"},"def":{"name":"flags=","args":[{"name":"flags","external_name":"flags","restriction":"Int16"}],"visibility":"Public","body":"@flags = flags"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":184,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L184"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false},{"html_id":"thing_type:Int16-instance-method","name":"thing_type","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":191,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L191"},"def":{"name":"thing_type","return_type":"Int16","visibility":"Public","body":"@thing_type"},"external_var":false},{"html_id":"thing_type=(thing_type:Int16)-instance-method","name":"thing_type=","abstract":false,"args":[{"name":"thing_type","external_name":"thing_type","restriction":"Int16"}],"args_string":"(thing_type : Int16)","args_html":"(thing_type : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":191,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L191"},"def":{"name":"thing_type=","args":[{"name":"thing_type","external_name":"thing_type","restriction":"Int16"}],"visibility":"Public","body":"@thing_type = thing_type"},"external_var":false},{"html_id":"x_position:Int16-instance-method","name":"x_position","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":188,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L188"},"def":{"name":"x_position","return_type":"Int16","visibility":"Public","body":"@x_position"},"external_var":false},{"html_id":"x_position=(x_position:Int16)-instance-method","name":"x_position=","abstract":false,"args":[{"name":"x_position","external_name":"x_position","restriction":"Int16"}],"args_string":"(x_position : Int16)","args_html":"(x_position : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":188,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L188"},"def":{"name":"x_position=","args":[{"name":"x_position","external_name":"x_position","restriction":"Int16"}],"visibility":"Public","body":"@x_position = x_position"},"external_var":false},{"html_id":"y_position:Int16-instance-method","name":"y_position","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":189,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L189"},"def":{"name":"y_position","return_type":"Int16","visibility":"Public","body":"@y_position"},"external_var":false},{"html_id":"y_position=(y_position:Int16)-instance-method","name":"y_position=","abstract":false,"args":[{"name":"y_position","external_name":"y_position","restriction":"Int16"}],"args_string":"(y_position : Int16)","args_html":"(y_position : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":189,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L189"},"def":{"name":"y_position=","args":[{"name":"y_position","external_name":"y_position","restriction":"Int16"}],"visibility":"Public","body":"@y_position = y_position"},"external_var":false}]},{"html_id":"wa-cr/WAD/Map/Vertex","path":"WAD/Map/Vertex.html","kind":"struct","full_name":"WAD::Map::Vertex","name":"Vertex","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":371,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L371"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/Map","kind":"class","full_name":"WAD::Map","name":"Map"},"doc":"Structure of a vertex.","summary":"<p>Structure of a vertex.</p>","class_methods":[{"html_id":"parse(io:IO,lump_size:Int):Array(Vertex)-class-method","name":"parse","doc":"Parses a vertexes list given the io and the size\n\nOpens a vertexes lump and parses it:\n```\nFile.open(\"Path/To/Vertex\") do |file|\n  my_vertexes = WAD::Map::Vertex.parse(file, file.size)\nend\n```","summary":"<p>Parses a vertexes list given the io and the size</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"args_string":"(io : IO, lump_size : Int) : Array(Vertex)","args_html":"(io : IO, lump_size : Int) : Array(<a href=\"../../WAD/Map/Vertex.html\">Vertex</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":400,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L400"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"lump_size","external_name":"lump_size","restriction":"Int"}],"return_type":"Array(Vertex)","visibility":"Public","body":"parsed_vertexes = [] of Vertex\n\nvertexes_index = 0\n\nentry_length = 4\n\nwhile (vertexes_index * entry_length) < lump_size\n  vertex = Vertex.new\n\n  vertex.x_position = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  vertex.y_position = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n\n  vertexes_index = vertexes_index + 1\n\n  parsed_vertexes << vertex\nend\n\nparsed_vertexes\n"},"external_var":false},{"html_id":"parse(filename:String|Path):Array(Vertex)-class-method","name":"parse","doc":"Parses a vertexes list given the filename\n\nOpens a vertexes lump and parses it:\n```\nmy_vertexes = WAD::Map::Vertex.parse(\"Path/To/Vertex\")\n```","summary":"<p>Parses a vertexes list given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Array(Vertex)","args_html":"(filename : String | Path) : Array(<a href=\"../../WAD/Map/Vertex.html\">Vertex</a>)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":384,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L384"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Array(Vertex)","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file, file.size)\nend\n\nraise(\"Vertex invalid\")\n"},"external_var":false}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":371,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L371"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":373,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L373"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":371,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L371"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false},{"html_id":"x_position:Int16-instance-method","name":"x_position","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":375,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L375"},"def":{"name":"x_position","return_type":"Int16","visibility":"Public","body":"@x_position"},"external_var":false},{"html_id":"x_position=(x_position:Int16)-instance-method","name":"x_position=","abstract":false,"args":[{"name":"x_position","external_name":"x_position","restriction":"Int16"}],"args_string":"(x_position : Int16)","args_html":"(x_position : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":375,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L375"},"def":{"name":"x_position=","args":[{"name":"x_position","external_name":"x_position","restriction":"Int16"}],"visibility":"Public","body":"@x_position = x_position"},"external_var":false},{"html_id":"y_position:Int16-instance-method","name":"y_position","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":376,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L376"},"def":{"name":"y_position","return_type":"Int16","visibility":"Public","body":"@y_position"},"external_var":false},{"html_id":"y_position=(y_position:Int16)-instance-method","name":"y_position=","abstract":false,"args":[{"name":"y_position","external_name":"y_position","restriction":"Int16"}],"args_string":"(y_position : Int16)","args_html":"(y_position : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/map.cr","line_number":376,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/map.cr#L376"},"def":{"name":"y_position=","args":[{"name":"y_position","external_name":"y_position","restriction":"Int16"}],"visibility":"Public","body":"@y_position = y_position"},"external_var":false}]}]},{"html_id":"wa-cr/WAD/Music","path":"WAD/Music.html","kind":"class","full_name":"WAD::Music","name":"Music","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/WritingAdditions/Music","kind":"module","full_name":"WritingAdditions::Music","name":"Music"},{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":3,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L3"},{"filename":"src/write.cr","line_number":326,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L326"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"wa-cr/WritingAdditions/Music","kind":"module","full_name":"WritingAdditions::Music","name":"Music"}],"namespace":{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"},"doc":"A music track.","summary":"<p>A music track.</p>","class_methods":[{"html_id":"is_music?(name:String)-class-method","name":"is_music?","doc":"Checks to see if *name* is music with name format 'D_x..x'.\n\nReturns true if the name is a music:\n```\nmusic_name = \"D_E1M1\"\nif WAD::Music.is_music?(music_name)\n  puts \"Is a Music\"\nelse\n  puts \"Is not a Music\"\nend\n```","summary":"<p>Checks to see if <em>name</em> is music with name format 'D_x..x'.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":87,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L87"},"def":{"name":"is_music?","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"!(!(name =~ (/^D_/)))"},"external_var":false}],"constructors":[{"html_id":"parse(filename:String|Path):Music-class-method","name":"parse","doc":"Parses a music file given the filename\n\nOpens a music file and parses it:\n```\nmy_music = WAD::Music.parse(\"Path/To/Music\")\n```","summary":"<p>Parses a music file given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Music","args_html":"(filename : String | Path) : <a href=\"../WAD/Music.html\">Music</a>","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":29,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L29"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Music","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file)\nend\n\nraise(\"Music invalid\")\n"},"external_var":false},{"html_id":"parse(io:IO):Music-class-method","name":"parse","doc":"Parses a music file given the io\n\nOpens a music io and parses it:\n```\nFile.open(\"Path/To/Music\") do |file|\n  my_music = WAD::Music.parse(file)\nend\n```","summary":"<p>Parses a music file given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Music","args_html":"(io : IO) : <a href=\"../WAD/Music.html\">Music</a>","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":45,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L45"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Music","visibility":"Public","body":"music = Music.new\nmusic.raw = io.getb_to_end.to_a\nio.rewind\n\nmusic.identifier = (io.gets(4)).to_s\nmusic.score_len = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\nmusic.score_start = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\nmusic.channels = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\nmusic.sec_channels = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\nmusic.instr_cnt = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\n\nio.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\n\n\nmusic.instr_cnt.times do\n  music.instruments << (io.read_bytes(UInt16, IO::ByteFormat::LittleEndian))\nend\n\n\nloop do\n  begin\n    music.song << (io.read_bytes(UInt8, IO::ByteFormat::LittleEndian))\n  rescue e : IO::EOFError\n    break\n  end\nend\n\nmusic\n"},"external_var":false}],"instance_methods":[{"html_id":"channels:UInt16-instance-method","name":"channels","doc":"Count of primary channels.","summary":"<p>Count of primary channels.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":11,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L11"},"def":{"name":"channels","return_type":"UInt16","visibility":"Public","body":"@channels"},"external_var":false},{"html_id":"channels=(channels:UInt16)-instance-method","name":"channels=","doc":"Count of primary channels.","summary":"<p>Count of primary channels.</p>","abstract":false,"args":[{"name":"channels","external_name":"channels","restriction":"UInt16"}],"args_string":"(channels : UInt16)","args_html":"(channels : UInt16)","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":11,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L11"},"def":{"name":"channels=","args":[{"name":"channels","external_name":"channels","restriction":"UInt16"}],"visibility":"Public","body":"@channels = channels"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":5,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L5"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"dummy:UInt16-instance-method","name":"dummy","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":15,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L15"},"def":{"name":"dummy","return_type":"UInt16","visibility":"Public","body":"@dummy"},"external_var":false},{"html_id":"dummy=(dummy:UInt16)-instance-method","name":"dummy=","abstract":false,"args":[{"name":"dummy","external_name":"dummy","restriction":"UInt16"}],"args_string":"(dummy : UInt16)","args_html":"(dummy : UInt16)","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":15,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L15"},"def":{"name":"dummy=","args":[{"name":"dummy","external_name":"dummy","restriction":"UInt16"}],"visibility":"Public","body":"@dummy = dummy"},"external_var":false},{"html_id":"identifier:String-instance-method","name":"identifier","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":7,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L7"},"def":{"name":"identifier","return_type":"String","visibility":"Public","body":"@identifier"},"external_var":false},{"html_id":"identifier=(identifier:String)-instance-method","name":"identifier=","abstract":false,"args":[{"name":"identifier","external_name":"identifier","restriction":"String"}],"args_string":"(identifier : String)","args_html":"(identifier : String)","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":7,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L7"},"def":{"name":"identifier=","args":[{"name":"identifier","external_name":"identifier","restriction":"String"}],"visibility":"Public","body":"@identifier = identifier"},"external_var":false},{"html_id":"instr_cnt:UInt16-instance-method","name":"instr_cnt","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":14,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L14"},"def":{"name":"instr_cnt","return_type":"UInt16","visibility":"Public","body":"@instr_cnt"},"external_var":false},{"html_id":"instr_cnt=(instr_cnt:UInt16)-instance-method","name":"instr_cnt=","abstract":false,"args":[{"name":"instr_cnt","external_name":"instr_cnt","restriction":"UInt16"}],"args_string":"(instr_cnt : UInt16)","args_html":"(instr_cnt : UInt16)","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":14,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L14"},"def":{"name":"instr_cnt=","args":[{"name":"instr_cnt","external_name":"instr_cnt","restriction":"UInt16"}],"visibility":"Public","body":"@instr_cnt = instr_cnt"},"external_var":false},{"html_id":"instruments:Array(UInt16)-instance-method","name":"instruments","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":16,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L16"},"def":{"name":"instruments","visibility":"Public","body":"@instruments"},"external_var":false},{"html_id":"instruments=(instruments:Array(UInt16))-instance-method","name":"instruments=","abstract":false,"args":[{"name":"instruments","external_name":"instruments","restriction":"::Array(::UInt16)"}],"args_string":"(instruments : Array(UInt16))","args_html":"(instruments : Array(UInt16))","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":16,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L16"},"def":{"name":"instruments=","args":[{"name":"instruments","external_name":"instruments","restriction":"::Array(::UInt16)"}],"visibility":"Public","body":"@instruments = instruments"},"external_var":false},{"html_id":"raw:Array(UInt8)-instance-method","name":"raw","doc":"The raw .mus file","summary":"<p>The raw .mus file</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":21,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L21"},"def":{"name":"raw","visibility":"Public","body":"@raw"},"external_var":false},{"html_id":"raw=(raw:Array(UInt8))-instance-method","name":"raw=","doc":"The raw .mus file","summary":"<p>The raw .mus file</p>","abstract":false,"args":[{"name":"raw","external_name":"raw","restriction":"::Array(::UInt8)"}],"args_string":"(raw : Array(UInt8))","args_html":"(raw : Array(UInt8))","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":21,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L21"},"def":{"name":"raw=","args":[{"name":"raw","external_name":"raw","restriction":"::Array(::UInt8)"}],"visibility":"Public","body":"@raw = raw"},"external_var":false},{"html_id":"score_len:UInt16-instance-method","name":"score_len","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":8,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L8"},"def":{"name":"score_len","return_type":"UInt16","visibility":"Public","body":"@score_len"},"external_var":false},{"html_id":"score_len=(score_len:UInt16)-instance-method","name":"score_len=","abstract":false,"args":[{"name":"score_len","external_name":"score_len","restriction":"UInt16"}],"args_string":"(score_len : UInt16)","args_html":"(score_len : UInt16)","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":8,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L8"},"def":{"name":"score_len=","args":[{"name":"score_len","external_name":"score_len","restriction":"UInt16"}],"visibility":"Public","body":"@score_len = score_len"},"external_var":false},{"html_id":"score_start:UInt16-instance-method","name":"score_start","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":9,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L9"},"def":{"name":"score_start","return_type":"UInt16","visibility":"Public","body":"@score_start"},"external_var":false},{"html_id":"score_start=(score_start:UInt16)-instance-method","name":"score_start=","abstract":false,"args":[{"name":"score_start","external_name":"score_start","restriction":"UInt16"}],"args_string":"(score_start : UInt16)","args_html":"(score_start : UInt16)","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":9,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L9"},"def":{"name":"score_start=","args":[{"name":"score_start","external_name":"score_start","restriction":"UInt16"}],"visibility":"Public","body":"@score_start = score_start"},"external_var":false},{"html_id":"sec_channels:UInt16-instance-method","name":"sec_channels","doc":"Count of secondary channels.","summary":"<p>Count of secondary channels.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":13,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L13"},"def":{"name":"sec_channels","return_type":"UInt16","visibility":"Public","body":"@sec_channels"},"external_var":false},{"html_id":"sec_channels=(sec_channels:UInt16)-instance-method","name":"sec_channels=","doc":"Count of secondary channels.","summary":"<p>Count of secondary channels.</p>","abstract":false,"args":[{"name":"sec_channels","external_name":"sec_channels","restriction":"UInt16"}],"args_string":"(sec_channels : UInt16)","args_html":"(sec_channels : UInt16)","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":13,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L13"},"def":{"name":"sec_channels=","args":[{"name":"sec_channels","external_name":"sec_channels","restriction":"UInt16"}],"visibility":"Public","body":"@sec_channels = sec_channels"},"external_var":false},{"html_id":"song:Array(UInt8)-instance-method","name":"song","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":18,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L18"},"def":{"name":"song","visibility":"Public","body":"@song"},"external_var":false},{"html_id":"song=(song:Array(UInt8))-instance-method","name":"song=","abstract":false,"args":[{"name":"song","external_name":"song","restriction":"::Array(::UInt8)"}],"args_string":"(song : Array(UInt8))","args_html":"(song : Array(UInt8))","location":{"filename":"src/wa-cr/wad/wad-data/music.cr","line_number":18,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/music.cr#L18"},"def":{"name":"song=","args":[{"name":"song","external_name":"song","restriction":"::Array(::UInt8)"}],"visibility":"Public","body":"@song = song"},"external_var":false}]},{"html_id":"wa-cr/WAD/PcSound","path":"WAD/PcSound.html","kind":"class","full_name":"WAD::PcSound","name":"PcSound","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/WritingAdditions/PcSound","kind":"module","full_name":"WritingAdditions::PcSound","name":"PcSound"},{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":3,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L3"},{"filename":"src/write.cr","line_number":338,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L338"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"SAMPLE_RATE","name":"SAMPLE_RATE","value":"140"}],"included_modules":[{"html_id":"wa-cr/WritingAdditions/PcSound","kind":"module","full_name":"WritingAdditions::PcSound","name":"PcSound"}],"namespace":{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"},"doc":"A pc speaker sound effect.","summary":"<p>A pc speaker sound effect.</p>","class_methods":[{"html_id":"is_pcsound?(name:String)-class-method","name":"is_pcsound?","doc":"Checks to see if *name* is a pc sound with name format 'DPx..x'.\n\nReturns true if the name is a pc sound:\n```\npcsound_name = \"DPNOWAY\"\nif WAD::PcSound.is_pcsound?(pcsound_name)\n  puts \"Is a Pc Sound\"\nelse\n  puts \"Is not a Pc Sound\"\nend\n```","summary":"<p>Checks to see if <em>name</em> is a pc sound with name format 'DPx..x'.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":58,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L58"},"def":{"name":"is_pcsound?","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"!(!(name =~ (/^DP/)))"},"external_var":false}],"constructors":[{"html_id":"parse(filename:String|Path):PcSound-class-method","name":"parse","doc":"Parses a pc sound lump.\n\nOpens a pc sound file and parses it:\n```\nmy_pcsound = WAD::PcSound.parse(\"Path/To/PcSound\")\n```","summary":"<p>Parses a pc sound lump.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : PcSound","args_html":"(filename : String | Path) : <a href=\"../WAD/PcSound.html\">PcSound</a>","location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":18,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L18"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"PcSound","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file)\nend\n\nraise(\"Pc Sound invalid\")\n"},"external_var":false},{"html_id":"parse(io:IO):PcSound-class-method","name":"parse","doc":"Parses a pc sound lump.\n\nOpens a pc sound io and parses it:\n```\nFile.open(\"Path/To/PcSound\") do |file|\n  my_pcsound = WAD::PcSound.parse(file)\nend\n```","summary":"<p>Parses a pc sound lump.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : PcSound","args_html":"(io : IO) : <a href=\"../WAD/PcSound.html\">PcSound</a>","location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":34,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L34"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"PcSound","visibility":"Public","body":"pcsound = PcSound.new\npcsound.format_num = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\npcsound.samples_num = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\nsample_index = 0\n\nwhile sample_index < pcsound.samples_num\n  pcsound.samples << (io.read_bytes(UInt8, IO::ByteFormat::LittleEndian))\n  sample_index = sample_index + 1\nend\npcsound\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":5,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L5"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"format_num:UInt16-instance-method","name":"format_num","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":8,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L8"},"def":{"name":"format_num","return_type":"UInt16","visibility":"Public","body":"@format_num"},"external_var":false},{"html_id":"format_num=(format_num:UInt16)-instance-method","name":"format_num=","abstract":false,"args":[{"name":"format_num","external_name":"format_num","restriction":"UInt16"}],"args_string":"(format_num : UInt16)","args_html":"(format_num : UInt16)","location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":8,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L8"},"def":{"name":"format_num=","args":[{"name":"format_num","external_name":"format_num","restriction":"UInt16"}],"visibility":"Public","body":"@format_num = format_num"},"external_var":false},{"html_id":"samples:Array(UInt8)-instance-method","name":"samples","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":10,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L10"},"def":{"name":"samples","return_type":"Array(UInt8)","visibility":"Public","body":"@samples"},"external_var":false},{"html_id":"samples=(samples:Array(UInt8))-instance-method","name":"samples=","abstract":false,"args":[{"name":"samples","external_name":"samples","restriction":"Array(UInt8)"}],"args_string":"(samples : Array(UInt8))","args_html":"(samples : Array(UInt8))","location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":10,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L10"},"def":{"name":"samples=","args":[{"name":"samples","external_name":"samples","restriction":"Array(UInt8)"}],"visibility":"Public","body":"@samples = samples"},"external_var":false},{"html_id":"samples_num:UInt16-instance-method","name":"samples_num","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":9,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L9"},"def":{"name":"samples_num","return_type":"UInt16","visibility":"Public","body":"@samples_num"},"external_var":false},{"html_id":"samples_num=(samples_num:UInt16)-instance-method","name":"samples_num=","abstract":false,"args":[{"name":"samples_num","external_name":"samples_num","restriction":"UInt16"}],"args_string":"(samples_num : UInt16)","args_html":"(samples_num : UInt16)","location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":9,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L9"},"def":{"name":"samples_num=","args":[{"name":"samples_num","external_name":"samples_num","restriction":"UInt16"}],"visibility":"Public","body":"@samples_num = samples_num"},"external_var":false}]},{"html_id":"wa-cr/WAD/Playpal","path":"WAD/Playpal.html","kind":"class","full_name":"WAD::Playpal","name":"Playpal","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/WritingAdditions/Playpal","kind":"module","full_name":"WritingAdditions::Playpal","name":"Playpal"},{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":3,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L3"},{"filename":"src/write.cr","line_number":346,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L346"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"wa-cr/WritingAdditions/Playpal","kind":"module","full_name":"WritingAdditions::Playpal","name":"Playpal"}],"namespace":{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"},"doc":"Color palettes for various situations.","summary":"<p>Color palettes for various situations.</p>","class_methods":[{"html_id":"is_playpal?(name:String)-class-method","name":"is_playpal?","doc":"Checks to see if *name* is \"PLAYPAL\"\n\nReturns true if the name is a playpal:\n```\nplaypal_name = \"PLAYPAL\"\nif WAD::Playpal.is_playpal?(playpal_name)\n  puts \"Is a Playpal\"\nelse\n  puts \"Is not a Playpal\"\nend\n```","summary":"<p>Checks to see if <em>name</em> is &quot;PLAYPAL&quot;</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":79,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L79"},"def":{"name":"is_playpal?","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"!(!(name =~ (/^PLAYPAL/)))"},"external_var":false}],"constructors":[{"html_id":"parse(filename:String|Path):Playpal-class-method","name":"parse","doc":"Parses a playpal file given the filename\n\nOpens a playpal file and parses it:\n```\nmy_playpal = WAD::Playpal.parse(\"Path/To/Playpal\")\n```","summary":"<p>Parses a playpal file given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Playpal","args_html":"(filename : String | Path) : <a href=\"../WAD/Playpal.html\">Playpal</a>","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":33,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L33"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Playpal","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file)\nend\n\nraise(\"Playpal invalid\")\n"},"external_var":false},{"html_id":"parse(io:IO):Playpal-class-method","name":"parse","doc":"Parses a playpal file given the io\n\nOpens a playpal io and parses it:\n```\nFile.open(\"Path/To/Playpal\") do |file|\n  my_playpal = WAD::Playpal.parse(file)\nend\n```","summary":"<p>Parses a playpal file given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Playpal","args_html":"(io : IO) : <a href=\"../WAD/Playpal.html\">Playpal</a>","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":49,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L49"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Playpal","visibility":"Public","body":"playpal = Playpal.new\ncolors_per_palette = 256\namount_of_palettes = 14\n\namount_of_palettes.times do\n  palette = Palette.new\n  (colors_per_palette).to_i.times do\n    color = Color.new\n    color.r = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n    color.g = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n    color.b = io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\n    palette.colors << color\n  end\n  playpal.palettes << palette\nend\nplaypal\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":5,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L5"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"palettes:Array(Palette)-instance-method","name":"palettes","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":7,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L7"},"def":{"name":"palettes","return_type":"Array(Palette)","visibility":"Public","body":"@palettes"},"external_var":false},{"html_id":"palettes=(palettes:Array(Palette))-instance-method","name":"palettes=","abstract":false,"args":[{"name":"palettes","external_name":"palettes","restriction":"Array(Palette)"}],"args_string":"(palettes : Array(Palette))","args_html":"(palettes : Array(<a href=\"../WAD/Playpal/Palette.html\">Palette</a>))","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":7,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L7"},"def":{"name":"palettes=","args":[{"name":"palettes","external_name":"palettes","restriction":"Array(Palette)"}],"visibility":"Public","body":"@palettes = palettes"},"external_var":false}],"types":[{"html_id":"wa-cr/WAD/Playpal/Color","path":"WAD/Playpal/Color.html","kind":"struct","full_name":"WAD::Playpal::Color","name":"Color","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":18,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L18"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/Playpal","kind":"class","full_name":"WAD::Playpal","name":"Playpal"},"doc":"A color","summary":"<p>A color</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":18,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L18"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"b:UInt8-instance-method","name":"b","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":24,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L24"},"def":{"name":"b","return_type":"UInt8","visibility":"Public","body":"@b"},"external_var":false},{"html_id":"b=(b:UInt8)-instance-method","name":"b=","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"UInt8"}],"args_string":"(b : UInt8)","args_html":"(b : UInt8)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":24,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L24"},"def":{"name":"b=","args":[{"name":"b","external_name":"b","restriction":"UInt8"}],"visibility":"Public","body":"@b = b"},"external_var":false},{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":20,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L20"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"g:UInt8-instance-method","name":"g","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":23,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L23"},"def":{"name":"g","return_type":"UInt8","visibility":"Public","body":"@g"},"external_var":false},{"html_id":"g=(g:UInt8)-instance-method","name":"g=","abstract":false,"args":[{"name":"g","external_name":"g","restriction":"UInt8"}],"args_string":"(g : UInt8)","args_html":"(g : UInt8)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":23,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L23"},"def":{"name":"g=","args":[{"name":"g","external_name":"g","restriction":"UInt8"}],"visibility":"Public","body":"@g = g"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":18,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L18"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false},{"html_id":"r:UInt8-instance-method","name":"r","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":22,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L22"},"def":{"name":"r","return_type":"UInt8","visibility":"Public","body":"@r"},"external_var":false},{"html_id":"r=(r:UInt8)-instance-method","name":"r=","abstract":false,"args":[{"name":"r","external_name":"r","restriction":"UInt8"}],"args_string":"(r : UInt8)","args_html":"(r : UInt8)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":22,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L22"},"def":{"name":"r=","args":[{"name":"r","external_name":"r","restriction":"UInt8"}],"visibility":"Public","body":"@r = r"},"external_var":false}]},{"html_id":"wa-cr/WAD/Playpal/Palette","path":"WAD/Playpal/Palette.html","kind":"class","full_name":"WAD::Playpal::Palette","name":"Palette","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":10,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L10"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/Playpal","kind":"class","full_name":"WAD::Playpal","name":"Playpal"},"doc":"A color palette","summary":"<p>A color palette</p>","instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":12,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L12"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"colors:Array(Color)-instance-method","name":"colors","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":14,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L14"},"def":{"name":"colors","return_type":"Array(Color)","visibility":"Public","body":"@colors"},"external_var":false},{"html_id":"colors=(colors:Array(Color))-instance-method","name":"colors=","abstract":false,"args":[{"name":"colors","external_name":"colors","restriction":"Array(Color)"}],"args_string":"(colors : Array(Color))","args_html":"(colors : Array(<a href=\"../../WAD/Playpal/Color.html\">Color</a>))","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":14,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L14"},"def":{"name":"colors=","args":[{"name":"colors","external_name":"colors","restriction":"Array(Color)"}],"visibility":"Public","body":"@colors = colors"},"external_var":false}]}]},{"html_id":"wa-cr/WAD/Pnames","path":"WAD/Pnames.html","kind":"class","full_name":"WAD::Pnames","name":"Pnames","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/WritingAdditions/Pnames","kind":"module","full_name":"WritingAdditions::Pnames","name":"Pnames"},{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":335,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L335"},{"filename":"src/write.cr","line_number":362,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L362"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"wa-cr/WritingAdditions/Pnames","kind":"module","full_name":"WritingAdditions::Pnames","name":"Pnames"}],"namespace":{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"},"doc":"Includes all the names for wall patches.","summary":"<p>Includes all the names for wall patches.</p>","class_methods":[{"html_id":"is_pnames?(name:String)-class-method","name":"is_pnames?","doc":"Checks to see if *name* is \"PNAMES\"\n\nExample: Returns true if the name is a pnames\n```\npnames_name = \"PNAMES\"\nif WAD::Pnames.is_pnames?(pnames_name)\n  puts \"Is a Pnames\"\nelse\n  puts \"Is not a Pnames\"\nend\n```","summary":"<p>Checks to see if <em>name</em> is &quot;PNAMES&quot;</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":386,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L386"},"def":{"name":"is_pnames?","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"!(!(name =~ (/^PNAMES/)))"},"external_var":false}],"constructors":[{"html_id":"parse(filename:String|Path):Pnames-class-method","name":"parse","doc":"Parses a pnames file given the filename\n\nExample: Opens a pnames file and parses it\n```\nmy_pnames = WAD::Pnames.parse(\"Path/To/Pnames\")\n```","summary":"<p>Parses a pnames file given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Pnames","args_html":"(filename : String | Path) : <a href=\"../WAD/Pnames.html\">Pnames</a>","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":348,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L348"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Pnames","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file)\nend\n\nraise(\"Pnames invalid\")\n"},"external_var":false},{"html_id":"parse(io:IO):Pnames-class-method","name":"parse","doc":"Parses a pnames file given the io\n\nExample: Opens a pnames io and parses it\n```\nFile.open(\"Path/To/Pnames\") do |file|\n  my_pnames = WAD::Pnames.parse(file)\nend\n```","summary":"<p>Parses a pnames file given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Pnames","args_html":"(io : IO) : <a href=\"../WAD/Pnames.html\">Pnames</a>","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":364,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L364"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Pnames","visibility":"Public","body":"pnames = Pnames.new\n\npnames.num_patches = io.read_bytes(Int32, IO::ByteFormat::LittleEndian)\n\npnames.num_patches.times do\n  pnames.patches << ((io.gets(8)).to_s.gsub(\"\\u0000\", \"\"))\nend\npnames\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":337,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L337"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"num_patches:Int32-instance-method","name":"num_patches","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":339,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L339"},"def":{"name":"num_patches","return_type":"Int32","visibility":"Public","body":"@num_patches"},"external_var":false},{"html_id":"num_patches=(num_patches:Int32)-instance-method","name":"num_patches=","abstract":false,"args":[{"name":"num_patches","external_name":"num_patches","restriction":"Int32"}],"args_string":"(num_patches : Int32)","args_html":"(num_patches : Int32)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":339,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L339"},"def":{"name":"num_patches=","args":[{"name":"num_patches","external_name":"num_patches","restriction":"Int32"}],"visibility":"Public","body":"@num_patches = num_patches"},"external_var":false},{"html_id":"patches:Array(String)-instance-method","name":"patches","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":340,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L340"},"def":{"name":"patches","return_type":"Array(String)","visibility":"Public","body":"@patches"},"external_var":false},{"html_id":"patches=(patches:Array(String))-instance-method","name":"patches=","abstract":false,"args":[{"name":"patches","external_name":"patches","restriction":"Array(String)"}],"args_string":"(patches : Array(String))","args_html":"(patches : Array(String))","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":340,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L340"},"def":{"name":"patches=","args":[{"name":"patches","external_name":"patches","restriction":"Array(String)"}],"visibility":"Public","body":"@patches = patches"},"external_var":false}]},{"html_id":"wa-cr/WAD/Sound","path":"WAD/Sound.html","kind":"class","full_name":"WAD::Sound","name":"Sound","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/WritingAdditions/Sound","kind":"module","full_name":"WritingAdditions::Sound","name":"Sound"},{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":64,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L64"},{"filename":"src/write.cr","line_number":342,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L342"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"PAD_BYTES","name":"PAD_BYTES","value":"16"}],"included_modules":[{"html_id":"wa-cr/WritingAdditions/Sound","kind":"module","full_name":"WritingAdditions::Sound","name":"Sound"}],"namespace":{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"},"doc":"A normal sound effect.","summary":"<p>A normal sound effect.</p>","class_methods":[{"html_id":"is_sound?(name:String)-class-method","name":"is_sound?","doc":"Checks to see if *name* is a sound with name format 'DSx..x'.\n\nReturns true if the name is a sound:\n```\nsound_name = \"DSNOWAY\"\nif WAD::Sound.is_sound?(sound_name)\n  puts \"Is a Sound\"\nelse\n  puts \"Is not a Sound\"\nend\n```","summary":"<p>Checks to see if <em>name</em> is a sound with name format 'DSx..x'.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":131,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L131"},"def":{"name":"is_sound?","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"!(!(name =~ (/^DS/)))"},"external_var":false}],"constructors":[{"html_id":"from_wav(filename:String|Path):Sound-class-method","name":"from_wav","doc":"Converts a .wav file to a `WAD::Sound` given a *filename*\n\n```\nmy_wav_sound = WAD::Sound.from_wav(\"Path/To/Sound.wav\")\n```","summary":"<p>Converts a .wav file to a <code><a href=\"../WAD/Sound.html\">WAD::Sound</a></code> given a <em>filename</em></p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Sound","args_html":"(filename : String | Path) : <a href=\"../WAD/Sound.html\">Sound</a>","location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":208,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L208"},"def":{"name":"from_wav","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Sound","visibility":"Public","body":"filename = filename.to_s\nif filename[filename.rindex!('.'), filename.size - 1] != \".wav\"\n  filename = filename + \".wav\"\nend\nFile.open(filename) do |io|\n  return self.from_wav(io)\nend\n"},"external_var":false},{"html_id":"from_wav(io:IO):Sound-class-method","name":"from_wav","doc":"Converts a .wav file to a `WAD::Sound` given a *io*\n\n```\nFile.open(\"Path/To/Sound.wav\") do |io|\n  my_wav_sound = WAD::Sound.from_wav(io)\nend\n```","summary":"<p>Converts a .wav file to a <code><a href=\"../WAD/Sound.html\">WAD::Sound</a></code> given a <em>io</em></p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Sound","args_html":"(io : IO) : <a href=\"../WAD/Sound.html\">Sound</a>","location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":223,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L223"},"def":{"name":"from_wav","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Sound","visibility":"Public","body":"sound = Sound.new\nsound.format_num = 3_u16\n\nbegin\n  io.gets(4)\n\n  io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\n\n  io.gets(8)\n\n  io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\n\n  io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\n\n  io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\n\n  sound.sample_rate = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\n\n  io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\n\n  io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\n\n  if (io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)) != 8_u16\n    raise(\".wav is not 8bit\")\n  end\n\n  io.gets(4)\n\n  sound.samples_num = io.read_bytes(UInt32, IO::ByteFormat::LittleEndian)\n\n\n  sound.samples_num.times do\n    sound.samples << (io.read_bytes(UInt8, IO::ByteFormat::LittleEndian))\n  end\n\n  return sound\nrescue e : IO::EOFError\n  raise(\"Not a valid .wav\")\nend\n"},"external_var":false},{"html_id":"parse(filename:String|Path):Sound-class-method","name":"parse","doc":"Parses a sound lump.\n\nOpens a sound file and parses it:\n```\nmy_sound = WAD::Sound.parse(\"Path/To/Sound\")\n```","summary":"<p>Parses a sound lump.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : Sound","args_html":"(filename : String | Path) : <a href=\"../WAD/Sound.html\">Sound</a>","location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":84,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L84"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"Sound","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file)\nend\n\nraise(\"Sound invalid\")\n"},"external_var":false},{"html_id":"parse(io:IO):Sound-class-method","name":"parse","doc":"Parses a sound lump.\n\nOpens a sound io and parses it:\n```\nFile.open(\"Path/To/Sound\") do |file|\n  my_sound = WAD::Sound.parse(file)\nend\n```","summary":"<p>Parses a sound lump.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Sound","args_html":"(io : IO) : <a href=\"../WAD/Sound.html\">Sound</a>","location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":100,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L100"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Sound","visibility":"Public","body":"sound = Sound.new\nsound.format_num = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\nsound.sample_rate = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\nsound.samples_num = io.read_bytes(UInt16, IO::ByteFormat::LittleEndian)\n\n\n(PAD_BYTES + 2).times do\n  io.read_bytes(UInt8, IO::ByteFormat::LittleEndian)\nend\n\nsample_index = 0\nwhile sample_index < (sound.samples_num - (PAD_BYTES * 2))\n  sound.samples << (io.read_bytes(UInt8, IO::ByteFormat::LittleEndian))\n  sample_index = sample_index + 1\nend\n\nsound\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":66,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L66"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"format_num:UInt16-instance-method","name":"format_num","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":69,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L69"},"def":{"name":"format_num","return_type":"UInt16","visibility":"Public","body":"@format_num"},"external_var":false},{"html_id":"format_num=(format_num:UInt16)-instance-method","name":"format_num=","abstract":false,"args":[{"name":"format_num","external_name":"format_num","restriction":"UInt16"}],"args_string":"(format_num : UInt16)","args_html":"(format_num : UInt16)","location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":69,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L69"},"def":{"name":"format_num=","args":[{"name":"format_num","external_name":"format_num","restriction":"UInt16"}],"visibility":"Public","body":"@format_num = format_num"},"external_var":false},{"html_id":"sample_rate:UInt16|UInt32-instance-method","name":"sample_rate","doc":"UInt16 | UInt32 because when reading from a .wav,\nsample_rate is given in a UInt32","summary":"<p>UInt16 | UInt32 because when reading from a .wav, sample_rate is given in a UInt32</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":72,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L72"},"def":{"name":"sample_rate","return_type":"UInt16 | UInt32","visibility":"Public","body":"@sample_rate"},"external_var":false},{"html_id":"sample_rate=(sample_rate:UInt16|UInt32)-instance-method","name":"sample_rate=","doc":"UInt16 | UInt32 because when reading from a .wav,\nsample_rate is given in a UInt32","summary":"<p>UInt16 | UInt32 because when reading from a .wav, sample_rate is given in a UInt32</p>","abstract":false,"args":[{"name":"sample_rate","external_name":"sample_rate","restriction":"UInt16 | UInt32"}],"args_string":"(sample_rate : UInt16 | UInt32)","args_html":"(sample_rate : UInt16 | UInt32)","location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":72,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L72"},"def":{"name":"sample_rate=","args":[{"name":"sample_rate","external_name":"sample_rate","restriction":"UInt16 | UInt32"}],"visibility":"Public","body":"@sample_rate = sample_rate"},"external_var":false},{"html_id":"samples:Array(UInt8)-instance-method","name":"samples","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":76,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L76"},"def":{"name":"samples","return_type":"Array(UInt8)","visibility":"Public","body":"@samples"},"external_var":false},{"html_id":"samples=(samples:Array(UInt8))-instance-method","name":"samples=","abstract":false,"args":[{"name":"samples","external_name":"samples","restriction":"Array(UInt8)"}],"args_string":"(samples : Array(UInt8))","args_html":"(samples : Array(UInt8))","location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":76,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L76"},"def":{"name":"samples=","args":[{"name":"samples","external_name":"samples","restriction":"Array(UInt8)"}],"visibility":"Public","body":"@samples = samples"},"external_var":false},{"html_id":"samples_num:UInt16|UInt32-instance-method","name":"samples_num","doc":"UInt16 | UInt32 because when reading from a .wav,\nsample_num is given in a UInt32","summary":"<p>UInt16 | UInt32 because when reading from a .wav, sample_num is given in a UInt32</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":75,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L75"},"def":{"name":"samples_num","return_type":"UInt16 | UInt32","visibility":"Public","body":"@samples_num"},"external_var":false},{"html_id":"samples_num=(samples_num:UInt16|UInt32)-instance-method","name":"samples_num=","doc":"UInt16 | UInt32 because when reading from a .wav,\nsample_num is given in a UInt32","summary":"<p>UInt16 | UInt32 because when reading from a .wav, sample_num is given in a UInt32</p>","abstract":false,"args":[{"name":"samples_num","external_name":"samples_num","restriction":"UInt16 | UInt32"}],"args_string":"(samples_num : UInt16 | UInt32)","args_html":"(samples_num : UInt16 | UInt32)","location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":75,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L75"},"def":{"name":"samples_num=","args":[{"name":"samples_num","external_name":"samples_num","restriction":"UInt16 | UInt32"}],"visibility":"Public","body":"@samples_num = samples_num"},"external_var":false},{"html_id":"to_wav(filename:String|Path):UInt32-instance-method","name":"to_wav","doc":"Writes to wav file given an output *file* and returns the written file's size.\n\nWrites a 'wav' file from the *my_wad* sound \"DSPISTOL\":\n```\nmy_wad.sounds[\"DSPISTOL\"].to_wav(\"Path/To/MyWav.wav\")\n```","summary":"<p>Writes to wav file given an output <em>file</em> and returns the written file's size.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : UInt32","args_html":"(filename : String | Path) : UInt32","location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":141,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L141"},"def":{"name":"to_wav","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"UInt32","visibility":"Public","body":"filename = filename.to_s\nif filename[filename.rindex!('.'), filename.size - 1] != \".wav\"\n  filename = filename + \".wav\"\nend\nFile.open(filename, \"w+\") do |io|\n  to_wav(io)\nend\n"},"external_var":false},{"html_id":"to_wav(io:IO):UInt32-instance-method","name":"to_wav","doc":"Writes to wav file given an output *io* and returns the written file's size.\n\nWrites a 'wav' file from the *my_wad* sound \"DSPISTOL\":\n```\nFile.open(\"Path/To/MyWav.wav\", \"w+\") do |io|\n  my_wad.sounds[\"DSPISTOL\"].to_wav(io)\nend\n```","summary":"<p>Writes to wav file given an output <em>io</em> and returns the written file's size.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : UInt32","args_html":"(io : IO) : UInt32","location":{"filename":"src/wa-cr/wad/wad-data/sound.cr","line_number":157,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/sound.cr#L157"},"def":{"name":"to_wav","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"UInt32","visibility":"Public","body":"file_size = 0_u32\n\nio << \"RIFF\"\nfile_size = file_size + 4_u32\n\nio.write_bytes(((4 + 24) + 8) + samples.size.to_u32, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 4_u32\nio << \"WAVEfmt \"\nfile_size = file_size + 8_u32\n\nio.write_bytes(16_u32, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 4_u32\n\nio.write_bytes(1_u16, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 2_u32\n\nio.write_bytes(1_u16, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 2_u32\n\nio.write_bytes(sample_rate.to_u32, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 4_u32\n\nio.write_bytes(sample_rate.to_u32, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 4_u32\n\nio.write_bytes(1_u16, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 2_u32\n\nio.write_bytes(8_u16, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 2_u32\nio << \"data\"\nfile_size = file_size + 4_u32\n\nio.write_bytes(samples.size.to_u32, IO::ByteFormat::LittleEndian)\nfile_size = file_size + 4_u32\n\n\nsamples.each do |sample|\n  io.write_bytes(sample, IO::ByteFormat::LittleEndian)\n  file_size = file_size + 1_u32\nend\n\nreturn file_size\n"},"external_var":false}]},{"html_id":"wa-cr/WAD/TextureX","path":"WAD/TextureX.html","kind":"class","full_name":"WAD::TextureX","name":"TextureX","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/WritingAdditions/TextureX","kind":"module","full_name":"WritingAdditions::TextureX","name":"TextureX"},{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":225,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L225"},{"filename":"src/write.cr","line_number":358,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L358"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"wa-cr/WritingAdditions/TextureX","kind":"module","full_name":"WritingAdditions::TextureX","name":"TextureX"}],"namespace":{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"},"doc":"Defines how wall patches from the WAD file should combine to form wall textures.","summary":"<p>Defines how wall patches from the WAD file should combine to form wall textures.</p>","class_methods":[{"html_id":"is_texturex?(name:String)-class-method","name":"is_texturex?","doc":"Checks to see if *name* is \"TEXTUREx\"\n\nReturns true if the name is a texture map:\n```\ntexturemap_name = \"TEXTURE1\"\nif WAD::TextureX.is_texturex?(texturemap_name)\n  puts \"Is a Texture Map\"\nelse\n  puts \"Is not a Texture Map\"\nend\n```","summary":"<p>Checks to see if <em>name</em> is &quot;TEXTUREx&quot;</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":329,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L329"},"def":{"name":"is_texturex?","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"!(!(name =~ (/^TEXTURE\\d/)))"},"external_var":false}],"constructors":[{"html_id":"parse(filename:String|Path):TextureX-class-method","name":"parse","doc":"Parses a texture map file given the filename\n\nOpens a texture map file and parses it:\n```\nmy_texturemap = WAD::TextureX.parse(\"Path/To/TextureMap\")\n```","summary":"<p>Parses a texture map file given the filename</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"args_string":"(filename : String | Path) : TextureX","args_html":"(filename : String | Path) : <a href=\"../WAD/TextureX.html\">TextureX</a>","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":268,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L268"},"def":{"name":"parse","args":[{"name":"filename","external_name":"filename","restriction":"String | Path"}],"return_type":"TextureX","visibility":"Public","body":"File.open(filename) do |file|\n  return self.parse(file)\nend\n\nraise(\"Texture map invalid\")\n"},"external_var":false},{"html_id":"parse(io:IO):TextureX-class-method","name":"parse","doc":"Parses a texture map file given the io\n\nOpens a texture map io and parses it:\n```\nFile.open(\"Path/To/TextureMap\") do |file|\n  my_texturemap = WAD::TextureX.parse(file)\nend\n```","summary":"<p>Parses a texture map file given the io</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : TextureX","args_html":"(io : IO) : <a href=\"../WAD/TextureX.html\">TextureX</a>","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":284,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L284"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"TextureX","visibility":"Public","body":"texturex = TextureX.new\ntexturex.numtextures = io.read_bytes(Int32, IO::ByteFormat::LittleEndian)\n\n\ntexturex.numtextures.times do\n  texturex.offsets << (io.read_bytes(Int32, IO::ByteFormat::LittleEndian))\nend\n\ntexturex.offsets.each do\n  texturemap = TextureMap.new\n  texturemap.name = (io.gets(8)).to_s.gsub(\"\\u0000\", \"\")\n  texturemap.masked = (io.read_bytes(Int32, IO::ByteFormat::LittleEndian)) != 0\n  texturemap.width = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  texturemap.height = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n  texturemap.columndirectory = io.read_bytes(Int32, IO::ByteFormat::LittleEndian)\n  texturemap.patchcount = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n\n  texturemap.patchcount.times do\n    patch = Patch.new\n\n    patch.originx = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n    patch.originy = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n    patch.patch = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n    patch.stepdir = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n    patch.colormap = io.read_bytes(Int16, IO::ByteFormat::LittleEndian)\n\n    texturemap.patches << patch\n  end\n  texturex.mtextures << texturemap\nend\ntexturex\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":227,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L227"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"mtextures:Array(TextureMap)-instance-method","name":"mtextures","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":231,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L231"},"def":{"name":"mtextures","return_type":"Array(TextureMap)","visibility":"Public","body":"@mtextures"},"external_var":false},{"html_id":"mtextures=(mtextures:Array(TextureMap))-instance-method","name":"mtextures=","abstract":false,"args":[{"name":"mtextures","external_name":"mtextures","restriction":"Array(TextureMap)"}],"args_string":"(mtextures : Array(TextureMap))","args_html":"(mtextures : Array(<a href=\"../WAD/TextureX/TextureMap.html\">TextureMap</a>))","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":231,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L231"},"def":{"name":"mtextures=","args":[{"name":"mtextures","external_name":"mtextures","restriction":"Array(TextureMap)"}],"visibility":"Public","body":"@mtextures = mtextures"},"external_var":false},{"html_id":"numtextures:Int32-instance-method","name":"numtextures","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":229,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L229"},"def":{"name":"numtextures","return_type":"Int32","visibility":"Public","body":"@numtextures"},"external_var":false},{"html_id":"numtextures=(numtextures:Int32)-instance-method","name":"numtextures=","abstract":false,"args":[{"name":"numtextures","external_name":"numtextures","restriction":"Int32"}],"args_string":"(numtextures : Int32)","args_html":"(numtextures : Int32)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":229,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L229"},"def":{"name":"numtextures=","args":[{"name":"numtextures","external_name":"numtextures","restriction":"Int32"}],"visibility":"Public","body":"@numtextures = numtextures"},"external_var":false},{"html_id":"offsets:Array(Int32)-instance-method","name":"offsets","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":230,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L230"},"def":{"name":"offsets","return_type":"Array(Int32)","visibility":"Public","body":"@offsets"},"external_var":false},{"html_id":"offsets=(offsets:Array(Int32))-instance-method","name":"offsets=","abstract":false,"args":[{"name":"offsets","external_name":"offsets","restriction":"Array(Int32)"}],"args_string":"(offsets : Array(Int32))","args_html":"(offsets : Array(Int32))","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":230,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L230"},"def":{"name":"offsets=","args":[{"name":"offsets","external_name":"offsets","restriction":"Array(Int32)"}],"visibility":"Public","body":"@offsets = offsets"},"external_var":false}],"types":[{"html_id":"wa-cr/WAD/TextureX/Patch","path":"WAD/TextureX/Patch.html","kind":"struct","full_name":"WAD::TextureX::Patch","name":"Patch","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":249,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L249"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/TextureX","kind":"class","full_name":"WAD::TextureX","name":"TextureX"},"doc":"\"The binary contents of the mappatch_t structure contains 10 bytes defining how the patch should be drawn inside the texture.\"","summary":"<p>&quot;The binary contents of the mappatch_t structure contains 10 bytes defining how the patch should be drawn inside the texture.&quot;</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":249,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L249"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":251,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L251"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"colormap:Int16-instance-method","name":"colormap","doc":"UNUSED","summary":"<p>UNUSED</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":259,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L259"},"def":{"name":"colormap","return_type":"Int16","visibility":"Public","body":"@colormap"},"external_var":false},{"html_id":"colormap=(colormap:Int16)-instance-method","name":"colormap=","doc":"UNUSED","summary":"<p>UNUSED</p>","abstract":false,"args":[{"name":"colormap","external_name":"colormap","restriction":"Int16"}],"args_string":"(colormap : Int16)","args_html":"(colormap : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":259,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L259"},"def":{"name":"colormap=","args":[{"name":"colormap","external_name":"colormap","restriction":"Int16"}],"visibility":"Public","body":"@colormap = colormap"},"external_var":false},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":249,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L249"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false},{"html_id":"originx:Int16-instance-method","name":"originx","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":253,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L253"},"def":{"name":"originx","return_type":"Int16","visibility":"Public","body":"@originx"},"external_var":false},{"html_id":"originx=(originx:Int16)-instance-method","name":"originx=","abstract":false,"args":[{"name":"originx","external_name":"originx","restriction":"Int16"}],"args_string":"(originx : Int16)","args_html":"(originx : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":253,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L253"},"def":{"name":"originx=","args":[{"name":"originx","external_name":"originx","restriction":"Int16"}],"visibility":"Public","body":"@originx = originx"},"external_var":false},{"html_id":"originy:Int16-instance-method","name":"originy","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":254,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L254"},"def":{"name":"originy","return_type":"Int16","visibility":"Public","body":"@originy"},"external_var":false},{"html_id":"originy=(originy:Int16)-instance-method","name":"originy=","abstract":false,"args":[{"name":"originy","external_name":"originy","restriction":"Int16"}],"args_string":"(originy : Int16)","args_html":"(originy : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":254,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L254"},"def":{"name":"originy=","args":[{"name":"originy","external_name":"originy","restriction":"Int16"}],"visibility":"Public","body":"@originy = originy"},"external_var":false},{"html_id":"patch:Int16-instance-method","name":"patch","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":255,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L255"},"def":{"name":"patch","return_type":"Int16","visibility":"Public","body":"@patch"},"external_var":false},{"html_id":"patch=(patch:Int16)-instance-method","name":"patch=","abstract":false,"args":[{"name":"patch","external_name":"patch","restriction":"Int16"}],"args_string":"(patch : Int16)","args_html":"(patch : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":255,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L255"},"def":{"name":"patch=","args":[{"name":"patch","external_name":"patch","restriction":"Int16"}],"visibility":"Public","body":"@patch = patch"},"external_var":false},{"html_id":"stepdir:Int16-instance-method","name":"stepdir","doc":"UNUSED","summary":"<p>UNUSED</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":257,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L257"},"def":{"name":"stepdir","return_type":"Int16","visibility":"Public","body":"@stepdir"},"external_var":false},{"html_id":"stepdir=(stepdir:Int16)-instance-method","name":"stepdir=","doc":"UNUSED","summary":"<p>UNUSED</p>","abstract":false,"args":[{"name":"stepdir","external_name":"stepdir","restriction":"Int16"}],"args_string":"(stepdir : Int16)","args_html":"(stepdir : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":257,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L257"},"def":{"name":"stepdir=","args":[{"name":"stepdir","external_name":"stepdir","restriction":"Int16"}],"visibility":"Public","body":"@stepdir = stepdir"},"external_var":false}]},{"html_id":"wa-cr/WAD/TextureX/TextureMap","path":"WAD/TextureX/TextureMap.html","kind":"class","full_name":"WAD::TextureX::TextureMap","name":"TextureMap","abstract":false,"superclass":{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"wa-cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":234,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L234"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WAD/TextureX","kind":"class","full_name":"WAD::TextureX","name":"TextureX"},"doc":"\"The binary contents of the maptexture_t structure starts with a header of 22 bytes, followed by all the map patches.\"","summary":"<p>&quot;The binary contents of the maptexture_t structure starts with a header of 22 bytes, followed by all the map patches.&quot;</p>","instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":236,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L236"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < ::Reference && !@type.instance_vars.map(&.type).all? do |t| ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive end %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        ::GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"},"external_var":false},{"html_id":"columndirectory:Int32-instance-method","name":"columndirectory","doc":"UNUSED","summary":"<p>UNUSED</p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":243,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L243"},"def":{"name":"columndirectory","return_type":"Int32","visibility":"Public","body":"@columndirectory"},"external_var":false},{"html_id":"columndirectory=(columndirectory:Int32)-instance-method","name":"columndirectory=","doc":"UNUSED","summary":"<p>UNUSED</p>","abstract":false,"args":[{"name":"columndirectory","external_name":"columndirectory","restriction":"Int32"}],"args_string":"(columndirectory : Int32)","args_html":"(columndirectory : Int32)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":243,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L243"},"def":{"name":"columndirectory=","args":[{"name":"columndirectory","external_name":"columndirectory","restriction":"Int32"}],"visibility":"Public","body":"@columndirectory = columndirectory"},"external_var":false},{"html_id":"height:Int16-instance-method","name":"height","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":241,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L241"},"def":{"name":"height","return_type":"Int16","visibility":"Public","body":"@height"},"external_var":false},{"html_id":"height=(height:Int16)-instance-method","name":"height=","abstract":false,"args":[{"name":"height","external_name":"height","restriction":"Int16"}],"args_string":"(height : Int16)","args_html":"(height : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":241,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L241"},"def":{"name":"height=","args":[{"name":"height","external_name":"height","restriction":"Int16"}],"visibility":"Public","body":"@height = height"},"external_var":false},{"html_id":"masked:Bool-instance-method","name":"masked","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":239,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L239"},"def":{"name":"masked","return_type":"Bool","visibility":"Public","body":"@masked"},"external_var":false},{"html_id":"masked=(masked:Bool)-instance-method","name":"masked=","abstract":false,"args":[{"name":"masked","external_name":"masked","restriction":"Bool"}],"args_string":"(masked : Bool)","args_html":"(masked : Bool)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":239,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L239"},"def":{"name":"masked=","args":[{"name":"masked","external_name":"masked","restriction":"Bool"}],"visibility":"Public","body":"@masked = masked"},"external_var":false},{"html_id":"name:String-instance-method","name":"name","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":238,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L238"},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"},"external_var":false},{"html_id":"name=(name:String)-instance-method","name":"name=","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":238,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L238"},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"},"external_var":false},{"html_id":"patchcount:Int16-instance-method","name":"patchcount","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":244,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L244"},"def":{"name":"patchcount","return_type":"Int16","visibility":"Public","body":"@patchcount"},"external_var":false},{"html_id":"patchcount=(patchcount:Int16)-instance-method","name":"patchcount=","abstract":false,"args":[{"name":"patchcount","external_name":"patchcount","restriction":"Int16"}],"args_string":"(patchcount : Int16)","args_html":"(patchcount : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":244,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L244"},"def":{"name":"patchcount=","args":[{"name":"patchcount","external_name":"patchcount","restriction":"Int16"}],"visibility":"Public","body":"@patchcount = patchcount"},"external_var":false},{"html_id":"patches:Array(Patch)-instance-method","name":"patches","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":245,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L245"},"def":{"name":"patches","return_type":"Array(Patch)","visibility":"Public","body":"@patches"},"external_var":false},{"html_id":"patches=(patches:Array(Patch))-instance-method","name":"patches=","abstract":false,"args":[{"name":"patches","external_name":"patches","restriction":"Array(Patch)"}],"args_string":"(patches : Array(Patch))","args_html":"(patches : Array(<a href=\"../../WAD/TextureX/Patch.html\">Patch</a>))","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":245,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L245"},"def":{"name":"patches=","args":[{"name":"patches","external_name":"patches","restriction":"Array(Patch)"}],"visibility":"Public","body":"@patches = patches"},"external_var":false},{"html_id":"width:Int16-instance-method","name":"width","abstract":false,"location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":240,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L240"},"def":{"name":"width","return_type":"Int16","visibility":"Public","body":"@width"},"external_var":false},{"html_id":"width=(width:Int16)-instance-method","name":"width=","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int16"}],"args_string":"(width : Int16)","args_html":"(width : Int16)","location":{"filename":"src/wa-cr/wad/wad-data/texture.cr","line_number":240,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad-data/texture.cr#L240"},"def":{"name":"width=","args":[{"name":"width","external_name":"width","restriction":"Int16"}],"visibility":"Public","body":"@width = width"},"external_var":false}]}]},{"html_id":"wa-cr/WAD/Type","path":"WAD/Type.html","kind":"enum","full_name":"WAD::Type","name":"Type","abstract":false,"ancestors":[{"html_id":"wa-cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"wa-cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wa-cr/wad/wad.cr","line_number":218,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L218"}],"repository_name":"wa-cr","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Broken","name":"Broken","value":"0"},{"id":"Internal","name":"Internal","value":"1"},{"id":"Patch","name":"Patch","value":"2"}],"namespace":{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"},"doc":"Type of WAD: Broken if not Internal, IWAD, or Patch, PWAD.","summary":"<p>Type of WAD: Broken if not Internal, IWAD, or Patch, PWAD.</p>","instance_methods":[{"html_id":"broken?-instance-method","name":"broken?","doc":"Returns `true` if this enum value equals `Broken`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../WAD/Type.html#Broken\">Broken</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":219,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L219"},"def":{"name":"broken?","visibility":"Public","body":"self == Broken"},"external_var":false},{"html_id":"internal?-instance-method","name":"internal?","doc":"Returns `true` if this enum value equals `Internal`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../WAD/Type.html#Internal\">Internal</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":220,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L220"},"def":{"name":"internal?","visibility":"Public","body":"self == Internal"},"external_var":false},{"html_id":"patch?-instance-method","name":"patch?","doc":"Returns `true` if this enum value equals `Patch`","summary":"<p>Returns <code>true</code> if this enum value equals <code><a href=\"../WAD/Type.html#Patch\">Patch</a></code></p>","abstract":false,"location":{"filename":"src/wa-cr/wad/wad.cr","line_number":221,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/wa-cr/wad/wad.cr#L221"},"def":{"name":"patch?","visibility":"Public","body":"self == Patch"},"external_var":false}]}]},{"html_id":"wa-cr/WritingAdditions","path":"WritingAdditions.html","kind":"module","full_name":"WritingAdditions","name":"WritingAdditions","abstract":false,"locations":[{"filename":"src/write.cr","line_number":104,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L104"},{"filename":"src/write/write_demo.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_demo.cr#L1"},{"filename":"src/write/write_map.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L1"},{"filename":"src/write/write_music.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_music.cr#L1"},{"filename":"src/write/write_sound.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_sound.cr#L1"},{"filename":"src/write/write_texture.cr","line_number":1,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L1"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"doc":"### Additions to allow wa-cr to write to files\n\nTo use these additions, just require it:\n\n```\nrequire \"wa-cr/write\"\n```\n\nHere's some examples of this addition:\n\n```\nrequire \"wa-cr/write\"\n\nFile.open(\"Path/To/Test.file\") do |file|\n  # Writes a full wad\n  my_wad.write(file) # => Size of the written file\n\n  # Writes lumps return the size of the written lump\n  my_demo.write(file) # => Size of the written file\n\n  my_sound.write(file)   # => Size of the written file\n  my_pcsound.write(file) # => etc.\n\n  my_music.write(file) # => etc.\n  my_genmidi.write(file) # => etc.\n  my_dmxgus.write(file) # => etc.\n\n  my_playpal.write(file) # => etc.\n  my_colormap.write(file) # => etc.\n  my_endoom.write(file) # => etc.\n  my_texturemap.write(file) # => etc.\n  my_pnames.write(file) # => etc.\n  my_graphic.write(file) # => etc.\n  my_flat.write(file) # => etc.\n```\n\n### Map Data\n\n  To write specific map data, you have to use\n  the class methods and put in the file to\n  write, and the parsed map data you want to write:\n\n```\nFile.open(\"Path/To/Test.file\") do |file|\n  my_map.write(file) # => An array of all written directories in the order listed below\n\n  Map::Thing.write(file, my_things : Array)              # => The written file's directory\n  Map::Linedef.write(file, my_linedefs : Array)          # => The written file's directory\n  Map::Sidedef.write(file, my_sidedefs : Array)          # => etc.\n  Map::Vertex.write(file, my_vertexs : Array)            # => etc.\n  Map::Seg.write(file, my_segs : Array)                  # => etc.\n  Map::Ssector.write(file, my_ssectors : Array)          # => etc.\n  Map::Node.write(file, my_nodes : Array)                # => etc.\n  Map::Sector.write(file, my_sectors : Array)            # => etc.\n  Map::Reject.write(file, my_reject : Map::Reject)       # => etc.\n  Map::Blockmap.write(file, my_blockmap : Map::Blockmap) # => etc.\nend\n```\n\n\n### Quick Writing\n\n  wa-cr's writing additions' methods also have overloads\n  to write to a file by just providing the file path\n\n```\n# Writes a full wad\nmy_wad.write(\"Path/To/File\") # => Size of the written file\n\n# Writes lumps return the size of the written lump\nmy_demo.write(file) # => Size of the written file\n\nmy_sound.write(\"Path/To/File\")   # => Size of the written file\nmy_pcsound.write(\"Path/To/File\") # => etc.\n\nmy_music.write(\"Path/To/File\")   # => etc.\nmy_genmidi.write(\"Path/To/File\") # => etc.\nmy_dmxgus.write(\"Path/To/File\")  # => etc.\n\nmy_playpal.write(\"Path/To/File\")    # => etc.\nmy_colormap.write(\"Path/To/File\")   # => etc.\nmy_endoom.write(\"Path/To/File\")     # => etc.\nmy_texturemap.write(\"Path/To/File\") # => etc.\nmy_pnames.write(\"Path/To/File\")     # => etc.\nmy_graphic.write(\"Path/To/File\")    # => etc.\nmy_flat.write(\"Path/To/File\")       # => etc.\n\n# Map Data\nmy_map.write(\"Path/To/File\") # => An array of all written directories in the order listed below\n\nMap::Thing.write(\"Path/To/File\", my_thing : Array)             # => The written file's directory\nMap::Linedefwrite(\"Path/To/File\", my_linedefs : Array)         # => The written file's directory\nMap::Sidedef.write(\"Path/To/File\", my_sidedefs : Array)         # => etc.\nMap::Vertex.write(\"Path/To/File\", my_vertexes : Array)         # => etc.\nMap::Seg.write(\"Path/To/File\", my_segs : Array)                 # => etc.\nMap::Ssector.write(\"Path/To/File\", my_ssectors : Array)         # => etc.\nMap::Node.write(\"Path/To/File\", my_nodes : Array)               # => etc.\nMap::Sector.write(\"Path/To/File\", my_sectors : Array)           # => etc.\nMap::Reject.write(\"Path/To/File\", my_reject : Map::Reject)       # => etc.\nMap::Blockmap.write(\"Path/To/File\", my_blockmap : Map::Blockmap) # => etc.\n```","summary":"<h3><a id=\"additions-to-allow-wa-cr-to-write-to-files\" class=\"anchor\" href=\"#additions-to-allow-wa-cr-to-write-to-files\">  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a>Additions to allow wa-cr to write to files</h3>","types":[{"html_id":"wa-cr/WritingAdditions/Colormap","path":"WritingAdditions/Colormap.html","kind":"module","full_name":"WritingAdditions::Colormap","name":"Colormap","abstract":false,"locations":[{"filename":"src/write/write_texture.cr","line_number":44,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L44"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/Colormap","kind":"class","full_name":"WAD::Colormap","name":"Colormap"}],"namespace":{"html_id":"wa-cr/WritingAdditions","kind":"module","full_name":"WritingAdditions","name":"WritingAdditions"},"doc":"Writes out a colormap","summary":"<p>Writes out a colormap</p>","instance_methods":[{"html_id":"write(file:String|Path):UInt32-instance-method","name":"write","doc":"Writes a colormap given an output io and returns the size of the written lump\n\nWrites a colormap in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nmy_wad.colormap.write(\"Path/To/my_colormap.lmp\")\n```","summary":"<p>Writes a colormap given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"args_string":"(file : String | Path) : UInt32","args_html":"(file : String | Path) : UInt32","location":{"filename":"src/write/write_texture.cr","line_number":52,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L52"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"return_type":"UInt32","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return write(file)\nend"},"external_var":false},{"html_id":"write(io:IO):UInt32-instance-method","name":"write","doc":"Writes a colormap given an output io and returns the size of the written lump\n\nWrites a colormap in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/colormap.lmp\", \"w+\") do |file|\n  my_wad.colormap.write(file)\nend\n```","summary":"<p>Writes a colormap given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : UInt32","args_html":"(io : IO) : UInt32","location":{"filename":"src/write/write_texture.cr","line_number":67,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L67"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"UInt32","visibility":"Public","body":"lump_size = 0_u32\ntables.each do |table|\n  table.table.each do |value|\n    io.write_bytes(value.to_u8, IO::ByteFormat::LittleEndian)\n    lump_size = lump_size + 1_u32\n  end\nend\nlump_size\n"},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Demo","path":"WritingAdditions/Demo.html","kind":"module","full_name":"WritingAdditions::Demo","name":"Demo","abstract":false,"locations":[{"filename":"src/write/write_demo.cr","line_number":3,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_demo.cr#L3"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/Demo","kind":"class","full_name":"WAD::Demo","name":"Demo"}],"namespace":{"html_id":"wa-cr/WritingAdditions","kind":"module","full_name":"WritingAdditions","name":"WritingAdditions"},"doc":"A doom demo which saves player input states","summary":"<p>A doom demo which saves player input states</p>","instance_methods":[{"html_id":"write(file:String|Path):UInt32-instance-method","name":"write","doc":"Writes a demo given an output io and returns the size of the written lump\n\nWrites a demo in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nmy_wad.demos[\"MyDemo\"].write(\"Path/To/demo.lmp\")\n```","summary":"<p>Writes a demo given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"args_string":"(file : String | Path) : UInt32","args_html":"(file : String | Path) : UInt32","location":{"filename":"src/write/write_demo.cr","line_number":11,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_demo.cr#L11"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"return_type":"UInt32","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return write(file)\nend"},"external_var":false},{"html_id":"write(io:IO):UInt32-instance-method","name":"write","doc":"Writes a demo given an output io and returns the size of the written lump\n\nWrites a demo in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/demo.lmp\", \"w+\") do |file|\n  my_wad.demos[\"MyDemo\"].write(file)\nend\n```","summary":"<p>Writes a demo given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : UInt32","args_html":"(io : IO) : UInt32","location":{"filename":"src/write/write_demo.cr","line_number":26,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_demo.cr#L26"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"UInt32","visibility":"Public","body":"lump_size = 0_u32\n\nio.write_bytes(game_version.to_u8, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 1_u32\nio.write_bytes(skill_level.to_u8, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 1_u32\nio.write_bytes(episode.to_u8, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 1_u32\nio.write_bytes(map.to_u8, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 1_u32\nio.write_bytes(multiplayer_mode.to_u8, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 1_u32\nio.write_bytes(respawn.to_unsafe.to_u8, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 1_u32\nio.write_bytes(fast.to_unsafe.to_u8, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 1_u32\nio.write_bytes(nomonsters.to_unsafe.to_u8, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 1_u32\nio.write_bytes(player_pov.to_u8, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 1_u32\nio.write_bytes(player1.to_unsafe.to_u8, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 1_u32\nio.write_bytes(player2.to_unsafe.to_u8, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 1_u32\nio.write_bytes(player3.to_unsafe.to_u8, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 1_u32\nio.write_bytes(player4.to_unsafe.to_u8, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 1_u32\n\ninput_actions.each do |input_action|\n  io.write_bytes(input_action.movement_forward_back.to_i8, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 1_u32\n  io.write_bytes(input_action.strafing.to_i8, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 1_u32\n  io.write_bytes(input_action.turning.to_i8, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 1_u32\n  io.write_bytes(input_action.action.to_u8, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 1_u32\nend\n\nio.write_bytes(128, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 1_u32\n\nlump_size\n"},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Dmxgus","path":"WritingAdditions/Dmxgus.html","kind":"module","full_name":"WritingAdditions::Dmxgus","name":"Dmxgus","abstract":false,"locations":[{"filename":"src/write/write_music.cr","line_number":125,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_music.cr#L125"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/Dmxgus","kind":"class","full_name":"WAD::Dmxgus","name":"Dmxgus"}],"namespace":{"html_id":"wa-cr/WritingAdditions","kind":"module","full_name":"WritingAdditions","name":"WritingAdditions"},"doc":"\"Instrument data for the DMX sound library to use for Gravis Ultrasound soundcards\".","summary":"<p>&quot;Instrument data for the DMX sound library to use for Gravis Ultrasound soundcards&quot;.</p>","instance_methods":[{"html_id":"write(file:String|Path):UInt32-instance-method","name":"write","doc":"Writes a dmxgus given an output io and returns the size of the written lump\n\nWrites a dmxgus in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nmy_wad.dmxgus.write(\"Path/To/dmxgus.lmp\")\n```","summary":"<p>Writes a dmxgus given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"args_string":"(file : String | Path) : UInt32","args_html":"(file : String | Path) : UInt32","location":{"filename":"src/write/write_music.cr","line_number":133,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_music.cr#L133"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"return_type":"UInt32","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return write(file)\nend"},"external_var":false},{"html_id":"write(io:IO):UInt32-instance-method","name":"write","doc":"Writes a dmxgus given an output io and returns the size of the written lump\n\nWrites a dmxgus in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/dmxgus.lmp\", \"w+\") do |file|\n  my_wad.dmxgus.write(file)\nend\n```","summary":"<p>Writes a dmxgus given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : UInt32","args_html":"(io : IO) : UInt32","location":{"filename":"src/write/write_music.cr","line_number":148,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_music.cr#L148"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"UInt32","visibility":"Public","body":"lump_size = 0_u32\n\ninstr_datas.each do |instr_data|\n  io.print(instr_data.patch.to_s)\n  lump_size = lump_size + instr_data.patch.to_s.bytesize.to_u32\n  io.print(\",\")\n  lump_size = lump_size + \",\".bytesize.to_u32\n\n  io.print(instr_data.a_k.to_s)\n  lump_size = lump_size + instr_data.a_k.to_s.bytesize.to_u32\n  io.print(\",\")\n  lump_size = lump_size + \",\".bytesize.to_u32\n\n  io.print(instr_data.b_k.to_s)\n  lump_size = lump_size + instr_data.b_k.to_s.bytesize.to_u32\n  io.print(\",\")\n  lump_size = lump_size + \",\".bytesize.to_u32\n\n  io.print(instr_data.c_k.to_s)\n  lump_size = lump_size + instr_data.c_k.to_s.bytesize.to_u32\n  io.print(\",\")\n  lump_size = lump_size + \",\".bytesize.to_u32\n\n  io.print(instr_data.d_k.to_s)\n  lump_size = lump_size + instr_data.d_k.to_s.bytesize.to_u32\n  io.print(\",\")\n  lump_size = lump_size + \",\".bytesize.to_u32\n\n  io.print(instr_data.filename)\n  lump_size = lump_size + instr_data.filename.bytesize.to_u32\n  io.print(\"\\n\")\n  lump_size = lump_size + \"\\n\".bytesize.to_u32\nend\nlump_size\n"},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/EnDoom","path":"WritingAdditions/EnDoom.html","kind":"module","full_name":"WritingAdditions::EnDoom","name":"EnDoom","abstract":false,"locations":[{"filename":"src/write/write_texture.cr","line_number":80,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L80"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/EnDoom","kind":"class","full_name":"WAD::EnDoom","name":"EnDoom"}],"namespace":{"html_id":"wa-cr/WritingAdditions","kind":"module","full_name":"WritingAdditions","name":"WritingAdditions"},"doc":"\"The colorful screen shown when Doom exits.\"","summary":"<p>&quot;The colorful screen shown when Doom exits.&quot;</p>","instance_methods":[{"html_id":"write(file:String|Path):UInt32-instance-method","name":"write","doc":"Writes a endoom given an output io and returns the size of the written lump\n\nWrites a endoom in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nmy_wad.endoom.write(\"Path/To/my_endoom.lmp\")\n```","summary":"<p>Writes a endoom given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"args_string":"(file : String | Path) : UInt32","args_html":"(file : String | Path) : UInt32","location":{"filename":"src/write/write_texture.cr","line_number":88,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L88"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"return_type":"UInt32","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return write(file)\nend"},"external_var":false},{"html_id":"write(io:IO):UInt32-instance-method","name":"write","doc":"Writes a endoom given an output io and returns the size of the written lump\n\nWrites a endoom in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/my_endoom.lmp\", \"w+\") do |file|\n  my_wad.endoom.write(file)\nend\n```","summary":"<p>Writes a endoom given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : UInt32","args_html":"(io : IO) : UInt32","location":{"filename":"src/write/write_texture.cr","line_number":103,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L103"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"UInt32","visibility":"Public","body":"lump_size = 0_u32\n\ncharacters.each do |character|\n  io.write_bytes(character.ascii_value.to_u8, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 1_u32\n  io.write_bytes(character.color.to_u8, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 1_u32\nend\nlump_size\n"},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Flat","path":"WritingAdditions/Flat.html","kind":"module","full_name":"WritingAdditions::Flat","name":"Flat","abstract":false,"locations":[{"filename":"src/write/write_texture.cr","line_number":361,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L361"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/Flat","kind":"class","full_name":"WAD::Flat","name":"Flat"}],"namespace":{"html_id":"wa-cr/WritingAdditions","kind":"module","full_name":"WritingAdditions","name":"WritingAdditions"},"doc":"A WAD flat","summary":"<p>A WAD flat</p>","instance_methods":[{"html_id":"write(file:String|Path):UInt32-instance-method","name":"write","doc":"Writes a playpal given an output io and returns the size of the written lump\n\nWrites a playpal in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nmy_wad.flats[\"MyFlat\"].write(\"Path/To/flat.lmp\")\n```","summary":"<p>Writes a playpal given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"args_string":"(file : String | Path) : UInt32","args_html":"(file : String | Path) : UInt32","location":{"filename":"src/write/write_texture.cr","line_number":369,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L369"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"return_type":"UInt32","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return write(file)\nend"},"external_var":false},{"html_id":"write(io:IO):UInt32-instance-method","name":"write","doc":"Writes a flat given an output io and returns the size of the written lump\n\nWrites a flat in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/flat.lmp\", \"w+\") do |file|\n  my_wad.flats[\"MyFlat\"].write(file)\nend\n```","summary":"<p>Writes a flat given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : UInt32","args_html":"(io : IO) : UInt32","location":{"filename":"src/write/write_texture.cr","line_number":384,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L384"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"UInt32","visibility":"Public","body":"lump_size = 0_u32\n\nwidth.times do |y|\n  height.times do |x|\n    io.write_bytes(self[x, y].to_u8, IO::ByteFormat::LittleEndian)\n    lump_size = lump_size + 1_u32\n  end\nend\n\nlump_size\n"},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Genmidi","path":"WritingAdditions/Genmidi.html","kind":"module","full_name":"WritingAdditions::Genmidi","name":"Genmidi","abstract":false,"locations":[{"filename":"src/write/write_music.cr","line_number":60,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_music.cr#L60"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/Genmidi","kind":"class","full_name":"WAD::Genmidi","name":"Genmidi"}],"namespace":{"html_id":"wa-cr/WritingAdditions","kind":"module","full_name":"WritingAdditions","name":"WritingAdditions"},"doc":"\"Instrument data for the DMX sound library to use for OPL synthesis\".","summary":"<p>&quot;Instrument data for the DMX sound library to use for OPL synthesis&quot;.</p>","instance_methods":[{"html_id":"write(file:String|Path):UInt32-instance-method","name":"write","doc":"Writes a genmidi given an output io and returns the size of the written lump\n\nWrites a genmidi in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nmy_wad.genmidi.write(file)\n```","summary":"<p>Writes a genmidi given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"args_string":"(file : String | Path) : UInt32","args_html":"(file : String | Path) : UInt32","location":{"filename":"src/write/write_music.cr","line_number":68,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_music.cr#L68"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"return_type":"UInt32","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return write(file)\nend"},"external_var":false},{"html_id":"write(io:IO):UInt32-instance-method","name":"write","doc":"Writes a genmidi given an output io and returns the size of the written lump\n\nWrites a genmidi in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/genmidi.lmp\", \"w+\") do |file|\n  my_wad.genmidi.write(file)\nend\n```","summary":"<p>Writes a genmidi given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : UInt32","args_html":"(io : IO) : UInt32","location":{"filename":"src/write/write_music.cr","line_number":83,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_music.cr#L83"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"UInt32","visibility":"Public","body":"lump_size = 0_u32\n\nio.print(header)\nlump_size = lump_size + header.bytesize.to_u32\n\ninstr_datas.each do |instr_data|\n  io.write_bytes(instr_data.header[0].to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(instr_data.header[1].to_i8, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 1_u32\n  io.write_bytes(instr_data.header[2].to_i8, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 1_u32\n\n\n  14.times do |time|\n    io.write_bytes(instr_data.voice1_data[time].to_i8, IO::ByteFormat::LittleEndian)\n    lump_size = lump_size + 1_u32\n  end\n  io.write_bytes(instr_data.voice1_data[14].to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n\n\n  14.times do |time|\n    io.write_bytes(instr_data.voice2_data[time].to_i8, IO::ByteFormat::LittleEndian)\n    lump_size = lump_size + 1_u32\n  end\n  io.write_bytes(instr_data.voice2_data[14].to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\nend\n\ninstr_names.each do |name|\n  name_slice = Bytes.new(32)\n  name_slice.copy_from(::WAD.slice_cut((::WAD.string_cut(name, 32)).to_slice, 32))\n  io.write(name_slice)\n  lump_size = lump_size + 32_u32\nend\nlump_size\n"},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Graphic","path":"WritingAdditions/Graphic.html","kind":"module","full_name":"WritingAdditions::Graphic","name":"Graphic","abstract":false,"locations":[{"filename":"src/write/write_texture.cr","line_number":232,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L232"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/Graphic","kind":"class","full_name":"WAD::Graphic","name":"Graphic"}],"namespace":{"html_id":"wa-cr/WritingAdditions","kind":"module","full_name":"WritingAdditions","name":"WritingAdditions"},"doc":"A WAD graphic","summary":"<p>A WAD graphic</p>","instance_methods":[{"html_id":"write(file:String|Path):UInt32-instance-method","name":"write","doc":"Writes a graphic given an output io and returns the size of the written lump\n\nWrites a graphic in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nmy_wad.graphic[\"MyGraphic\"].write(\"Path/To/Graphic.lmp\")\n```","summary":"<p>Writes a graphic given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"args_string":"(file : String | Path) : UInt32","args_html":"(file : String | Path) : UInt32","location":{"filename":"src/write/write_texture.cr","line_number":240,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L240"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"return_type":"UInt32","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return write(file)\nend"},"external_var":false},{"html_id":"write(io:IO):UInt32-instance-method","name":"write","doc":"Writes a graphic given an output io and returns the size of the written lump\n\nWrites a graphic in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/Graphic.lmp\", \"w+\") do |file|\n  my_wad.graphic[\"MyGraphic\"].write(file)\nend\n```","summary":"<p>Writes a graphic given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : UInt32","args_html":"(io : IO) : UInt32","location":{"filename":"src/write/write_texture.cr","line_number":255,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L255"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"UInt32","visibility":"Public","body":"file_start_position = io.pos\ndummy_value = 0_u8\npixel_count = 0_u8\nlump_size = 0_u32\ncolumn_offsets = [] of UInt32\noffset = 0_u32\n\nio.write_bytes(width.to_u16, IO::ByteFormat::LittleEndian)\nio.write_bytes(height.to_u16, IO::ByteFormat::LittleEndian)\nio.write_bytes(leftoffset.to_i16, IO::ByteFormat::LittleEndian)\nio.write_bytes(topoffset.to_i16, IO::ByteFormat::LittleEndian)\n\nbuffer = IO::Memory.new\n\nwidth.times do |x|\n  column_offsets << buffer.pos.to_u32\n  y = 0_u8\n  operator = true\n  empty_post = false\n\n  while !(y == height)\n    pixel = self[x.to_i, y.to_i]\n\n    if pixel.nil? && (!operator)\n      operator = true\n      if y != (height - 1)\n        buffer.write_bytes(dummy_value.to_u8, IO::ByteFormat::LittleEndian)\n        empty_post = true\n      end\n    elsif (!pixel.nil?) && operator\n      empty_post = false\n      row_start = y\n      pixel_count = 1_u8\n      dummy_value = 0_u8\n\n      buffer.write_bytes(row_start.to_u8, IO::ByteFormat::LittleEndian)\n      buffer.write_bytes(pixel_count.to_u8, IO::ByteFormat::LittleEndian)\n      buffer.write_bytes(dummy_value.to_u8, IO::ByteFormat::LittleEndian)\n\n      offset = buffer.pos.to_u32\n      operator = false\n\n      buffer.write_bytes(pixel.to_u8, IO::ByteFormat::LittleEndian)\n    elsif (!pixel.nil?) && (!operator)\n      empty_post = false\n      pixel_count = pixel_count + 1_u8\n\n      if offset > 0 && pixel_count > 0\n        previous_offset = buffer.pos\n        buffer.pos = (offset - 2)\n        buffer.write_bytes(pixel_count.to_u8, IO::ByteFormat::LittleEndian)\n        buffer.pos = previous_offset\n      end\n\n      buffer.write_bytes(pixel.to_u8, IO::ByteFormat::LittleEndian)\n    end\n\n    y = y + 1_u8\n  end\n\n  if operator || (y == height)\n    if buffer.pos != 0\n      if empty_post\n        buffer.pos = (buffer.pos - 1)\n      end\n\n      buffer.pos = (buffer.pos - 1)\n\n      if (buffer.read_bytes(UInt8, IO::ByteFormat::LittleEndian)) != 255\n        pixel = 0\n\n        buffer.write_bytes(pixel.to_u8, IO::ByteFormat::LittleEndian)\n      end\n\n      row_start = 255\n\n      buffer.write_bytes(row_start.to_u8, IO::ByteFormat::LittleEndian)\n    else\n      row_start = 255\n\n      buffer.write_bytes(row_start.to_u8, IO::ByteFormat::LittleEndian)\n    end\n  end\nend\n\nbuffer.pos = 0\n\noffset = io.pos - file_start_position\n\nio.pos = file_start_position + 8\n\ncolumn_offsets.size.times do |time|\n  column_offset = (column_offsets[time] + offset) + (column_offsets.size * 4)\n\n  io.write_bytes(column_offset.to_u32, IO::ByteFormat::LittleEndian)\nend\n\nIO.copy(buffer, io)\n\nlump_size = io.pos.to_u32 - file_start_position.to_u32\nlump_size\n"},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Map","path":"WritingAdditions/Map.html","kind":"module","full_name":"WritingAdditions::Map","name":"Map","abstract":false,"locations":[{"filename":"src/write/write_map.cr","line_number":3,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L3"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/Map","kind":"class","full_name":"WAD::Map","name":"Map"}],"namespace":{"html_id":"wa-cr/WritingAdditions","kind":"module","full_name":"WritingAdditions","name":"WritingAdditions"},"doc":"Map containing all directories of data lumps.","summary":"<p>Map containing all directories of data lumps.</p>","instance_methods":[{"html_id":"write(file:String|Path):Array(::WAD::Directory)-instance-method","name":"write","doc":"Writes a map given an output io and returns the directories of the written lumps\n\nWrites a map in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nmy_wad.maps[\"MyMap\"].write(\"Path/To/map.lmp\")\n```","summary":"<p>Writes a map given an output io and returns the directories of the written lumps</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"args_string":"(file : String | Path) : Array(::WAD::Directory)","args_html":"(file : String | Path) : Array(<a href=\"../WAD/Directory.html\">::WAD::Directory</a>)","location":{"filename":"src/write/write_map.cr","line_number":11,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L11"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"return_type":"Array(::WAD::Directory)","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return write(file)\nend"},"external_var":false},{"html_id":"write(io:IO):Array(::WAD::Directory)-instance-method","name":"write","doc":"Writes a map given an output io and returns the directories of the written lumps\n\nWrites a map in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/map.lmp\", \"w+\") do |file|\n  my_wad.maps[\"MyMap\"].write(file)\nend\n```","summary":"<p>Writes a map given an output io and returns the directories of the written lumps</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Array(::WAD::Directory)","args_html":"(io : IO) : Array(<a href=\"../WAD/Directory.html\">::WAD::Directory</a>)","location":{"filename":"src/write/write_map.cr","line_number":26,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L26"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Array(::WAD::Directory)","visibility":"Public","body":"written_map_directories = [] of ::WAD::Directory\n\nwritten_map_directories << (Thing.write(io, things))\nwritten_map_directories << (Linedef.write(io, linedefs))\nwritten_map_directories << (Sidedef.write(io, sidedefs))\nwritten_map_directories << (Vertex.write(io, vertexes))\nwritten_map_directories << (Seg.write(io, segs))\nwritten_map_directories << (Ssector.write(io, ssectors))\nwritten_map_directories << (Node.write(io, nodes))\nwritten_map_directories << (Sector.write(io, sectors))\nwritten_map_directories << (reject.write(io))\nwritten_map_directories << (blockmap.write(io))\n\nwritten_map_directories\n"},"external_var":false}],"types":[{"html_id":"wa-cr/WritingAdditions/Map/Blockmap","path":"WritingAdditions/Map/Blockmap.html","kind":"module","full_name":"WritingAdditions::Map::Blockmap","name":"Blockmap","abstract":false,"locations":[{"filename":"src/write/write_map.cr","line_number":521,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L521"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/Map/Blockmap","kind":"class","full_name":"WAD::Map::Blockmap","name":"Blockmap"}],"namespace":{"html_id":"wa-cr/WritingAdditions/Map","kind":"module","full_name":"WritingAdditions::Map","name":"Map"},"doc":"Class of a blockmap.","summary":"<p>Class of a blockmap.</p>","instance_methods":[{"html_id":"write(file:String|Path):::WAD::Directory-instance-method","name":"write","doc":"Writes a blockmap given an output io and the blockmap\nto write and returns the written directory\n\nWrites blockmap in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nmy_wad.maps[\"MyMap\"].blockmap.write(\"Path/To/blockmap.lmp\")\n```","summary":"<p>Writes a blockmap given an output io and the blockmap to write and returns the written directory</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"args_string":"(file : String | Path) : ::WAD::Directory","args_html":"(file : String | Path) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":530,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L530"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"return_type":"::WAD::Directory","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return write(file)\nend"},"external_var":false},{"html_id":"write(io:IO):::WAD::Directory-instance-method","name":"write","doc":"Writes a blockmap given an output io and the blockmap\nto write and returns the written directory\n\nWrites blockmap in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/blockmap.lmp\", \"w+\") do |file|\n  my_wad.maps[\"MyMap\"].blockmap.write(file)\nend\n```","summary":"<p>Writes a blockmap given an output io and the blockmap to write and returns the written directory</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : ::WAD::Directory","args_html":"(io : IO) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":546,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L546"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"::WAD::Directory","visibility":"Public","body":"written_directory = ::WAD::Directory.new\nwritten_directory.name = \"BLOCKMAP\"\nwritten_directory.file_pos = io.pos.to_u32\n\nlump_size = 0_u32\n\nio.write_bytes(header.grid_origin_x.to_i16, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 2_u32\nio.write_bytes(header.grid_origin_y.to_i16, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 2_u32\nio.write_bytes(header.num_of_columns.to_u16, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 2_u32\nio.write_bytes(header.num_of_rows.to_u16, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 2_u32\n\noffsets.each do |offset|\n  io.write_bytes(offset.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\nend\n\nblocklists.each do |blocklist|\n  io.write_bytes(0_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  blocklist.linedefs_in_block.each do |value|\n    io.write_bytes(value.to_u16, IO::ByteFormat::LittleEndian)\n    lump_size = lump_size + 2_u32\n  end\nend\n\nio.write_bytes(65535_u16, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 2_u32\n\nwritten_directory.size = lump_size.to_u32\nwritten_directory\n"},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Map/Linedef","path":"WritingAdditions/Map/Linedef.html","kind":"struct","full_name":"WritingAdditions::Map::Linedef","name":"Linedef","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/write/write_map.cr","line_number":94,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L94"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WritingAdditions/Map","kind":"module","full_name":"WritingAdditions::Map","name":"Map"},"doc":"Structure of a linedef.","summary":"<p>Structure of a linedef.</p>","class_methods":[{"html_id":"write(file:String|Path,linedefs:Array(::WAD::Map::Linedef)):::WAD::Directory-class-method","name":"write","doc":"Writes a list of linedefs given an output io and the linedefs\nto write and returns the written directory\n\nWrites linedefs in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nWAD::Map::Linedef.write(\"Path/To/linedefs.lmp\", my_wad.maps[\"MyMap\"].linedefs)\n```","summary":"<p>Writes a list of linedefs given an output io and the linedefs to write and returns the written directory</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"},{"name":"linedefs","external_name":"linedefs","restriction":"Array(::WAD::Map::Linedef)"}],"args_string":"(file : String | Path, linedefs : Array(::WAD::Map::Linedef)) : ::WAD::Directory","args_html":"(file : String | Path, linedefs : Array(<a href=\"../../WAD/Map/Linedef.html\">::WAD::Map::Linedef</a>)) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":103,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L103"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"},{"name":"linedefs","external_name":"linedefs","restriction":"Array(::WAD::Map::Linedef)"}],"return_type":"::WAD::Directory","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return self.write(file, linedefs)\nend"},"external_var":false},{"html_id":"write(io:IO,linedefs:Array(::WAD::Map::Linedef)):::WAD::Directory-class-method","name":"write","doc":"Writes a list of linedefs given an output io and the linedefs\nto write and returns the written directory\n\nWrites linedefs in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/linedefs.lmp\", \"w+\") do |file|\n  WAD::Map::Linedef.write(my_wad.maps[\"MyMap\"].linedefs)\nend\n```","summary":"<p>Writes a list of linedefs given an output io and the linedefs to write and returns the written directory</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"linedefs","external_name":"linedefs","restriction":"Array(::WAD::Map::Linedef)"}],"args_string":"(io : IO, linedefs : Array(::WAD::Map::Linedef)) : ::WAD::Directory","args_html":"(io : IO, linedefs : Array(<a href=\"../../WAD/Map/Linedef.html\">::WAD::Map::Linedef</a>)) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":119,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L119"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"linedefs","external_name":"linedefs","restriction":"Array(::WAD::Map::Linedef)"}],"return_type":"::WAD::Directory","visibility":"Public","body":"written_directory = ::WAD::Directory.new\nwritten_directory.name = \"LINEDEFS\"\nwritten_directory.file_pos = io.pos.to_u32\n\nlump_size = 0_u32\n\nlinedefs.each do |linedef|\n  io.write_bytes(linedef.start_vertex.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(linedef.end_vertex.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(linedef.flags.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(linedef.special_type.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(linedef.sector_tag.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(linedef.front_sidedef.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(linedef.back_sidedef.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\nend\nwritten_directory.size = lump_size.to_u32\nwritten_directory\n"},"external_var":false}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/write/write_map.cr","line_number":94,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L94"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/write/write_map.cr","line_number":94,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L94"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Map/Node","path":"WritingAdditions/Map/Node.html","kind":"struct","full_name":"WritingAdditions::Map::Node","name":"Node","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/write/write_map.cr","line_number":352,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L352"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WritingAdditions/Map","kind":"module","full_name":"WritingAdditions::Map","name":"Map"},"doc":"Structure of a node.","summary":"<p>Structure of a node.</p>","class_methods":[{"html_id":"write(file:String|Path,nodes:Array(::WAD::Map::Node)):::WAD::Directory-class-method","name":"write","doc":"Writes a list of nodes given an output io and the nodes\nto write and returns the written directory\n\nWrites nodes in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nWAD::Map::Node.write(\"Path/To/nodes.lmp\", my_wad.maps[\"MyMap\"].nodes)\n```","summary":"<p>Writes a list of nodes given an output io and the nodes to write and returns the written directory</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"},{"name":"nodes","external_name":"nodes","restriction":"Array(::WAD::Map::Node)"}],"args_string":"(file : String | Path, nodes : Array(::WAD::Map::Node)) : ::WAD::Directory","args_html":"(file : String | Path, nodes : Array(<a href=\"../../WAD/Map/Node.html\">::WAD::Map::Node</a>)) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":361,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L361"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"},{"name":"nodes","external_name":"nodes","restriction":"Array(::WAD::Map::Node)"}],"return_type":"::WAD::Directory","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return self.write(file, nodes)\nend"},"external_var":false},{"html_id":"write(io:IO,nodes:Array(::WAD::Map::Node)):::WAD::Directory-class-method","name":"write","doc":"Writes a list of nodes given an output io and the nodes\nto write and returns the written directory\n\nWrites nodes in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/nodes.lmp\", \"w+\") do |file|\n  WAD::Map::Node.write(my_wad.maps[\"MyMap\"].nodes)\nend\n```","summary":"<p>Writes a list of nodes given an output io and the nodes to write and returns the written directory</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"nodes","external_name":"nodes","restriction":"Array(::WAD::Map::Node)"}],"args_string":"(io : IO, nodes : Array(::WAD::Map::Node)) : ::WAD::Directory","args_html":"(io : IO, nodes : Array(<a href=\"../../WAD/Map/Node.html\">::WAD::Map::Node</a>)) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":377,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L377"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"nodes","external_name":"nodes","restriction":"Array(::WAD::Map::Node)"}],"return_type":"::WAD::Directory","visibility":"Public","body":"written_directory = ::WAD::Directory.new\nwritten_directory.name = \"NODES\"\nwritten_directory.file_pos = io.pos.to_u32\n\nlump_size = 0_u32\n\nnodes.each do |node|\n  io.write_bytes(node.x_coord.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(node.y_coord.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(node.x_change_to_end.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(node.y_change_to_end.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n\n  node.right_bound_box.each do |value|\n    io.write_bytes(value.to_i16, IO::ByteFormat::LittleEndian)\n    lump_size = lump_size + 2_u32\n  end\n\n  node.left_bound_box.each do |value|\n    io.write_bytes(value.to_i16, IO::ByteFormat::LittleEndian)\n    lump_size = lump_size + 2_u32\n  end\n\n  io.write_bytes(node.right_child.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(node.left_child.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\nend\n\nwritten_directory.size = lump_size.to_u32\nwritten_directory\n"},"external_var":false}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/write/write_map.cr","line_number":352,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L352"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/write/write_map.cr","line_number":352,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L352"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Map/Reject","path":"WritingAdditions/Map/Reject.html","kind":"module","full_name":"WritingAdditions::Map::Reject","name":"Reject","abstract":false,"locations":[{"filename":"src/write/write_map.cr","line_number":478,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L478"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/Map/Reject","kind":"class","full_name":"WAD::Map::Reject","name":"Reject"}],"namespace":{"html_id":"wa-cr/WritingAdditions/Map","kind":"module","full_name":"WritingAdditions::Map","name":"Map"},"doc":"Class of a reject.","summary":"<p>Class of a reject.</p>","instance_methods":[{"html_id":"write(file:String|Path):::WAD::Directory-instance-method","name":"write","doc":"Writes a reject given an output io and the reject\nto write and returns the written directory\n\nWrites reject in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nmy_wad.maps[\"MyMap\"].reject.write(\"Path/To/reject.lmp\")\n```","summary":"<p>Writes a reject given an output io and the reject to write and returns the written directory</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"args_string":"(file : String | Path) : ::WAD::Directory","args_html":"(file : String | Path) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":487,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L487"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"return_type":"::WAD::Directory","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return write(file)\nend"},"external_var":false},{"html_id":"write(io:IO):::WAD::Directory-instance-method","name":"write","doc":"Writes a reject given an output io and the reject\nto write and returns the written directory\n\nWrites reject in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/reject.lmp\", \"w+\") do |file|\n  my_wad.maps[\"MyMap\"].reject.write(file)\nend\n```","summary":"<p>Writes a reject given an output io and the reject to write and returns the written directory</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : ::WAD::Directory","args_html":"(io : IO) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":503,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L503"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"::WAD::Directory","visibility":"Public","body":"written_directory = ::WAD::Directory.new\nwritten_directory.name = \"REJECT\"\nwritten_directory.file_pos = io.pos.to_u32\n\nlump_size = 0_u32\n\nbyte_data.each do |byte|\n  io.write_bytes(byte, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 1_u32\nend\n\nwritten_directory.size = lump_size.to_u32\nwritten_directory\n"},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Map/Sector","path":"WritingAdditions/Map/Sector.html","kind":"struct","full_name":"WritingAdditions::Map::Sector","name":"Sector","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/write/write_map.cr","line_number":416,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L416"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WritingAdditions/Map","kind":"module","full_name":"WritingAdditions::Map","name":"Map"},"doc":"Structure of a sector.","summary":"<p>Structure of a sector.</p>","class_methods":[{"html_id":"write(file:String|Path,sectors:Array(::WAD::Map::Sector)):::WAD::Directory-class-method","name":"write","doc":"Writes a list of sectors given an output io and the sectors\nto write and returns the written directory\n\nWrites sectors in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nWAD::Map::Sector.write(\"Path/To/sectors.lmp\", my_wad.maps[\"MyMap\"].sectors)\n```","summary":"<p>Writes a list of sectors given an output io and the sectors to write and returns the written directory</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"},{"name":"sectors","external_name":"sectors","restriction":"Array(::WAD::Map::Sector)"}],"args_string":"(file : String | Path, sectors : Array(::WAD::Map::Sector)) : ::WAD::Directory","args_html":"(file : String | Path, sectors : Array(<a href=\"../../WAD/Map/Sector.html\">::WAD::Map::Sector</a>)) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":425,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L425"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"},{"name":"sectors","external_name":"sectors","restriction":"Array(::WAD::Map::Sector)"}],"return_type":"::WAD::Directory","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return self.write(file, sectors)\nend"},"external_var":false},{"html_id":"write(io:IO,sectors:Array(::WAD::Map::Sector)):::WAD::Directory-class-method","name":"write","doc":"Writes a list of sectors given an output io and the sectors\nto write and returns the written directory\n\nWrites sectors in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/sectors.lmp\", \"w+\") do |file|\n  WAD::Map::Sector.write(my_wad.maps[\"MyMap\"].sectors)\nend\n```","summary":"<p>Writes a list of sectors given an output io and the sectors to write and returns the written directory</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sectors","external_name":"sectors","restriction":"Array(::WAD::Map::Sector)"}],"args_string":"(io : IO, sectors : Array(::WAD::Map::Sector)) : ::WAD::Directory","args_html":"(io : IO, sectors : Array(<a href=\"../../WAD/Map/Sector.html\">::WAD::Map::Sector</a>)) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":441,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L441"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sectors","external_name":"sectors","restriction":"Array(::WAD::Map::Sector)"}],"return_type":"::WAD::Directory","visibility":"Public","body":"written_directory = ::WAD::Directory.new\nwritten_directory.name = \"SECTORS\"\nwritten_directory.file_pos = io.pos.to_u32\n\nlump_size = 0_u32\n\nsectors.each do |sector|\n  io.write_bytes(sector.floor_height.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(sector.ceiling_height.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n\n  name_slice = Bytes.new(8)\n  name_slice.copy_from(::WAD.slice_cut((::WAD.string_cut(sector.name_tex_floor)).to_slice))\n  io.write(name_slice)\n  lump_size = lump_size + 8_u32\n\n  name_slice = Bytes.new(8)\n  name_slice.copy_from(::WAD.slice_cut((::WAD.string_cut(sector.name_tex_ceiling)).to_slice))\n  io.write(name_slice)\n  lump_size = lump_size + 8_u32\n\n  io.write_bytes(sector.light_level.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(sector.special_type.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(sector.tag_num.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\nend\n\nwritten_directory.size = lump_size.to_u32\nwritten_directory\n"},"external_var":false}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/write/write_map.cr","line_number":416,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L416"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/write/write_map.cr","line_number":416,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L416"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Map/Seg","path":"WritingAdditions/Map/Seg.html","kind":"struct","full_name":"WritingAdditions::Map::Seg","name":"Seg","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/write/write_map.cr","line_number":254,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L254"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WritingAdditions/Map","kind":"module","full_name":"WritingAdditions::Map","name":"Map"},"doc":"Structure of a seg.","summary":"<p>Structure of a seg.</p>","class_methods":[{"html_id":"write(file:String|Path,segs:Array(::WAD::Map::Seg)):::WAD::Directory-class-method","name":"write","doc":"Writes a list of segs given an output io and the segs\nto write and returns the written directory\n\nWrites segs in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nWAD::Map::Seg.write(\"Path/To/segs.lmp\", my_wad.maps[\"MyMap\"].segs)\n```","summary":"<p>Writes a list of segs given an output io and the segs to write and returns the written directory</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"},{"name":"segs","external_name":"segs","restriction":"Array(::WAD::Map::Seg)"}],"args_string":"(file : String | Path, segs : Array(::WAD::Map::Seg)) : ::WAD::Directory","args_html":"(file : String | Path, segs : Array(<a href=\"../../WAD/Map/Seg.html\">::WAD::Map::Seg</a>)) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":263,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L263"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"},{"name":"segs","external_name":"segs","restriction":"Array(::WAD::Map::Seg)"}],"return_type":"::WAD::Directory","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return self.write(file, segs)\nend"},"external_var":false},{"html_id":"write(io:IO,segs:Array(::WAD::Map::Seg)):::WAD::Directory-class-method","name":"write","doc":"Writes a list of segs given an output io and the segs\nto write and returns the written directory\n\nWrites segs in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/segs.lmp\", \"w+\") do |file|\n  WAD::Map::Seg.write(my_wad.maps[\"MyMap\"].segs)\nend\n```","summary":"<p>Writes a list of segs given an output io and the segs to write and returns the written directory</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"segs","external_name":"segs","restriction":"Array(::WAD::Map::Seg)"}],"args_string":"(io : IO, segs : Array(::WAD::Map::Seg)) : ::WAD::Directory","args_html":"(io : IO, segs : Array(<a href=\"../../WAD/Map/Seg.html\">::WAD::Map::Seg</a>)) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":279,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L279"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"segs","external_name":"segs","restriction":"Array(::WAD::Map::Seg)"}],"return_type":"::WAD::Directory","visibility":"Public","body":"written_directory = ::WAD::Directory.new\nwritten_directory.name = \"SEGS\"\nwritten_directory.file_pos = io.pos.to_u32\n\nlump_size = 0_u32\n\nsegs.each do |seg|\n  io.write_bytes(seg.start_vertex_num.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(seg.end_vertex_num.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(seg.angle.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(seg.linedef_num.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(seg.direction.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(seg.offset.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\nend\n\nwritten_directory.size = lump_size.to_u32\nwritten_directory\n"},"external_var":false}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/write/write_map.cr","line_number":254,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L254"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/write/write_map.cr","line_number":254,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L254"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Map/Sidedef","path":"WritingAdditions/Map/Sidedef.html","kind":"struct","full_name":"WritingAdditions::Map::Sidedef","name":"Sidedef","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/write/write_map.cr","line_number":148,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L148"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WritingAdditions/Map","kind":"module","full_name":"WritingAdditions::Map","name":"Map"},"doc":"Structure of a sidedef.","summary":"<p>Structure of a sidedef.</p>","class_methods":[{"html_id":"write(file:String|Path,sidedefs:Array(::WAD::Map::Sidedef)):::WAD::Directory-class-method","name":"write","doc":"Writes a list of sidedefs given an output io and the sidedefs\nto write and returns the written directory\n\nWrites sidedefs in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nWAD::Map::Sidedef.write(\"Path/To/sidedefs.lmp\", my_wad.maps[\"MyMap\"].sidedefs)\n```","summary":"<p>Writes a list of sidedefs given an output io and the sidedefs to write and returns the written directory</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"},{"name":"sidedefs","external_name":"sidedefs","restriction":"Array(::WAD::Map::Sidedef)"}],"args_string":"(file : String | Path, sidedefs : Array(::WAD::Map::Sidedef)) : ::WAD::Directory","args_html":"(file : String | Path, sidedefs : Array(<a href=\"../../WAD/Map/Sidedef.html\">::WAD::Map::Sidedef</a>)) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":157,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L157"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"},{"name":"sidedefs","external_name":"sidedefs","restriction":"Array(::WAD::Map::Sidedef)"}],"return_type":"::WAD::Directory","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return self.write(file, sidedefs)\nend"},"external_var":false},{"html_id":"write(io:IO,sidedefs:Array(::WAD::Map::Sidedef)):::WAD::Directory-class-method","name":"write","doc":"Writes a list of sidedefs given an output io and the sidedefs\nto write and returns the written directory\n\nWrites sidedefs in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/sidedefs.lmp\", \"w+\") do |file|\n  WAD::Map::Sidedef.write(my_wad.maps[\"MyMap\"].sidedefs)\nend\n```","summary":"<p>Writes a list of sidedefs given an output io and the sidedefs to write and returns the written directory</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sidedefs","external_name":"sidedefs","restriction":"Array(::WAD::Map::Sidedef)"}],"args_string":"(io : IO, sidedefs : Array(::WAD::Map::Sidedef)) : ::WAD::Directory","args_html":"(io : IO, sidedefs : Array(<a href=\"../../WAD/Map/Sidedef.html\">::WAD::Map::Sidedef</a>)) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":173,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L173"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sidedefs","external_name":"sidedefs","restriction":"Array(::WAD::Map::Sidedef)"}],"return_type":"::WAD::Directory","visibility":"Public","body":"written_directory = ::WAD::Directory.new\nwritten_directory.name = \"SIDEDEFS\"\nwritten_directory.file_pos = io.pos.to_u32\n\nlump_size = 0_u32\n\nsidedefs.each do |sidedef|\n  io.write_bytes(sidedef.x_offset.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(sidedef.y_offset.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n\n  name_slice = Bytes.new(8)\n  name_slice.copy_from(::WAD.slice_cut((::WAD.string_cut(sidedef.name_tex_up)).to_slice))\n  io.write(name_slice)\n  lump_size = lump_size + 8_u32\n\n  name_slice = Bytes.new(8)\n  name_slice.copy_from(::WAD.slice_cut((::WAD.string_cut(sidedef.name_tex_low)).to_slice))\n  io.write(name_slice)\n  lump_size = lump_size + 8_u32\n\n  name_slice = Bytes.new(8)\n  name_slice.copy_from(::WAD.slice_cut((::WAD.string_cut(sidedef.name_tex_mid)).to_slice))\n  io.write(name_slice)\n  lump_size = lump_size + 8_u32\n\n  io.write_bytes(sidedef.facing_sector_num.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\nend\nwritten_directory.size = lump_size.to_u32\nwritten_directory\n"},"external_var":false}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/write/write_map.cr","line_number":148,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L148"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/write/write_map.cr","line_number":148,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L148"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Map/Ssector","path":"WritingAdditions/Map/Ssector.html","kind":"struct","full_name":"WritingAdditions::Map::Ssector","name":"Ssector","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/write/write_map.cr","line_number":307,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L307"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WritingAdditions/Map","kind":"module","full_name":"WritingAdditions::Map","name":"Map"},"doc":"Structure of a ssector.","summary":"<p>Structure of a ssector.</p>","class_methods":[{"html_id":"write(file:String|Path,ssectors:Array(::WAD::Map::Ssector)):::WAD::Directory-class-method","name":"write","doc":"Writes a list of ssectors given an output io and the ssectors\nto write and returns the written directory\n\nWrites ssectors in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nWAD::Map::Ssector.write(\"Path/To/ssectors.lmp\", my_wad.maps[\"MyMap\"].ssectors)\n```","summary":"<p>Writes a list of ssectors given an output io and the ssectors to write and returns the written directory</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"},{"name":"ssectors","external_name":"ssectors","restriction":"Array(::WAD::Map::Ssector)"}],"args_string":"(file : String | Path, ssectors : Array(::WAD::Map::Ssector)) : ::WAD::Directory","args_html":"(file : String | Path, ssectors : Array(<a href=\"../../WAD/Map/Ssector.html\">::WAD::Map::Ssector</a>)) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":316,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L316"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"},{"name":"ssectors","external_name":"ssectors","restriction":"Array(::WAD::Map::Ssector)"}],"return_type":"::WAD::Directory","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return self.write(file, ssectors)\nend"},"external_var":false},{"html_id":"write(io:IO,ssectors:Array(::WAD::Map::Ssector)):::WAD::Directory-class-method","name":"write","doc":"Writes a list of ssectors given an output io and the ssectors\nto write and returns the written directory\n\nWrites ssectors in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/ssectors.lmp\", \"w+\") do |file|\n  WAD::Map::Ssector.write(my_wad.maps[\"MyMap\"].ssectors)\nend\n```","summary":"<p>Writes a list of ssectors given an output io and the ssectors to write and returns the written directory</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"ssectors","external_name":"ssectors","restriction":"Array(::WAD::Map::Ssector)"}],"args_string":"(io : IO, ssectors : Array(::WAD::Map::Ssector)) : ::WAD::Directory","args_html":"(io : IO, ssectors : Array(<a href=\"../../WAD/Map/Ssector.html\">::WAD::Map::Ssector</a>)) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":332,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L332"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"ssectors","external_name":"ssectors","restriction":"Array(::WAD::Map::Ssector)"}],"return_type":"::WAD::Directory","visibility":"Public","body":"written_directory = ::WAD::Directory.new\nwritten_directory.name = \"SSECTORS\"\nwritten_directory.file_pos = io.pos.to_u32\n\nlump_size = 0_u32\n\nssectors.each do |ssector|\n  io.write_bytes(ssector.seg_count.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(ssector.first_seg_num.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\nend\n\nwritten_directory.size = lump_size.to_u32\nwritten_directory\n"},"external_var":false}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/write/write_map.cr","line_number":307,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L307"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/write/write_map.cr","line_number":307,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L307"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Map/Thing","path":"WritingAdditions/Map/Thing.html","kind":"struct","full_name":"WritingAdditions::Map::Thing","name":"Thing","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/write/write_map.cr","line_number":44,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L44"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WritingAdditions/Map","kind":"module","full_name":"WritingAdditions::Map","name":"Map"},"doc":"Structure of a thing.","summary":"<p>Structure of a thing.</p>","class_methods":[{"html_id":"write(file:String|Path,things:Array(::WAD::Map::Thing)):::WAD::Directory-class-method","name":"write","doc":"Writes a list of things given an output io and the things\nto write and returns the written directory\n\nWrites things in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nWAD::Map::Thing.write(\"Path/To/things.lmp\", my_wad.maps[\"MyMap\"].things)\n```","summary":"<p>Writes a list of things given an output io and the things to write and returns the written directory</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"},{"name":"things","external_name":"things","restriction":"Array(::WAD::Map::Thing)"}],"args_string":"(file : String | Path, things : Array(::WAD::Map::Thing)) : ::WAD::Directory","args_html":"(file : String | Path, things : Array(<a href=\"../../WAD/Map/Thing.html\">::WAD::Map::Thing</a>)) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":53,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L53"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"},{"name":"things","external_name":"things","restriction":"Array(::WAD::Map::Thing)"}],"return_type":"::WAD::Directory","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return self.write(file, things)\nend"},"external_var":false},{"html_id":"write(io:IO,things:Array(::WAD::Map::Thing)):::WAD::Directory-class-method","name":"write","doc":"Writes a list of things given an output io and the things\nto write and returns the written directory\n\nWrites things in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/things.lmp\", \"w+\") do |file|\n  WAD::Map::Thing.write(my_wad.maps[\"MyMap\"].things)\nend\n```","summary":"<p>Writes a list of things given an output io and the things to write and returns the written directory</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"things","external_name":"things","restriction":"Array(::WAD::Map::Thing)"}],"args_string":"(io : IO, things : Array(::WAD::Map::Thing)) : ::WAD::Directory","args_html":"(io : IO, things : Array(<a href=\"../../WAD/Map/Thing.html\">::WAD::Map::Thing</a>)) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":69,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L69"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"things","external_name":"things","restriction":"Array(::WAD::Map::Thing)"}],"return_type":"::WAD::Directory","visibility":"Public","body":"written_directory = ::WAD::Directory.new\nwritten_directory.name = \"THINGS\"\nwritten_directory.file_pos = io.pos.to_u32\n\nlump_size = 0_u32\n\nthings.each do |thing|\n  io.write_bytes(thing.x_position.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(thing.y_position.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(thing.angle_facing.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(thing.thing_type.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(thing.flags.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\nend\nwritten_directory.size = lump_size.to_u32\nwritten_directory\n"},"external_var":false}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/write/write_map.cr","line_number":44,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L44"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/write/write_map.cr","line_number":44,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L44"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Map/Vertex","path":"WritingAdditions/Map/Vertex.html","kind":"struct","full_name":"WritingAdditions::Map::Vertex","name":"Vertex","abstract":false,"superclass":{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"wa-cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"wa-cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"wa-cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/write/write_map.cr","line_number":210,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L210"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"wa-cr/WritingAdditions/Map","kind":"module","full_name":"WritingAdditions::Map","name":"Map"},"doc":"Structure of a vertex.","summary":"<p>Structure of a vertex.</p>","class_methods":[{"html_id":"write(file:String|Path,vertexes:Array(::WAD::Map::Vertex)):::WAD::Directory-class-method","name":"write","doc":"Writes a list of vertexes given an output io and the vertexes\nto write and returns the written directory\n\nWrites vertexes in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nWAD::Map::Vertex.write(\"Path/To/vertexes.lmp\", my_wad.maps[\"MyMap\"].vertexes)\n```","summary":"<p>Writes a list of vertexes given an output io and the vertexes to write and returns the written directory</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"},{"name":"vertexes","external_name":"vertexes","restriction":"Array(::WAD::Map::Vertex)"}],"args_string":"(file : String | Path, vertexes : Array(::WAD::Map::Vertex)) : ::WAD::Directory","args_html":"(file : String | Path, vertexes : Array(<a href=\"../../WAD/Map/Vertex.html\">::WAD::Map::Vertex</a>)) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":219,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L219"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"},{"name":"vertexes","external_name":"vertexes","restriction":"Array(::WAD::Map::Vertex)"}],"return_type":"::WAD::Directory","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return self.write(file, vertexes)\nend"},"external_var":false},{"html_id":"write(io:IO,vertexes:Array(::WAD::Map::Vertex)):::WAD::Directory-class-method","name":"write","doc":"Writes a list of vertexes given an output io and the vertexes\nto write and returns the written directory\n\nWrites vertexes in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/vertexes.lmp\", \"w+\") do |file|\n  WAD::Map::Vertex.write(my_wad.maps[\"MyMap\"].vertexes)\nend\n```","summary":"<p>Writes a list of vertexes given an output io and the vertexes to write and returns the written directory</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"vertexes","external_name":"vertexes","restriction":"Array(::WAD::Map::Vertex)"}],"args_string":"(io : IO, vertexes : Array(::WAD::Map::Vertex)) : ::WAD::Directory","args_html":"(io : IO, vertexes : Array(<a href=\"../../WAD/Map/Vertex.html\">::WAD::Map::Vertex</a>)) : <a href=\"../../WAD/Directory.html\">::WAD::Directory</a>","location":{"filename":"src/write/write_map.cr","line_number":235,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L235"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"vertexes","external_name":"vertexes","restriction":"Array(::WAD::Map::Vertex)"}],"return_type":"::WAD::Directory","visibility":"Public","body":"written_directory = ::WAD::Directory.new\nwritten_directory.name = \"VERTEXES\"\nwritten_directory.file_pos = io.pos.to_u32\n\nlump_size = 0_u32\n\nvertexes.each do |vertex|\n  io.write_bytes(vertex.x_position.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(vertex.y_position.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\nend\nwritten_directory.size = lump_size.to_u32\nwritten_directory\n"},"external_var":false}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/write/write_map.cr","line_number":210,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L210"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/write/write_map.cr","line_number":210,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_map.cr#L210"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false}]}]},{"html_id":"wa-cr/WritingAdditions/Music","path":"WritingAdditions/Music.html","kind":"module","full_name":"WritingAdditions::Music","name":"Music","abstract":false,"locations":[{"filename":"src/write/write_music.cr","line_number":3,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_music.cr#L3"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/Music","kind":"class","full_name":"WAD::Music","name":"Music"}],"namespace":{"html_id":"wa-cr/WritingAdditions","kind":"module","full_name":"WritingAdditions","name":"WritingAdditions"},"doc":"A music track.","summary":"<p>A music track.</p>","instance_methods":[{"html_id":"write(file:String|Path):UInt32-instance-method","name":"write","doc":"Writes a music given an output io and returns the size of the written lump\n\nWrites a music in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nmy_wad.music[\"MyMusic\"].write(\"Path/To/music.lmp\")\n```","summary":"<p>Writes a music given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"args_string":"(file : String | Path) : UInt32","args_html":"(file : String | Path) : UInt32","location":{"filename":"src/write/write_music.cr","line_number":11,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_music.cr#L11"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"return_type":"UInt32","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return write(file)\nend"},"external_var":false},{"html_id":"write(io:IO):UInt32-instance-method","name":"write","doc":"Writes a music given an output io and returns the size of the written lump\n\nWrites a music in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/music.lmp\", \"w+\") do |file|\n  my_wad.music[\"MyMusic\"].write(file)\nend\n```","summary":"<p>Writes a music given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : UInt32","args_html":"(io : IO) : UInt32","location":{"filename":"src/write/write_music.cr","line_number":26,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_music.cr#L26"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"UInt32","visibility":"Public","body":"lump_size = 0_u32\n\nio.print(identifier)\nlump_size = lump_size + 4_u32\n\nio.write_bytes(score_len.to_u16, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 2_u32\nio.write_bytes(score_start.to_u16, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 2_u32\nio.write_bytes(channels.to_u16, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 2_u32\nio.write_bytes(sec_channels.to_u16, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 2_u32\nio.write_bytes(instr_cnt.to_u16, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 2_u32\n\nio.write_bytes(0.to_u16, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 2_u32\n\ninstruments.each do |instrument|\n  io.write_bytes(instrument.to_u16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\nend\n\nsong.each do |value|\n  io.write_bytes(value.to_u8, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 1_u32\nend\nlump_size\n"},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/PcSound","path":"WritingAdditions/PcSound.html","kind":"module","full_name":"WritingAdditions::PcSound","name":"PcSound","abstract":false,"locations":[{"filename":"src/write/write_sound.cr","line_number":3,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_sound.cr#L3"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/PcSound","kind":"class","full_name":"WAD::PcSound","name":"PcSound"}],"namespace":{"html_id":"wa-cr/WritingAdditions","kind":"module","full_name":"WritingAdditions","name":"WritingAdditions"},"doc":"A pc speaker sound effect.","summary":"<p>A pc speaker sound effect.</p>","instance_methods":[{"html_id":"write(file:String|Path):UInt32-instance-method","name":"write","doc":"Writes a pc sound given an output io and returns the size of the written lump\n\nWrites a pc sound in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nmy_wad.pcsounds.[\"MyPcSound\"].write(\"Path/To/pcsound.lmp\")\n```","summary":"<p>Writes a pc sound given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"args_string":"(file : String | Path) : UInt32","args_html":"(file : String | Path) : UInt32","location":{"filename":"src/write/write_sound.cr","line_number":11,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_sound.cr#L11"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"return_type":"UInt32","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return write(file)\nend"},"external_var":false},{"html_id":"write(io:IO):UInt32-instance-method","name":"write","doc":"Writes a pc sound given an output io and returns the size of the written lump\n\nWrites a pc sound in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/pcsound.lmp\", \"w+\") do |file|\n  my_wad.pcsounds.[\"MyPcSound\"].write(file)\nend\n```","summary":"<p>Writes a pc sound given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : UInt32","args_html":"(io : IO) : UInt32","location":{"filename":"src/write/write_sound.cr","line_number":26,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_sound.cr#L26"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"UInt32","visibility":"Public","body":"lump_size = 0_u32\n\nio.write_bytes(format_num.to_u16, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 2_u32\nio.write_bytes(samples_num.to_u16, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 2_u32\n\nsamples.each do |sample|\n  io.write_bytes(sample.to_u8, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 1_u32\nend\nlump_size\n"},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Playpal","path":"WritingAdditions/Playpal.html","kind":"module","full_name":"WritingAdditions::Playpal","name":"Playpal","abstract":false,"locations":[{"filename":"src/write/write_texture.cr","line_number":3,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L3"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/Playpal","kind":"class","full_name":"WAD::Playpal","name":"Playpal"}],"namespace":{"html_id":"wa-cr/WritingAdditions","kind":"module","full_name":"WritingAdditions","name":"WritingAdditions"},"doc":"The set of color palettes","summary":"<p>The set of color palettes</p>","instance_methods":[{"html_id":"write(file:String|Path):UInt32-instance-method","name":"write","doc":"Writes a playpal given an output io and returns the size of the written lump\n\nWrites a playpal in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nmy_wad.playpal.write(\"Path/To/Playpal.lmp\")\n```","summary":"<p>Writes a playpal given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"args_string":"(file : String | Path) : UInt32","args_html":"(file : String | Path) : UInt32","location":{"filename":"src/write/write_texture.cr","line_number":11,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L11"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"return_type":"UInt32","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return write(file)\nend"},"external_var":false},{"html_id":"write(io:IO):UInt32-instance-method","name":"write","doc":"Writes a playpal given an output io and returns the size of the written lump\n\nWrites a playpal in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/Playpal.lmp\", \"w+\") do |file|\n  my_wad.playpal.write(file)\nend\n```","summary":"<p>Writes a playpal given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : UInt32","args_html":"(io : IO) : UInt32","location":{"filename":"src/write/write_texture.cr","line_number":26,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L26"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"UInt32","visibility":"Public","body":"lump_size = 0_u32\n\npalettes.each do |palette|\n  palette.colors.each do |color|\n    io.write_bytes(color.r.to_u8, IO::ByteFormat::LittleEndian)\n    lump_size = lump_size + 1_u32\n    io.write_bytes(color.g.to_u8, IO::ByteFormat::LittleEndian)\n    lump_size = lump_size + 1_u32\n    io.write_bytes(color.b.to_u8, IO::ByteFormat::LittleEndian)\n    lump_size = lump_size + 1_u32\n  end\nend\nlump_size\n"},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Pnames","path":"WritingAdditions/Pnames.html","kind":"module","full_name":"WritingAdditions::Pnames","name":"Pnames","abstract":false,"locations":[{"filename":"src/write/write_texture.cr","line_number":192,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L192"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/Pnames","kind":"class","full_name":"WAD::Pnames","name":"Pnames"}],"namespace":{"html_id":"wa-cr/WritingAdditions","kind":"module","full_name":"WritingAdditions","name":"WritingAdditions"},"doc":"Includes all the names for wall patches.","summary":"<p>Includes all the names for wall patches.</p>","instance_methods":[{"html_id":"write(file:String|Path):UInt32-instance-method","name":"write","doc":"Writes a pnames given an output io and returns the size of the written lump\n\nWrites a pnames in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nmy_wad.pnames.write(\"Path/To/pnames.lmp\")\n```","summary":"<p>Writes a pnames given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"args_string":"(file : String | Path) : UInt32","args_html":"(file : String | Path) : UInt32","location":{"filename":"src/write/write_texture.cr","line_number":200,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L200"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"return_type":"UInt32","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return write(file)\nend"},"external_var":false},{"html_id":"write(io:IO):UInt32-instance-method","name":"write","doc":"Writes a pnames given an output io and returns the size of the written lump\n\nWrites a pnames in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/pnames.lmp\", \"w+\") do |file|\n  my_wad.pnames.write(file)\nend\n```","summary":"<p>Writes a pnames given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : UInt32","args_html":"(io : IO) : UInt32","location":{"filename":"src/write/write_texture.cr","line_number":215,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L215"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"UInt32","visibility":"Public","body":"lump_size = 0_u32\n\nio.write_bytes(num_patches.to_i32, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 4_u32\n\npatches.each do |patch|\n  name_slice = Bytes.new(8)\n  name_slice.copy_from(::WAD.slice_cut((::WAD.string_cut(patch)).to_slice))\n  io.write(name_slice)\n  lump_size = lump_size + 8_u32\nend\nlump_size\n"},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/Sound","path":"WritingAdditions/Sound.html","kind":"module","full_name":"WritingAdditions::Sound","name":"Sound","abstract":false,"locations":[{"filename":"src/write/write_sound.cr","line_number":43,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_sound.cr#L43"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/Sound","kind":"class","full_name":"WAD::Sound","name":"Sound"}],"namespace":{"html_id":"wa-cr/WritingAdditions","kind":"module","full_name":"WritingAdditions","name":"WritingAdditions"},"doc":"A normal sound effect.","summary":"<p>A normal sound effect.</p>","instance_methods":[{"html_id":"write(file:String|Path):UInt32-instance-method","name":"write","doc":"Writes a sound given an output io and returns the size of the written lump\n\nWrites a sound in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nmy_wad.sounds[\"MySound\"].write(\"Path/To/sound.lmp\")\n```","summary":"<p>Writes a sound given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"args_string":"(file : String | Path) : UInt32","args_html":"(file : String | Path) : UInt32","location":{"filename":"src/write/write_sound.cr","line_number":51,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_sound.cr#L51"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"return_type":"UInt32","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return write(file)\nend"},"external_var":false},{"html_id":"write(io:IO):UInt32-instance-method","name":"write","doc":"Writes a sound given an output io and returns the size of the written lump\n\nWrites a sound in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/sound.lmp\", \"w+\") do |file|\n  my_wad.sounds[\"MySound\"].write(file)\nend\n```","summary":"<p>Writes a sound given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : UInt32","args_html":"(io : IO) : UInt32","location":{"filename":"src/write/write_sound.cr","line_number":66,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_sound.cr#L66"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"UInt32","visibility":"Public","body":"lump_size = 0_u32\n\nio.write_bytes(format_num.to_u16, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 2_u32\nio.write_bytes(sample_rate.to_u16, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 2_u32\nio.write_bytes(samples_num.to_u16, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 2_u32\n\n\nio.write_bytes(0.to_u16, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 2_u32\n\n::WAD::Sound::PAD_BYTES.times do\n  io.write_bytes(samples[0].to_u8, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 1_u32\nend\n\nsamples.each do |sample|\n  io.write_bytes(sample.to_u8, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 1_u32\nend\n\n::WAD::Sound::PAD_BYTES.times do\n  io.write_bytes(samples[-1].to_u8, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 1_u32\nend\n\nlump_size\n"},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/TextureX","path":"WritingAdditions/TextureX.html","kind":"module","full_name":"WritingAdditions::TextureX","name":"TextureX","abstract":false,"locations":[{"filename":"src/write/write_texture.cr","line_number":117,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L117"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD/TextureX","kind":"class","full_name":"WAD::TextureX","name":"TextureX"}],"namespace":{"html_id":"wa-cr/WritingAdditions","kind":"module","full_name":"WritingAdditions","name":"WritingAdditions"},"doc":"Defines how wall patches from the WAD file should combine to form wall textures.","summary":"<p>Defines how wall patches from the WAD file should combine to form wall textures.</p>","instance_methods":[{"html_id":"write(file:String|Path):UInt32-instance-method","name":"write","doc":"Writes a texture map given an output io and returns the size of the written lump\n\nWrites a texture map in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nmy_wad.texmapx.[\"MyTexMap\"].write(\"Path/To/texturex.lmp\")\n```","summary":"<p>Writes a texture map given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"args_string":"(file : String | Path) : UInt32","args_html":"(file : String | Path) : UInt32","location":{"filename":"src/write/write_texture.cr","line_number":125,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L125"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"return_type":"UInt32","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return write(file)\nend"},"external_var":false},{"html_id":"write(io:IO):UInt32-instance-method","name":"write","doc":"Writes a texture map given an output io and returns the size of the written lump\n\nWrites a texture map in *my_wad* to a file:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\".Path/To/texturex.lmp\", \"w+\") do |file|\n  my_wad.texmaps[\"MyTexMap\"].write(file)\nend\n```","summary":"<p>Writes a texture map given an output io and returns the size of the written lump</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : UInt32","args_html":"(io : IO) : UInt32","location":{"filename":"src/write/write_texture.cr","line_number":140,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write/write_texture.cr#L140"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"UInt32","visibility":"Public","body":"lump_size = 0_u32\n\nio.write_bytes(numtextures.to_i32, IO::ByteFormat::LittleEndian)\nlump_size = lump_size + 4_u32\n\noffsets.each do |offset|\n  io.write_bytes(offset.to_i32, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 4_u32\nend\n\nmtextures.each do |texture|\n  name_slice = Bytes.new(8)\n  name_slice.copy_from(::WAD.slice_cut((::WAD.string_cut(texture.name)).to_slice))\n  io.write(name_slice)\n  lump_size = lump_size + 8_u32\n\n  if texture.masked\n    io.write_bytes(1.to_i32, IO::ByteFormat::LittleEndian)\n    lump_size = lump_size + 4_u32\n  else\n    io.write_bytes(0.to_i32, IO::ByteFormat::LittleEndian)\n    lump_size = lump_size + 4_u32\n  end\n\n  io.write_bytes(texture.width.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(texture.height.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n  io.write_bytes(texture.columndirectory.to_i32, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 4_u32\n  io.write_bytes(texture.patchcount.to_i16, IO::ByteFormat::LittleEndian)\n  lump_size = lump_size + 2_u32\n\n  texture.patches.each do |patch|\n    io.write_bytes(patch.originx.to_i16, IO::ByteFormat::LittleEndian)\n    lump_size = lump_size + 2_u32\n    io.write_bytes(patch.originy.to_i16, IO::ByteFormat::LittleEndian)\n    lump_size = lump_size + 2_u32\n    io.write_bytes(patch.patch.to_i16, IO::ByteFormat::LittleEndian)\n    lump_size = lump_size + 2_u32\n    io.write_bytes(patch.stepdir.to_i16, IO::ByteFormat::LittleEndian)\n    lump_size = lump_size + 2_u32\n    io.write_bytes(patch.colormap.to_i16, IO::ByteFormat::LittleEndian)\n    lump_size = lump_size + 2_u32\n  end\nend\nlump_size\n"},"external_var":false}]},{"html_id":"wa-cr/WritingAdditions/WAD","path":"WritingAdditions/WAD.html","kind":"module","full_name":"WritingAdditions::WAD","name":"WAD","abstract":false,"locations":[{"filename":"src/write.cr","line_number":133,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L133"}],"repository_name":"wa-cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"wa-cr/WAD","kind":"class","full_name":"WAD","name":"WAD"}],"namespace":{"html_id":"wa-cr/WritingAdditions","kind":"module","full_name":"WritingAdditions","name":"WritingAdditions"},"doc":"Reads, writes, and stores the data of a WAD file.\n\nThis helps write out parsed `::WAD` files to a .wad:\n\n```\nrequire \"wa-cr/write\"\n\nmy_wad = WAD.read(\"Path/To/Wad\")\n\nFile.open(\"Path/To/MyWad.WAD\", \"w+\") do |file|\n  my_wad.write(file)\nend\n```\n\nYou can also write from new `::WAD` files:\n\n```\nrequire \"wa-cr/write\"\n\nmy_wad = WAD.new\n\n# You'll need to set the WAD type for new WAD's\nmy_wad.type = WAD::Type::Internal\n\nFile.open(\"Path/To/MyWad.WAD\") do |file|\n  my_wad.write(file)\nend\n```","summary":"<p>Reads, writes, and stores the data of a WAD file.</p>","instance_methods":[{"html_id":"write(file:String|Path):UInt32-instance-method","name":"write","doc":"Writes a WAD class to an file and returns the written file's size\n\nWrites a wad file to *my_new_wad.WAD*:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nmy_wad.write(\"Path/To/my_wad.WAD\")\n```","summary":"<p>Writes a WAD class to an file and returns the written file's size</p>","abstract":false,"args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"args_string":"(file : String | Path) : UInt32","args_html":"(file : String | Path) : UInt32","location":{"filename":"src/write.cr","line_number":141,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L141"},"def":{"name":"write","args":[{"name":"file","external_name":"file","restriction":"String | Path"}],"return_type":"UInt32","visibility":"Public","body":"File.open(file, \"w+\") do |file|\n  return write(file)\nend"},"external_var":false},{"html_id":"write(io:IO):UInt32-instance-method","name":"write","doc":"Writes a WAD class to an io and returns the written file's size\n\nWrites a wad file to *my_new_wad.WAD*:\n```\nmy_wad = WAD.read(\"Path/To/Wad\")\nFile.open(\"Path/To/my_new_wad.WAD\", \"w+\") do |file|\n  my_wad.write(file)\nend\n```","summary":"<p>Writes a WAD class to an io and returns the written file's size</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : UInt32","args_html":"(io : IO) : UInt32","location":{"filename":"src/write.cr","line_number":156,"url":"https://github.com/D-Shwagginz/wa-cr/blob/8d2bde88bcf34ec9dd61aae5e76d9a2ea529c85c/src/write.cr#L156"},"def":{"name":"write","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"UInt32","visibility":"Public","body":"file_size : UInt32 = 0_u32\nwritten_directories : Array(::WAD::Directory) = [] of ::WAD::Directory\nwrite_directory_pointer : UInt32 = 0_u32\n\n_write_header(io)\n\ndirectories.each do |directory|\n  written_directory = ::WAD::Directory.new\n  written_directory.name = directory.name\n  written_directory.file_pos = io.pos.to_u32\n\n  if ::WAD::Genmidi.is_genmidi?(directory.name)\n    written_directory.size = genmidi.write(io)\n    written_directories << written_directory\n    next\n  end\n\n  if ::WAD::Dmxgus.is_dmxgus?(directory.name)\n    written_directory.size = dmxgus.write(io)\n    written_directories << written_directory\n    next\n  end\n\n  if ::WAD::Playpal.is_playpal?(directory.name)\n    written_directory.size = playpal.write(io)\n    written_directories << written_directory\n    next\n  end\n\n  if ::WAD::Colormap.is_colormap?(directory.name)\n    written_directory.size = colormap.write(io)\n    written_directories << written_directory\n    next\n  end\n\n  if ::WAD::EnDoom.is_endoom?(directory.name)\n    written_directory.size = endoom.write(io)\n    written_directories << written_directory\n    next\n  end\n\n  if ::WAD::Pnames.is_pnames?(directory.name)\n    written_directory.size = pnames.write(io)\n    written_directories << written_directory\n    next\n  end\n\n  if maps[directory.name]?\n    written_directory.size = 0\n    written_directories << written_directory\n    (maps[directory.name].write(io)).each do |lump_dir|\n      written_directory = ::WAD::Directory.new\n      written_directory.name = lump_dir.name\n      written_directory.file_pos = lump_dir.file_pos\n      written_directory.size = lump_dir.size\n      written_directories << written_directory\n    end\n    next\n  end\n\n  if pcsounds[directory.name]?\n    written_directory.size = pcsounds[directory.name].write(io)\n    written_directories << written_directory\n    next\n  end\n\n  if sounds[directory.name]?\n    written_directory.size = sounds[directory.name].write(io)\n    written_directories << written_directory\n    next\n  end\n\n  if music[directory.name]?\n    written_directory.size = music[directory.name].write(io)\n    written_directories << written_directory\n    next\n  end\n\n  if texmaps[directory.name]?\n    written_directory.size = texmaps[directory.name].write(io)\n    written_directories << written_directory\n    next\n  end\n\n  if graphics[directory.name]?\n    written_directory.size = graphics[directory.name].write(io)\n    written_directories << written_directory\n    next\n  end\n\n  if sprites[directory.name]?\n    written_directory.size = sprites[directory.name].write(io)\n    written_directories << written_directory\n    next\n  end\n\n  if flats[directory.name]?\n    written_directory.size = flats[directory.name].write(io)\n    written_directories << written_directory\n    next\n  end\n\n  if demos[directory.name]?\n    written_directory.size = demos[directory.name].write(io)\n    written_directories << written_directory\n    next\n  end\n\n  written_directory.size = 0\n  written_directories << written_directory\nend\n\nwrite_directory_pointer = io.pos.to_u32\n\nwritten_directories.each do |written_directory|\n  _write_directory(io, written_directory)\nend\n\nfile_size = io.pos.to_u32\n\nio.pos = 0\n\n_write_header(io, written_directories.size.to_u32, write_directory_pointer)\nfile_size\n"},"external_var":false}]}]}]}}